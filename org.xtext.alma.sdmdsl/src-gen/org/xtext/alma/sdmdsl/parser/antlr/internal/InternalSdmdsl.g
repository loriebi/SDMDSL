/*
 * generated by Xtext 2.9.1
 */
grammar InternalSdmdsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.alma.sdmdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.alma.sdmdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.alma.sdmdsl.services.SdmdslGrammarAccess;

}

@parser::members {

 	private SdmdslGrammarAccess grammarAccess;

    public InternalSdmdslParser(TokenStream input, SdmdslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SdmdslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_doc_0_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_0_0, grammarAccess.getModelAccess().getDocML_COMMENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_0_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.alma.sdmdsl.Sdmdsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementTableParserRuleCall_3_0());
				}
				lv_element_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"element",
						lv_element_3_0,
						"org.xtext.alma.sdmdsl.Sdmdsl.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRulePrimitiveTypes
entryRulePrimitiveTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypesRule()); }
	iv_rulePrimitiveTypes=rulePrimitiveTypes
	{ $current=$iv_rulePrimitiveTypes.current.getText(); }
	EOF;

// Rule PrimitiveTypes
rulePrimitiveTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getBasicTypeParserRuleCall_0());
		}
		this_BasicType_0=ruleBasicType
		{
			$current.merge(this_BasicType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getPhysicalTypeParserRuleCall_1());
		}
		this_PhysicalType_1=rulePhysicalType
		{
			$current.merge(this_PhysicalType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getTechnicalTypeParserRuleCall_2());
		}
		this_TechnicalType_2=ruleTechnicalType
		{
			$current.merge(this_TechnicalType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getTimeTypeParserRuleCall_3());
		}
		this_TimeType_3=ruleTimeType
		{
			$current.merge(this_TimeType_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current.getText(); }
	EOF;

// Rule BasicType
ruleBasicType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Char'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getCharKeyword_0());
		}
		    |
		kw='Short'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getShortKeyword_1());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getIntegerKeyword_2());
		}
		    |
		kw='Long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getLongKeyword_3());
		}
		    |
		kw='Float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getFloatKeyword_4());
		}
		    |
		kw='Double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getDoubleKeyword_5());
		}
		    |
		kw='Complex'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getComplexKeyword_6());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getStringKeyword_7());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getBooleanKeyword_8());
		}
	)
;

// Entry rule entryRulePhysicalType
entryRulePhysicalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPhysicalTypeRule()); }
	iv_rulePhysicalType=rulePhysicalType
	{ $current=$iv_rulePhysicalType.current.getText(); }
	EOF;

// Rule PhysicalType
rulePhysicalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Angle'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getAngleKeyword_0());
		}
		    |
		kw='AngularRate'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getAngularRateKeyword_1());
		}
		    |
		kw='Flux'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getFluxKeyword_2());
		}
		    |
		kw='Frequency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getFrequencyKeyword_3());
		}
		    |
		kw='Humidity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getHumidityKeyword_4());
		}
		    |
		kw='Length'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getLengthKeyword_5());
		}
		    |
		kw='Pressure'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getPressureKeyword_6());
		}
		    |
		kw='Speed'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getSpeedKeyword_7());
		}
		    |
		kw='Temperature'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getTemperatureKeyword_8());
		}
	)
;

// Entry rule entryRuleTechnicalType
entryRuleTechnicalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTechnicalTypeRule()); }
	iv_ruleTechnicalType=ruleTechnicalType
	{ $current=$iv_ruleTechnicalType.current.getText(); }
	EOF;

// Rule TechnicalType
ruleTechnicalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Tag'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getTagKeyword_0());
		}
		    |
		kw='Entity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityKeyword_1());
		}
		    |
		kw='EntityId'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityIdKeyword_2());
		}
		    |
		kw='EntityRef'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityRefKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeType
entryRuleTimeType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeTypeRule()); }
	iv_ruleTimeType=ruleTimeType
	{ $current=$iv_ruleTimeType.current.getText(); }
	EOF;

// Rule TimeType
ruleTimeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Interval'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getIntervalKeyword_0());
		}
		    |
		kw='ArrayTime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getArrayTimeKeyword_1());
		}
		    |
		kw='ArrayTimeInterval'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getArrayTimeIntervalKeyword_2());
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_doc_0_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_0_0, grammarAccess.getTableAccess().getDocML_COMMENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_0_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
		otherlv_1='table'
		{
			newLeafNode(otherlv_1, grammarAccess.getTableAccess().getTableKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					lv_keyLevel_4_0='Key'
					{
						newLeafNode(lv_keyLevel_4_0, grammarAccess.getTableAccess().getKeyLevelKeyKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTableRule());
						}
						setWithLastConsumed($current, "keyLevel", true, "Key");
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getTableAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getKeyDataFieldParserRuleCall_4_2_0());
					}
					lv_keyData_6_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"keyData",
							lv_keyData_6_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		(
			(
				(
					lv_reqLevel_7_0='Required Data'
					{
						newLeafNode(lv_reqLevel_7_0, grammarAccess.getTableAccess().getReqLevelRequiredDataKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTableRule());
						}
						setWithLastConsumed($current, "reqLevel", true, "Required Data");
					}
				)
			)?
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getTableAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getReqDataFieldParserRuleCall_5_2_0());
					}
					lv_reqData_9_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"reqData",
							lv_reqData_9_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					lv_optLevel_10_0='Optional Data'
					{
						newLeafNode(lv_optLevel_10_0, grammarAccess.getTableAccess().getOptLevelOptionalDataKeyword_6_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTableRule());
						}
						setWithLastConsumed($current, "optLevel", true, "Optional Data");
					}
				)
			)?
			otherlv_11=':'
			{
				newLeafNode(otherlv_11, grammarAccess.getTableAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getOptDataFieldParserRuleCall_6_2_0());
					}
					lv_optData_12_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"optData",
							lv_optData_12_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					lv_globalLevel_13_0='Global Data'
					{
						newLeafNode(lv_globalLevel_13_0, grammarAccess.getTableAccess().getGlobalLevelGlobalDataKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTableRule());
						}
						setWithLastConsumed($current, "globalLevel", true, "Global Data");
					}
				)
			)?
			otherlv_14=':'
			{
				newLeafNode(otherlv_14, grammarAccess.getTableAccess().getColonKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getGlobalDataGlobalFieldParserRuleCall_7_2_0());
					}
					lv_globalData_15_0=ruleGlobalField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"globalData",
							lv_globalData_15_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.GlobalField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getTableAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0());
					}
					lv_primitiveType_0_0=rulePrimitiveTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"primitiveType",
							lv_primitiveType_0_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.PrimitiveTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getEnumerationEnumTypeCrossReference_0_1_0());
					}
				)
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					lv_scalar_3_0='scalar'
					{
						newLeafNode(lv_scalar_3_0, grammarAccess.getFieldAccess().getScalarScalarKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
						setWithLastConsumed($current, "scalar", lv_scalar_3_0, "scalar");
					}
				)
			)?
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getDataDimDimensionsParserRuleCall_2_1_0());
					}
					lv_dataDim_4_0=ruleDimensions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						add(
							$current,
							"dataDim",
							lv_dataDim_4_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Dimensions");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		(
			(
				lv_autoIncrementable_5_0='autoIncrementable'
				{
					newLeafNode(lv_autoIncrementable_5_0, grammarAccess.getFieldAccess().getAutoIncrementableAutoIncrementableKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed($current, "autoIncrementable", true, "autoIncrementable");
				}
			)
		)?
		(
			(
				(
					(
						lv_refsToAslice_6_0='refersToASlice'
						{
							newLeafNode(lv_refsToAslice_6_0, grammarAccess.getFieldAccess().getRefsToAsliceRefersToASliceKeyword_4_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed($current, "refsToAslice", true, "refersToASlice");
						}
					)
				)
				    |
				(
					(
						lv_refsToOne_7_0='refersToOne'
						{
							newLeafNode(lv_refsToOne_7_0, grammarAccess.getFieldAccess().getRefsToOneRefersToOneKeyword_4_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed($current, "refsToOne", true, "refersToOne");
						}
					)
				)
				    |
				(
					(
						lv_refsToMany_8_0='refersToMany'
						{
							newLeafNode(lv_refsToMany_8_0, grammarAccess.getFieldAccess().getRefsToManyRefersToManyKeyword_4_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed($current, "refsToMany", true, "refersToMany");
						}
					)
				)
				    |
				(
					(
						lv_refsToManySlices_9_0='refersToManySlices'
						{
							newLeafNode(lv_refsToManySlices_9_0, grammarAccess.getFieldAccess().getRefsToManySlicesRefersToManySlicesKeyword_4_0_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed($current, "refsToManySlices", true, "refersToManySlices");
						}
					)
				)
			)
			(
				(
					lv_refersTo_10_0=RULE_ID
					{
						newLeafNode(lv_refersTo_10_0, grammarAccess.getFieldAccess().getRefersToIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
						setWithLastConsumed(
							$current,
							"refersTo",
							lv_refersTo_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_11='|'
				{
					newLeafNode(otherlv_11, grammarAccess.getFieldAccess().getVerticalLineKeyword_4_2_0());
				}
				(
					(
						lv_refersTo2_12_0=RULE_ID
						{
							newLeafNode(lv_refersTo2_12_0, grammarAccess.getFieldAccess().getRefersTo2IDTerminalRuleCall_4_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed(
								$current,
								"refersTo2",
								lv_refersTo2_12_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)?
		)?
		(
			(
				lv_doc_13_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_13_0, grammarAccess.getFieldAccess().getDocML_COMMENTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_13_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
	)
;

// Entry rule entryRuleGlobalField
entryRuleGlobalField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalFieldRule()); }
	iv_ruleGlobalField=ruleGlobalField
	{ $current=$iv_ruleGlobalField.current; }
	EOF;

// Rule GlobalField
ruleGlobalField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGlobalFieldAccess().getPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0());
					}
					lv_primitiveType_0_0=rulePrimitiveTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGlobalFieldRule());
						}
						set(
							$current,
							"primitiveType",
							lv_primitiveType_0_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.PrimitiveTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGlobalFieldRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getGlobalFieldAccess().getEnumerationEnumTypeCrossReference_0_1_0());
					}
				)
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getGlobalFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_readOnly_3_0='readOnly'
				{
					newLeafNode(lv_readOnly_3_0, grammarAccess.getGlobalFieldAccess().getReadOnlyReadOnlyKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalFieldRule());
					}
					setWithLastConsumed($current, "readOnly", true, "readOnly");
				}
			)
		)?
		(
			(
				lv_initValue_4_0=RULE_STRING
				{
					newLeafNode(lv_initValue_4_0, grammarAccess.getGlobalFieldAccess().getInitValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalFieldRule());
					}
					setWithLastConsumed(
						$current,
						"initValue",
						lv_initValue_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_doc_5_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_5_0, grammarAccess.getGlobalFieldAccess().getDocML_COMMENTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalFieldRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_5_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
	)
;

// Entry rule entryRuleDimensions
entryRuleDimensions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDimensionsRule()); }
	iv_ruleDimensions=ruleDimensions
	{ $current=$iv_ruleDimensions.current; }
	EOF;

// Rule Dimensions
ruleDimensions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDimensionsAccess().getDefinedParserRuleCall_0());
		}
		this_Defined_0=ruleDefined
		{
			$current = $this_Defined_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDimensionsAccess().getNotDefinedParserRuleCall_1());
		}
		this_NotDefined_1=ruleNotDefined
		{
			$current = $this_NotDefined_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotDefined
entryRuleNotDefined returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotDefinedRule()); }
	iv_ruleNotDefined=ruleNotDefined
	{ $current=$iv_ruleNotDefined.current; }
	EOF;

// Rule NotDefined
ruleNotDefined returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_obj_0_0='['
				{
					newLeafNode(lv_obj_0_0, grammarAccess.getNotDefinedAccess().getObjLeftSquareBracketKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotDefinedRule());
					}
					setWithLastConsumed($current, "obj", lv_obj_0_0, "[");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getNotDefinedAccess().getWSTerminalRuleCall_1());
			}
		)*
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getNotDefinedAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleDefined
entryRuleDefined returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinedRule()); }
	iv_ruleDefined=ruleDefined
	{ $current=$iv_ruleDefined.current; }
	EOF;

// Rule Defined
ruleDefined returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getDefinedAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinedAccess().getDataDimValueAdditionParserRuleCall_1_0());
				}
				lv_dataDimValue_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinedRule());
					}
					set(
						$current,
						"dataDimValue",
						lv_dataDimValue_1_0,
						"org.xtext.alma.sdmdsl.Sdmdsl.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getDefinedAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleFieldDimensions
entryRuleFieldDimensions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDimensionsRule()); }
	iv_ruleFieldDimensions=ruleFieldDimensions
	{ $current=$iv_ruleFieldDimensions.current; }
	EOF;

// Rule FieldDimensions
ruleFieldDimensions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldDimensionsRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getFieldDimensionsAccess().getDimValueFieldCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleOtherTableField
entryRuleOtherTableField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtherTableFieldRule()); }
	iv_ruleOtherTableField=ruleOtherTableField
	{ $current=$iv_ruleOtherTableField.current; }
	EOF;

// Rule OtherTableField
ruleOtherTableField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOtherTableFieldAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtherTableFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getOtherTableFieldAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_fieldName_2_0=RULE_ID
				{
					newLeafNode(lv_fieldName_2_0, grammarAccess.getOtherTableFieldAccess().getFieldNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtherTableFieldRule());
					}
					setWithLastConsumed(
						$current,
						"fieldName",
						lv_fieldName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIntDimensions
entryRuleIntDimensions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntDimensionsRule()); }
	iv_ruleIntDimensions=ruleIntDimensions
	{ $current=$iv_ruleIntDimensions.current; }
	EOF;

// Rule IntDimensions
ruleIntDimensions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_dimValue_0_0=RULE_INT
			{
				newLeafNode(lv_dimValue_0_0, grammarAccess.getIntDimensionsAccess().getDimValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntDimensionsRule());
				}
				setWithLastConsumed(
					$current,
					"dimValue",
					lv_dimValue_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getAddValueMultiplicationParserRuleCall_0_0());
				}
				lv_addValue_0_0=ruleMultiplication
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionRule());
					}
					add(
						$current,
						"addValue",
						lv_addValue_0_0,
						"org.xtext.alma.sdmdsl.Sdmdsl.Multiplication");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='+'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='-'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getAddValueMultiplicationParserRuleCall_1_1_0());
					}
					lv_addValue_2_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"addValue",
							lv_addValue_2_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationAccess().getMultValuePrimaryParserRuleCall_0_0());
				}
				lv_multValue_0_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
					}
					add(
						$current,
						"multValue",
						lv_multValue_0_0,
						"org.xtext.alma.sdmdsl.Sdmdsl.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_op_1_1='*'
						{
							newLeafNode(lv_op_1_1, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_1, null);
						}
						    |
						lv_op_1_2='/'
						{
							newLeafNode(lv_op_1_2, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "op", lv_op_1_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getMultValuePrimaryParserRuleCall_1_1_0());
					}
					lv_multValue_2_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"multValue",
							lv_multValue_2_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getPrimValueIntDimensionsParserRuleCall_0_0_0());
					}
					lv_primValue_0_1=ruleIntDimensions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"primValue",
							lv_primValue_0_1,
							"org.xtext.alma.sdmdsl.Sdmdsl.IntDimensions");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getPrimValueOtherTableFieldParserRuleCall_0_0_1());
					}
					lv_primValue_0_2=ruleOtherTableField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"primValue",
							lv_primValue_0_2,
							"org.xtext.alma.sdmdsl.Sdmdsl.OtherTableField");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getPrimValueFieldDimensionsParserRuleCall_0_0_2());
					}
					lv_primValue_0_3=ruleFieldDimensions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"primValue",
							lv_primValue_0_3,
							"org.xtext.alma.sdmdsl.Sdmdsl.FieldDimensions");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getPrimAddValueAdditionParserRuleCall_1_1_0());
					}
					lv_primAddValue_2_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"primAddValue",
							lv_primAddValue_2_0,
							"org.xtext.alma.sdmdsl.Sdmdsl.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
