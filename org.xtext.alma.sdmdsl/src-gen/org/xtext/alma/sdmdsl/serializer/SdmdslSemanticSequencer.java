/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.sdmdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.alma.sdmdsl.sdmdsl.Addition;
import org.xtext.alma.sdmdsl.sdmdsl.Defined;
import org.xtext.alma.sdmdsl.sdmdsl.Field;
import org.xtext.alma.sdmdsl.sdmdsl.FieldDimensions;
import org.xtext.alma.sdmdsl.sdmdsl.GlobalField;
import org.xtext.alma.sdmdsl.sdmdsl.IntDimensions;
import org.xtext.alma.sdmdsl.sdmdsl.Model;
import org.xtext.alma.sdmdsl.sdmdsl.Multiplication;
import org.xtext.alma.sdmdsl.sdmdsl.NotDefined;
import org.xtext.alma.sdmdsl.sdmdsl.OtherTableField;
import org.xtext.alma.sdmdsl.sdmdsl.Primary;
import org.xtext.alma.sdmdsl.sdmdsl.SdmdslPackage;
import org.xtext.alma.sdmdsl.sdmdsl.Table;
import org.xtext.alma.sdmdsl.services.SdmdslGrammarAccess;

@SuppressWarnings("all")
public class SdmdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SdmdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SdmdslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SdmdslPackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case SdmdslPackage.DEFINED:
				sequence_Defined(context, (Defined) semanticObject); 
				return; 
			case SdmdslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case SdmdslPackage.FIELD_DIMENSIONS:
				sequence_FieldDimensions(context, (FieldDimensions) semanticObject); 
				return; 
			case SdmdslPackage.GLOBAL_FIELD:
				sequence_GlobalField(context, (GlobalField) semanticObject); 
				return; 
			case SdmdslPackage.INT_DIMENSIONS:
				sequence_IntDimensions(context, (IntDimensions) semanticObject); 
				return; 
			case SdmdslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SdmdslPackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case SdmdslPackage.NOT_DEFINED:
				sequence_NotDefined(context, (NotDefined) semanticObject); 
				return; 
			case SdmdslPackage.OTHER_TABLE_FIELD:
				sequence_OtherTableField(context, (OtherTableField) semanticObject); 
				return; 
			case SdmdslPackage.PRIMARY:
				sequence_Primary(context, (Primary) semanticObject); 
				return; 
			case SdmdslPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Addition returns Addition
	 *
	 * Constraint:
	 *     (addValue+=Multiplication ((op+='+' | op+='-') addValue+=Multiplication)*)
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dimensions returns Defined
	 *     Defined returns Defined
	 *
	 * Constraint:
	 *     dataDimValue=Addition
	 */
	protected void sequence_Defined(ISerializationContext context, Defined semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.DEFINED__DATA_DIM_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.DEFINED__DATA_DIM_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefinedAccess().getDataDimValueAdditionParserRuleCall_1_0(), semanticObject.getDataDimValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldDimensions returns FieldDimensions
	 *
	 * Constraint:
	 *     dimValue=[Field|ID]
	 */
	protected void sequence_FieldDimensions(ISerializationContext context, FieldDimensions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.FIELD_DIMENSIONS__DIM_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.FIELD_DIMENSIONS__DIM_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldDimensionsAccess().getDimValueFieldIDTerminalRuleCall_0_1(), semanticObject.getDimValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (
	 *         (primitiveType=PrimitiveTypes | enumeration=[EnumType|ID]) 
	 *         name=ID 
	 *         (scalar='scalar' | dataDim+=Dimensions+)? 
	 *         autoIncrementable?='autoIncrementable'? 
	 *         (
	 *             (refsToAslice?='refersToASlice' | refsToOne?='refersToOne' | refsToMany?='refersToMany' | refsToManySlices?='refersToManySlices') 
	 *             refersTo=ID 
	 *             refersTo2=ID?
	 *         )? 
	 *         doc=ML_COMMENT?
	 *     )
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalField returns GlobalField
	 *
	 * Constraint:
	 *     ((primitiveType=PrimitiveTypes | enumeration=[EnumType|ID]) name=ID readOnly?='readOnly'? initValue=STRING doc=ML_COMMENT?)
	 */
	protected void sequence_GlobalField(ISerializationContext context, GlobalField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IntDimensions returns IntDimensions
	 *
	 * Constraint:
	 *     dimValue=INT
	 */
	protected void sequence_IntDimensions(ISerializationContext context, IntDimensions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.INT_DIMENSIONS__DIM_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.INT_DIMENSIONS__DIM_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntDimensionsAccess().getDimValueINTTerminalRuleCall_0(), semanticObject.getDimValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (doc=ML_COMMENT? name=QualifiedName element=Table)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Multiplication returns Multiplication
	 *
	 * Constraint:
	 *     (multValue+=Primary ((op+='*' | op+='/') multValue+=Primary)*)
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dimensions returns NotDefined
	 *     NotDefined returns NotDefined
	 *
	 * Constraint:
	 *     obj='['
	 */
	protected void sequence_NotDefined(ISerializationContext context, NotDefined semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.NOT_DEFINED__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.NOT_DEFINED__OBJ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotDefinedAccess().getObjLeftSquareBracketKeyword_0_0(), semanticObject.getObj());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OtherTableField returns OtherTableField
	 *
	 * Constraint:
	 *     (name=ID fieldName=ID)
	 */
	protected void sequence_OtherTableField(ISerializationContext context, OtherTableField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.OTHER_TABLE_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.OTHER_TABLE_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, SdmdslPackage.Literals.OTHER_TABLE_FIELD__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SdmdslPackage.Literals.OTHER_TABLE_FIELD__FIELD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOtherTableFieldAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOtherTableFieldAccess().getFieldNameIDTerminalRuleCall_2_0(), semanticObject.getFieldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Primary
	 *
	 * Constraint:
	 *     (primValue=IntDimensions | primValue=OtherTableField | primValue=FieldDimensions | primAddValue=Addition)
	 */
	protected void sequence_Primary(ISerializationContext context, Primary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (
	 *         doc=ML_COMMENT? 
	 *         name=ID 
	 *         keyLevel?='Key' 
	 *         keyData+=Field* 
	 *         reqLevel?='Required Data'? 
	 *         reqData+=Field* 
	 *         optLevel?='Optional Data'? 
	 *         optData+=Field* 
	 *         globalLevel?='Global Data'? 
	 *         globalData+=GlobalField*
	 *     )
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
