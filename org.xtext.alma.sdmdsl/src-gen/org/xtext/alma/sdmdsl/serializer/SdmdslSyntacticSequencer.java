/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.sdmdsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.alma.sdmdsl.services.SdmdslGrammarAccess;

@SuppressWarnings("all")
public class SdmdslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SdmdslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_NotDefined_WSTerminalRuleCall_1_a;
	protected AbstractElementAlias match_Table_ColonKeyword_5_1_q;
	protected AbstractElementAlias match_Table_ColonKeyword_6_1_q;
	protected AbstractElementAlias match_Table_ColonKeyword_7_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SdmdslGrammarAccess) access;
		match_NotDefined_WSTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getNotDefinedAccess().getWSTerminalRuleCall_1());
		match_Table_ColonKeyword_5_1_q = new TokenAlias(false, true, grammarAccess.getTableAccess().getColonKeyword_5_1());
		match_Table_ColonKeyword_6_1_q = new TokenAlias(false, true, grammarAccess.getTableAccess().getColonKeyword_6_1());
		match_Table_ColonKeyword_7_1_q = new TokenAlias(false, true, grammarAccess.getTableAccess().getColonKeyword_7_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal WS			: (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_NotDefined_WSTerminalRuleCall_1_a.equals(syntax))
				emit_NotDefined_WSTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_ColonKeyword_5_1_q.equals(syntax))
				emit_Table_ColonKeyword_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_ColonKeyword_6_1_q.equals(syntax))
				emit_Table_ColonKeyword_6_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_ColonKeyword_7_1_q.equals(syntax))
				emit_Table_ColonKeyword_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     obj='[' (ambiguity) ']' (rule end)
	 */
	protected void emit_NotDefined_WSTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     keyData+=Field (ambiguity) ':' optData+=Field
	 *     keyData+=Field (ambiguity) ':'? ':' globalData+=GlobalField
	 *     keyData+=Field (ambiguity) ':'? ':'? '}' (rule end)
	 *     keyData+=Field (ambiguity) ':'? globalLevel?='Global Data'
	 *     keyData+=Field (ambiguity) optLevel?='Optional Data'
	 *     keyLevel?='Key' ':' (ambiguity) ':' optData+=Field
	 *     keyLevel?='Key' ':' (ambiguity) ':'? ':' globalData+=GlobalField
	 *     keyLevel?='Key' ':' (ambiguity) ':'? ':'? '}' (rule end)
	 *     keyLevel?='Key' ':' (ambiguity) ':'? globalLevel?='Global Data'
	 *     keyLevel?='Key' ':' (ambiguity) optLevel?='Optional Data'
	 */
	protected void emit_Table_ColonKeyword_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     keyData+=Field ':'? (ambiguity) ':' globalData+=GlobalField
	 *     keyData+=Field ':'? (ambiguity) ':'? '}' (rule end)
	 *     keyData+=Field ':'? (ambiguity) globalLevel?='Global Data'
	 *     keyLevel?='Key' ':' ':'? (ambiguity) ':' globalData+=GlobalField
	 *     keyLevel?='Key' ':' ':'? (ambiguity) ':'? '}' (rule end)
	 *     keyLevel?='Key' ':' ':'? (ambiguity) globalLevel?='Global Data'
	 *     reqData+=Field (ambiguity) ':' globalData+=GlobalField
	 *     reqData+=Field (ambiguity) ':'? '}' (rule end)
	 *     reqData+=Field (ambiguity) globalLevel?='Global Data'
	 *     reqLevel?='Required Data' ':' (ambiguity) ':' globalData+=GlobalField
	 *     reqLevel?='Required Data' ':' (ambiguity) ':'? '}' (rule end)
	 *     reqLevel?='Required Data' ':' (ambiguity) globalLevel?='Global Data'
	 */
	protected void emit_Table_ColonKeyword_6_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     keyData+=Field ':'? ':'? (ambiguity) '}' (rule end)
	 *     keyLevel?='Key' ':' ':'? ':'? (ambiguity) '}' (rule end)
	 *     optData+=Field (ambiguity) '}' (rule end)
	 *     optLevel?='Optional Data' ':' (ambiguity) '}' (rule end)
	 *     reqData+=Field ':'? (ambiguity) '}' (rule end)
	 *     reqLevel?='Required Data' ':' ':'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Table_ColonKeyword_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
