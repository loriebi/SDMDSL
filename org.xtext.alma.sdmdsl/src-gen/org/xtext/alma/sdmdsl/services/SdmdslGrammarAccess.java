/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.sdmdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SdmdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementTableParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//Model:
		//	doc=ML_COMMENT?
		//	'package' name=QualifiedName element=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? 'package' name=QualifiedName element=Table
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//element=Table
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }
		
		//Table
		public RuleCall getElementTableParserRuleCall_3_0() { return cElementTableParserRuleCall_3_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PrimitiveTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.PrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhysicalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTechnicalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveTypes:
		//	BasicType | PhysicalType | TechnicalType | TimeType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | PhysicalType | TechnicalType | TimeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//PhysicalType
		public RuleCall getPhysicalTypeParserRuleCall_1() { return cPhysicalTypeParserRuleCall_1; }
		
		//TechnicalType
		public RuleCall getTechnicalTypeParserRuleCall_2() { return cTechnicalTypeParserRuleCall_2; }
		
		//TimeType
		public RuleCall getTimeTypeParserRuleCall_3() { return cTimeTypeParserRuleCall_3; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCharKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntegerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cComplexKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cStringKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		/// *
		//EnumType:
		//         'ACAPolarization'
		//        | 'AccumMode'
		//        | 'AntennaMake'
		//        | 'AntennaMotionPattern'
		//        | 'AntennaType'
		//        | 'AssociatedCalNature'
		//        | 'AssociatedFieldNature'
		//        | 'AtmPhaseCorrection'
		//        | 'AxisName'
		//        | 'BasebandName'
		//        | 'BaselineReferenceCode'
		//        | 'BinaryDataFlags'
		//        | 'CalCurveType'
		//        | 'CalDataOrigin'
		//        | 'CalibrationDevice'
		//        | 'CalibrationFunction'
		//        | 'CalibrationMode'
		//        | 'CalibrationSet'
		//        | 'CalType'
		//        | 'CorrelationBit'
		//        | 'CorrelationMode'
		//        | 'CorrelatorName'
		//        | 'CorrelatorCalibration'
		//        | 'CorrelatorType'
		//        | 'DataContent'
		//        | 'DataScale'
		//        | 'DetectorBandType'
		//        | 'DifferenceType'
		//        | 'DirectionReferenceCode'
		//        | 'DopplerReferenceCode'
		//        | 'DopplerTrackingMode'
		//        | 'FieldCode'
		//        | 'FilterMode'
		//        | 'FluxCalibrationMethod'
		//        | 'FocusMethod'
		//        | 'FrequencyReferenceCode'
		//        | 'HolographyChannelType'
		//        | 'InvalidatingCondition'
		//        | 'NetSideband'
		//        | 'PointingMethod'
		//        | 'PointingModelMode'
		//        | 'PolarizationType'
		//        | 'PositionMethod'
		//        | 'PositionReferenceCode'
		//        | 'PrimaryBeamDescription'
		//        | 'PrimitiveDataType'
		//        | 'ProcessorSubType'
		//        | 'ProcessorType'
		//        | 'RadialVelocityReferenceCode'
		//        | 'ReceiverBand'
		//        | 'ReceiverSideband'
		//        | 'SBType'
		//        | 'ScanIntent'
		//        | 'SchedulerMode'
		//        | 'SidebandProcessingMode'
		//        | 'SourceModel'
		//        | 'SpectralResolutionType'
		//        | 'StationType'
		//        | 'StokesParameter'
		//        | 'SubscanIntent'
		//        | 'SwitchingMode'
		//        | 'SynthProf'
		//        | 'SyscalMethod'
		//        | 'TimeSampling'
		//        | 'TimeScale'
		//        | 'WindowFunction'
		//        | 'WeightType'
		//        | 'WVRMethod'
		//;
		// * / BasicType:
		//	'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Char'
		public Keyword getCharKeyword_0() { return cCharKeyword_0; }
		
		//'Short'
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
		
		//'Integer'
		public Keyword getIntegerKeyword_2() { return cIntegerKeyword_2; }
		
		//'Long'
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }
		
		//'Float'
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }
		
		//'Double'
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
		
		//'Complex'
		public Keyword getComplexKeyword_6() { return cComplexKeyword_6; }
		
		//'String'
		public Keyword getStringKeyword_7() { return cStringKeyword_7; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }
	}
	public class PhysicalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.PhysicalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAngleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAngularRateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFluxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHumidityKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLengthKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPressureKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSpeedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cTemperatureKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//PhysicalType:
		//	'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature';
		@Override public ParserRule getRule() { return rule; }
		
		//'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Angle'
		public Keyword getAngleKeyword_0() { return cAngleKeyword_0; }
		
		//'AngularRate'
		public Keyword getAngularRateKeyword_1() { return cAngularRateKeyword_1; }
		
		//'Flux'
		public Keyword getFluxKeyword_2() { return cFluxKeyword_2; }
		
		//'Frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//'Humidity'
		public Keyword getHumidityKeyword_4() { return cHumidityKeyword_4; }
		
		//'Length'
		public Keyword getLengthKeyword_5() { return cLengthKeyword_5; }
		
		//'Pressure'
		public Keyword getPressureKeyword_6() { return cPressureKeyword_6; }
		
		//'Speed'
		public Keyword getSpeedKeyword_7() { return cSpeedKeyword_7; }
		
		//'Temperature'
		public Keyword getTemperatureKeyword_8() { return cTemperatureKeyword_8; }
	}
	public class TechnicalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.TechnicalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEntityIdKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEntityRefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TechnicalType:
		//	'Tag' | 'Entity' | 'EntityId' | 'EntityRef';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tag' | 'Entity' | 'EntityId' | 'EntityRef'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Tag'
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//'EntityId'
		public Keyword getEntityIdKeyword_2() { return cEntityIdKeyword_2; }
		
		//'EntityRef'
		public Keyword getEntityRefKeyword_3() { return cEntityRefKeyword_3; }
	}
	public class TimeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.TimeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntervalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArrayTimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cArrayTimeIntervalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TimeType:
		//	'Interval' | 'ArrayTime' | 'ArrayTimeInterval';
		@Override public ParserRule getRule() { return rule; }
		
		//'Interval' | 'ArrayTime' | 'ArrayTimeInterval'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Interval'
		public Keyword getIntervalKeyword_0() { return cIntervalKeyword_0; }
		
		//'ArrayTime'
		public Keyword getArrayTimeKeyword_1() { return cArrayTimeKeyword_1; }
		
		//'ArrayTimeInterval'
		public Keyword getArrayTimeIntervalKeyword_2() { return cArrayTimeIntervalKeyword_2; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeyLevelAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cKeyLevelKeyKeyword_4_0_0 = (Keyword)cKeyLevelAssignment_4_0.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cKeyDataAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cKeyDataFieldParserRuleCall_4_2_0 = (RuleCall)cKeyDataAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cReqLevelAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cReqLevelRequiredDataKeyword_5_0_0 = (Keyword)cReqLevelAssignment_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cReqDataAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cReqDataFieldParserRuleCall_5_2_0 = (RuleCall)cReqDataAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOptLevelAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cOptLevelOptionalDataKeyword_6_0_0 = (Keyword)cOptLevelAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOptDataAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOptDataFieldParserRuleCall_6_2_0 = (RuleCall)cOptDataAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cGlobalLevelAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cGlobalLevelGlobalDataKeyword_7_0_0 = (Keyword)cGlobalLevelAssignment_7_0.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cGlobalDataAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cGlobalDataGlobalFieldParserRuleCall_7_2_0 = (RuleCall)cGlobalDataAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Table:
		//	doc=ML_COMMENT?
		//	'table' name=ID '{' (keyLevel?='Key' ':' keyData+=Field*) (reqLevel?='Required Data'? ':' reqData+=Field*)?
		//	(optLevel?='Optional Data'? ':' optData+=Field*)? (globalLevel?='Global Data'? ':' globalData+=GlobalField*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? 'table' name=ID '{' (keyLevel?='Key' ':' keyData+=Field*) (reqLevel?='Required Data'? ':'
		//reqData+=Field*)? (optLevel?='Optional Data'? ':' optData+=Field*)? (globalLevel?='Global Data'? ':'
		//globalData+=GlobalField*)? '}'
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//'table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(keyLevel?='Key' ':' keyData+=Field*)
		public Group getGroup_4() { return cGroup_4; }
		
		//keyLevel?='Key'
		public Assignment getKeyLevelAssignment_4_0() { return cKeyLevelAssignment_4_0; }
		
		//'Key'
		public Keyword getKeyLevelKeyKeyword_4_0_0() { return cKeyLevelKeyKeyword_4_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//keyData+=Field*
		public Assignment getKeyDataAssignment_4_2() { return cKeyDataAssignment_4_2; }
		
		//Field
		public RuleCall getKeyDataFieldParserRuleCall_4_2_0() { return cKeyDataFieldParserRuleCall_4_2_0; }
		
		//(reqLevel?='Required Data'? ':' reqData+=Field*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//reqLevel?='Required Data'?
		public Assignment getReqLevelAssignment_5_0() { return cReqLevelAssignment_5_0; }
		
		//'Required Data'
		public Keyword getReqLevelRequiredDataKeyword_5_0_0() { return cReqLevelRequiredDataKeyword_5_0_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//reqData+=Field*
		public Assignment getReqDataAssignment_5_2() { return cReqDataAssignment_5_2; }
		
		//Field
		public RuleCall getReqDataFieldParserRuleCall_5_2_0() { return cReqDataFieldParserRuleCall_5_2_0; }
		
		//(optLevel?='Optional Data'? ':' optData+=Field*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//optLevel?='Optional Data'?
		public Assignment getOptLevelAssignment_6_0() { return cOptLevelAssignment_6_0; }
		
		//'Optional Data'
		public Keyword getOptLevelOptionalDataKeyword_6_0_0() { return cOptLevelOptionalDataKeyword_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//optData+=Field*
		public Assignment getOptDataAssignment_6_2() { return cOptDataAssignment_6_2; }
		
		//Field
		public RuleCall getOptDataFieldParserRuleCall_6_2_0() { return cOptDataFieldParserRuleCall_6_2_0; }
		
		//(globalLevel?='Global Data'? ':' globalData+=GlobalField*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//globalLevel?='Global Data'?
		public Assignment getGlobalLevelAssignment_7_0() { return cGlobalLevelAssignment_7_0; }
		
		//'Global Data'
		public Keyword getGlobalLevelGlobalDataKeyword_7_0_0() { return cGlobalLevelGlobalDataKeyword_7_0_0; }
		
		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }
		
		//globalData+=GlobalField*
		public Assignment getGlobalDataAssignment_7_2() { return cGlobalDataAssignment_7_2; }
		
		//GlobalField
		public RuleCall getGlobalDataGlobalFieldParserRuleCall_7_2_0() { return cGlobalDataGlobalFieldParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0 = (RuleCall)cPrimitiveTypeAssignment_0_0.eContents().get(0);
		private final Assignment cEnumerationAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cEnumerationEnumTypeCrossReference_0_1_0 = (CrossReference)cEnumerationAssignment_0_1.eContents().get(0);
		private final RuleCall cEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEnumerationEnumTypeCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cScalarAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cScalarScalarKeyword_2_0_0 = (Keyword)cScalarAssignment_2_0.eContents().get(0);
		private final Assignment cDataDimAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDataDimDimensionsParserRuleCall_2_1_0 = (RuleCall)cDataDimAssignment_2_1.eContents().get(0);
		private final Assignment cAutoIncrementableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cAutoIncrementableAutoIncrementableKeyword_3_0 = (Keyword)cAutoIncrementableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cRefsToAsliceAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final Keyword cRefsToAsliceRefersToASliceKeyword_4_0_0_0 = (Keyword)cRefsToAsliceAssignment_4_0_0.eContents().get(0);
		private final Assignment cRefsToOneAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final Keyword cRefsToOneRefersToOneKeyword_4_0_1_0 = (Keyword)cRefsToOneAssignment_4_0_1.eContents().get(0);
		private final Assignment cRefsToManyAssignment_4_0_2 = (Assignment)cAlternatives_4_0.eContents().get(2);
		private final Keyword cRefsToManyRefersToManyKeyword_4_0_2_0 = (Keyword)cRefsToManyAssignment_4_0_2.eContents().get(0);
		private final Assignment cRefsToManySlicesAssignment_4_0_3 = (Assignment)cAlternatives_4_0.eContents().get(3);
		private final Keyword cRefsToManySlicesRefersToManySlicesKeyword_4_0_3_0 = (Keyword)cRefsToManySlicesAssignment_4_0_3.eContents().get(0);
		private final Assignment cRefersToAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRefersToIDTerminalRuleCall_4_1_0 = (RuleCall)cRefersToAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cVerticalLineKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cRefersTo2Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cRefersTo2IDTerminalRuleCall_4_2_1_0 = (RuleCall)cRefersTo2Assignment_4_2_1.eContents().get(0);
		private final Assignment cDocAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_5_0 = (RuleCall)cDocAssignment_5.eContents().get(0);
		
		//Field:
		//	(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID (scalar='scalar'? | dataDim+=Dimensions+)
		//	autoIncrementable?='autoIncrementable'? ((refsToAslice?='refersToASlice' | refsToOne?='refersToOne' |
		//	refsToMany?='refersToMany' | refsToManySlices?="refersToManySlices") refersTo=ID ('|' refersTo2=ID)?)?
		//	doc=ML_COMMENT?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID (scalar='scalar'? | dataDim+=Dimensions+)
		//autoIncrementable?='autoIncrementable'? ((refsToAslice?='refersToASlice' | refsToOne?='refersToOne' |
		//refsToMany?='refersToMany' | refsToManySlices?="refersToManySlices") refersTo=ID ('|' refersTo2=ID)?)? doc=ML_COMMENT?
		public Group getGroup() { return cGroup; }
		
		//(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//primitiveType=PrimitiveTypes
		public Assignment getPrimitiveTypeAssignment_0_0() { return cPrimitiveTypeAssignment_0_0; }
		
		//PrimitiveTypes
		public RuleCall getPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0() { return cPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0; }
		
		//enumeration=[Enumeration::EnumType]
		public Assignment getEnumerationAssignment_0_1() { return cEnumerationAssignment_0_1; }
		
		//[Enumeration::EnumType]
		public CrossReference getEnumerationEnumTypeCrossReference_0_1_0() { return cEnumerationEnumTypeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1() { return cEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(scalar='scalar'? | dataDim+=Dimensions+)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//scalar='scalar'?
		public Assignment getScalarAssignment_2_0() { return cScalarAssignment_2_0; }
		
		//'scalar'
		public Keyword getScalarScalarKeyword_2_0_0() { return cScalarScalarKeyword_2_0_0; }
		
		//dataDim+=Dimensions+
		public Assignment getDataDimAssignment_2_1() { return cDataDimAssignment_2_1; }
		
		//Dimensions
		public RuleCall getDataDimDimensionsParserRuleCall_2_1_0() { return cDataDimDimensionsParserRuleCall_2_1_0; }
		
		//autoIncrementable?='autoIncrementable'?
		public Assignment getAutoIncrementableAssignment_3() { return cAutoIncrementableAssignment_3; }
		
		//'autoIncrementable'
		public Keyword getAutoIncrementableAutoIncrementableKeyword_3_0() { return cAutoIncrementableAutoIncrementableKeyword_3_0; }
		
		//((refsToAslice?='refersToASlice' | refsToOne?='refersToOne' | refsToMany?='refersToMany' |
		//refsToManySlices?="refersToManySlices") refersTo=ID ('|' refersTo2=ID)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//(refsToAslice?='refersToASlice' | refsToOne?='refersToOne' | refsToMany?='refersToMany' |
		//refsToManySlices?="refersToManySlices")
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//refsToAslice?='refersToASlice'
		public Assignment getRefsToAsliceAssignment_4_0_0() { return cRefsToAsliceAssignment_4_0_0; }
		
		//'refersToASlice'
		public Keyword getRefsToAsliceRefersToASliceKeyword_4_0_0_0() { return cRefsToAsliceRefersToASliceKeyword_4_0_0_0; }
		
		//refsToOne?='refersToOne'
		public Assignment getRefsToOneAssignment_4_0_1() { return cRefsToOneAssignment_4_0_1; }
		
		//'refersToOne'
		public Keyword getRefsToOneRefersToOneKeyword_4_0_1_0() { return cRefsToOneRefersToOneKeyword_4_0_1_0; }
		
		//refsToMany?='refersToMany'
		public Assignment getRefsToManyAssignment_4_0_2() { return cRefsToManyAssignment_4_0_2; }
		
		//'refersToMany'
		public Keyword getRefsToManyRefersToManyKeyword_4_0_2_0() { return cRefsToManyRefersToManyKeyword_4_0_2_0; }
		
		//refsToManySlices?="refersToManySlices"
		public Assignment getRefsToManySlicesAssignment_4_0_3() { return cRefsToManySlicesAssignment_4_0_3; }
		
		//"refersToManySlices"
		public Keyword getRefsToManySlicesRefersToManySlicesKeyword_4_0_3_0() { return cRefsToManySlicesRefersToManySlicesKeyword_4_0_3_0; }
		
		//refersTo=ID
		public Assignment getRefersToAssignment_4_1() { return cRefersToAssignment_4_1; }
		
		//ID
		public RuleCall getRefersToIDTerminalRuleCall_4_1_0() { return cRefersToIDTerminalRuleCall_4_1_0; }
		
		//('|' refersTo2=ID)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_2_0() { return cVerticalLineKeyword_4_2_0; }
		
		//refersTo2=ID
		public Assignment getRefersTo2Assignment_4_2_1() { return cRefersTo2Assignment_4_2_1; }
		
		//ID
		public RuleCall getRefersTo2IDTerminalRuleCall_4_2_1_0() { return cRefersTo2IDTerminalRuleCall_4_2_1_0; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_5() { return cDocAssignment_5; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_5_0() { return cDocML_COMMENTTerminalRuleCall_5_0; }
	}
	public class GlobalFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.GlobalField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0 = (RuleCall)cPrimitiveTypeAssignment_0_0.eContents().get(0);
		private final Assignment cEnumerationAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cEnumerationEnumTypeCrossReference_0_1_0 = (CrossReference)cEnumerationAssignment_0_1.eContents().get(0);
		private final RuleCall cEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEnumerationEnumTypeCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cReadOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyReadOnlyKeyword_2_0 = (Keyword)cReadOnlyAssignment_2.eContents().get(0);
		private final Assignment cInitValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cInitValueAssignment_3.eContents().get(0);
		private final Assignment cDocAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_4_0 = (RuleCall)cDocAssignment_4.eContents().get(0);
		
		//GlobalField:
		//	(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID readOnly?='readOnly'? initValue=STRING
		//	doc=ML_COMMENT?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID readOnly?='readOnly'? initValue=STRING
		//doc=ML_COMMENT?
		public Group getGroup() { return cGroup; }
		
		//(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//primitiveType=PrimitiveTypes
		public Assignment getPrimitiveTypeAssignment_0_0() { return cPrimitiveTypeAssignment_0_0; }
		
		//PrimitiveTypes
		public RuleCall getPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0() { return cPrimitiveTypePrimitiveTypesParserRuleCall_0_0_0; }
		
		//enumeration=[Enumeration::EnumType]
		public Assignment getEnumerationAssignment_0_1() { return cEnumerationAssignment_0_1; }
		
		//[Enumeration::EnumType]
		public CrossReference getEnumerationEnumTypeCrossReference_0_1_0() { return cEnumerationEnumTypeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1() { return cEnumerationEnumTypeIDTerminalRuleCall_0_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//readOnly?='readOnly'?
		public Assignment getReadOnlyAssignment_2() { return cReadOnlyAssignment_2; }
		
		//'readOnly'
		public Keyword getReadOnlyReadOnlyKeyword_2_0() { return cReadOnlyReadOnlyKeyword_2_0; }
		
		//initValue=STRING
		public Assignment getInitValueAssignment_3() { return cInitValueAssignment_3; }
		
		//STRING
		public RuleCall getInitValueSTRINGTerminalRuleCall_3_0() { return cInitValueSTRINGTerminalRuleCall_3_0; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_4() { return cDocAssignment_4; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_4_0() { return cDocML_COMMENTTerminalRuleCall_4_0; }
	}
	public class DimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Dimensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotDefinedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Dimensions:
		//	Defined | NotDefined;
		@Override public ParserRule getRule() { return rule; }
		
		//Defined | NotDefined
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Defined
		public RuleCall getDefinedParserRuleCall_0() { return cDefinedParserRuleCall_0; }
		
		//NotDefined
		public RuleCall getNotDefinedParserRuleCall_1() { return cNotDefinedParserRuleCall_1; }
	}
	public class NotDefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.NotDefined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cObjLeftSquareBracketKeyword_0_0 = (Keyword)cObjAssignment_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NotDefined:
		//	obj='[' WS* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//obj='[' WS* ']'
		public Group getGroup() { return cGroup; }
		
		//obj='['
		public Assignment getObjAssignment_0() { return cObjAssignment_0; }
		
		//'['
		public Keyword getObjLeftSquareBracketKeyword_0_0() { return cObjLeftSquareBracketKeyword_0_0; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class DefinedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Defined");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataDimValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataDimValueAdditionParserRuleCall_1_0 = (RuleCall)cDataDimValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Defined:
		//	'[' dataDimValue=Addition ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' dataDimValue=Addition ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//dataDimValue=Addition
		public Assignment getDataDimValueAssignment_1() { return cDataDimValueAssignment_1; }
		
		//Addition
		public RuleCall getDataDimValueAdditionParserRuleCall_1_0() { return cDataDimValueAdditionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class FieldDimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.FieldDimensions");
		private final Assignment cDimValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDimValueFieldCrossReference_0 = (CrossReference)cDimValueAssignment.eContents().get(0);
		private final RuleCall cDimValueFieldIDTerminalRuleCall_0_1 = (RuleCall)cDimValueFieldCrossReference_0.eContents().get(1);
		
		//FieldDimensions:
		//	dimValue=[Field];
		@Override public ParserRule getRule() { return rule; }
		
		//dimValue=[Field]
		public Assignment getDimValueAssignment() { return cDimValueAssignment; }
		
		//[Field]
		public CrossReference getDimValueFieldCrossReference_0() { return cDimValueFieldCrossReference_0; }
		
		//ID
		public RuleCall getDimValueFieldIDTerminalRuleCall_0_1() { return cDimValueFieldIDTerminalRuleCall_0_1; }
	}
	public class OtherTableFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.OtherTableField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldNameIDTerminalRuleCall_2_0 = (RuleCall)cFieldNameAssignment_2.eContents().get(0);
		
		//OtherTableField:
		//	name=ID '.' fieldName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '.' fieldName=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_2() { return cFieldNameAssignment_2; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_2_0() { return cFieldNameIDTerminalRuleCall_2_0; }
	}
	public class IntDimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.IntDimensions");
		private final Assignment cDimValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDimValueINTTerminalRuleCall_0 = (RuleCall)cDimValueAssignment.eContents().get(0);
		
		//IntDimensions:
		//	dimValue=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//dimValue=INT
		public Assignment getDimValueAssignment() { return cDimValueAssignment; }
		
		//INT
		public RuleCall getDimValueINTTerminalRuleCall_0() { return cDimValueINTTerminalRuleCall_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddValueMultiplicationParserRuleCall_0_0 = (RuleCall)cAddValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cAddValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddValueMultiplicationParserRuleCall_1_1_0 = (RuleCall)cAddValueAssignment_1_1.eContents().get(0);
		
		//Addition:
		//	addValue+=Multiplication (op+=('+' | '-') addValue+=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//addValue+=Multiplication (op+=('+' | '-') addValue+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//addValue+=Multiplication
		public Assignment getAddValueAssignment_0() { return cAddValueAssignment_0; }
		
		//Multiplication
		public RuleCall getAddValueMultiplicationParserRuleCall_0_0() { return cAddValueMultiplicationParserRuleCall_0_0; }
		
		//(op+=('+' | '-') addValue+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=('+' | '-')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_0() { return cOpPlusSignKeyword_1_0_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1() { return cOpHyphenMinusKeyword_1_0_0_1; }
		
		//addValue+=Multiplication
		public Assignment getAddValueAssignment_1_1() { return cAddValueAssignment_1_1; }
		
		//Multiplication
		public RuleCall getAddValueMultiplicationParserRuleCall_1_1_0() { return cAddValueMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultValuePrimaryParserRuleCall_0_0 = (RuleCall)cMultValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cMultValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultValuePrimaryParserRuleCall_1_1_0 = (RuleCall)cMultValueAssignment_1_1.eContents().get(0);
		
		//Multiplication:
		//	multValue+=Primary (op+=('*' | '/') multValue+=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//multValue+=Primary (op+=('*' | '/') multValue+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//multValue+=Primary
		public Assignment getMultValueAssignment_0() { return cMultValueAssignment_0; }
		
		//Primary
		public RuleCall getMultValuePrimaryParserRuleCall_0_0() { return cMultValuePrimaryParserRuleCall_0_0; }
		
		//(op+=('*' | '/') multValue+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=('*' | '/')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_0() { return cOpAsteriskKeyword_1_0_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1() { return cOpSolidusKeyword_1_0_0_1; }
		
		//multValue+=Primary
		public Assignment getMultValueAssignment_1_1() { return cMultValueAssignment_1_1; }
		
		//Primary
		public RuleCall getMultValuePrimaryParserRuleCall_1_1_0() { return cMultValuePrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.sdmdsl.Sdmdsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cPrimValueAlternatives_0_0 = (Alternatives)cPrimValueAssignment_0.eContents().get(0);
		private final RuleCall cPrimValueIntDimensionsParserRuleCall_0_0_0 = (RuleCall)cPrimValueAlternatives_0_0.eContents().get(0);
		private final RuleCall cPrimValueOtherTableFieldParserRuleCall_0_0_1 = (RuleCall)cPrimValueAlternatives_0_0.eContents().get(1);
		private final RuleCall cPrimValueFieldDimensionsParserRuleCall_0_0_2 = (RuleCall)cPrimValueAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimAddValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimAddValueAdditionParserRuleCall_1_1_0 = (RuleCall)cPrimAddValueAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary:
		//	primValue=(IntDimensions | OtherTableField | FieldDimensions) | '(' primAddValue=Addition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//primValue=(IntDimensions | OtherTableField | FieldDimensions) | '(' primAddValue=Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primValue=(IntDimensions | OtherTableField | FieldDimensions)
		public Assignment getPrimValueAssignment_0() { return cPrimValueAssignment_0; }
		
		//(IntDimensions | OtherTableField | FieldDimensions)
		public Alternatives getPrimValueAlternatives_0_0() { return cPrimValueAlternatives_0_0; }
		
		//IntDimensions
		public RuleCall getPrimValueIntDimensionsParserRuleCall_0_0_0() { return cPrimValueIntDimensionsParserRuleCall_0_0_0; }
		
		//OtherTableField
		public RuleCall getPrimValueOtherTableFieldParserRuleCall_0_0_1() { return cPrimValueOtherTableFieldParserRuleCall_0_0_1; }
		
		//FieldDimensions
		public RuleCall getPrimValueFieldDimensionsParserRuleCall_0_0_2() { return cPrimValueFieldDimensionsParserRuleCall_0_0_2; }
		
		//'(' primAddValue=Addition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//primAddValue=Addition
		public Assignment getPrimAddValueAssignment_1_1() { return cPrimAddValueAssignment_1_1; }
		
		//Addition
		public RuleCall getPrimAddValueAdditionParserRuleCall_1_1_0() { return cPrimAddValueAdditionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final QualifiedNameElements pQualifiedName;
	private final PrimitiveTypesElements pPrimitiveTypes;
	private final BasicTypeElements pBasicType;
	private final PhysicalTypeElements pPhysicalType;
	private final TechnicalTypeElements pTechnicalType;
	private final TimeTypeElements pTimeType;
	private final TableElements pTable;
	private final FieldElements pField;
	private final GlobalFieldElements pGlobalField;
	private final DimensionsElements pDimensions;
	private final NotDefinedElements pNotDefined;
	private final DefinedElements pDefined;
	private final FieldDimensionsElements pFieldDimensions;
	private final OtherTableFieldElements pOtherTableField;
	private final IntDimensionsElements pIntDimensions;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SdmdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPrimitiveTypes = new PrimitiveTypesElements();
		this.pBasicType = new BasicTypeElements();
		this.pPhysicalType = new PhysicalTypeElements();
		this.pTechnicalType = new TechnicalTypeElements();
		this.pTimeType = new TimeTypeElements();
		this.pTable = new TableElements();
		this.pField = new FieldElements();
		this.pGlobalField = new GlobalFieldElements();
		this.pDimensions = new DimensionsElements();
		this.pNotDefined = new NotDefinedElements();
		this.pDefined = new DefinedElements();
		this.pFieldDimensions = new FieldDimensionsElements();
		this.pOtherTableField = new OtherTableFieldElements();
		this.pIntDimensions = new IntDimensionsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.alma.sdmdsl.Sdmdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	doc=ML_COMMENT?
	//	'package' name=QualifiedName element=Table;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PrimitiveTypes:
	//	BasicType | PhysicalType | TechnicalType | TimeType;
	public PrimitiveTypesElements getPrimitiveTypesAccess() {
		return pPrimitiveTypes;
	}
	
	public ParserRule getPrimitiveTypesRule() {
		return getPrimitiveTypesAccess().getRule();
	}
	
	/// *
	//EnumType:
	//         'ACAPolarization'
	//        | 'AccumMode'
	//        | 'AntennaMake'
	//        | 'AntennaMotionPattern'
	//        | 'AntennaType'
	//        | 'AssociatedCalNature'
	//        | 'AssociatedFieldNature'
	//        | 'AtmPhaseCorrection'
	//        | 'AxisName'
	//        | 'BasebandName'
	//        | 'BaselineReferenceCode'
	//        | 'BinaryDataFlags'
	//        | 'CalCurveType'
	//        | 'CalDataOrigin'
	//        | 'CalibrationDevice'
	//        | 'CalibrationFunction'
	//        | 'CalibrationMode'
	//        | 'CalibrationSet'
	//        | 'CalType'
	//        | 'CorrelationBit'
	//        | 'CorrelationMode'
	//        | 'CorrelatorName'
	//        | 'CorrelatorCalibration'
	//        | 'CorrelatorType'
	//        | 'DataContent'
	//        | 'DataScale'
	//        | 'DetectorBandType'
	//        | 'DifferenceType'
	//        | 'DirectionReferenceCode'
	//        | 'DopplerReferenceCode'
	//        | 'DopplerTrackingMode'
	//        | 'FieldCode'
	//        | 'FilterMode'
	//        | 'FluxCalibrationMethod'
	//        | 'FocusMethod'
	//        | 'FrequencyReferenceCode'
	//        | 'HolographyChannelType'
	//        | 'InvalidatingCondition'
	//        | 'NetSideband'
	//        | 'PointingMethod'
	//        | 'PointingModelMode'
	//        | 'PolarizationType'
	//        | 'PositionMethod'
	//        | 'PositionReferenceCode'
	//        | 'PrimaryBeamDescription'
	//        | 'PrimitiveDataType'
	//        | 'ProcessorSubType'
	//        | 'ProcessorType'
	//        | 'RadialVelocityReferenceCode'
	//        | 'ReceiverBand'
	//        | 'ReceiverSideband'
	//        | 'SBType'
	//        | 'ScanIntent'
	//        | 'SchedulerMode'
	//        | 'SidebandProcessingMode'
	//        | 'SourceModel'
	//        | 'SpectralResolutionType'
	//        | 'StationType'
	//        | 'StokesParameter'
	//        | 'SubscanIntent'
	//        | 'SwitchingMode'
	//        | 'SynthProf'
	//        | 'SyscalMethod'
	//        | 'TimeSampling'
	//        | 'TimeScale'
	//        | 'WindowFunction'
	//        | 'WeightType'
	//        | 'WVRMethod'
	//;
	// * / BasicType:
	//	'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean';
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//PhysicalType:
	//	'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature';
	public PhysicalTypeElements getPhysicalTypeAccess() {
		return pPhysicalType;
	}
	
	public ParserRule getPhysicalTypeRule() {
		return getPhysicalTypeAccess().getRule();
	}
	
	//TechnicalType:
	//	'Tag' | 'Entity' | 'EntityId' | 'EntityRef';
	public TechnicalTypeElements getTechnicalTypeAccess() {
		return pTechnicalType;
	}
	
	public ParserRule getTechnicalTypeRule() {
		return getTechnicalTypeAccess().getRule();
	}
	
	//TimeType:
	//	'Interval' | 'ArrayTime' | 'ArrayTimeInterval';
	public TimeTypeElements getTimeTypeAccess() {
		return pTimeType;
	}
	
	public ParserRule getTimeTypeRule() {
		return getTimeTypeAccess().getRule();
	}
	
	//Table:
	//	doc=ML_COMMENT?
	//	'table' name=ID '{' (keyLevel?='Key' ':' keyData+=Field*) (reqLevel?='Required Data'? ':' reqData+=Field*)?
	//	(optLevel?='Optional Data'? ':' optData+=Field*)? (globalLevel?='Global Data'? ':' globalData+=GlobalField*)?
	//	'}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Field:
	//	(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID (scalar='scalar'? | dataDim+=Dimensions+)
	//	autoIncrementable?='autoIncrementable'? ((refsToAslice?='refersToASlice' | refsToOne?='refersToOne' |
	//	refsToMany?='refersToMany' | refsToManySlices?="refersToManySlices") refersTo=ID ('|' refersTo2=ID)?)?
	//	doc=ML_COMMENT?;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//GlobalField:
	//	(primitiveType=PrimitiveTypes | enumeration=[Enumeration::EnumType]) name=ID readOnly?='readOnly'? initValue=STRING
	//	doc=ML_COMMENT?;
	public GlobalFieldElements getGlobalFieldAccess() {
		return pGlobalField;
	}
	
	public ParserRule getGlobalFieldRule() {
		return getGlobalFieldAccess().getRule();
	}
	
	//Dimensions:
	//	Defined | NotDefined;
	public DimensionsElements getDimensionsAccess() {
		return pDimensions;
	}
	
	public ParserRule getDimensionsRule() {
		return getDimensionsAccess().getRule();
	}
	
	//NotDefined:
	//	obj='[' WS* ']';
	public NotDefinedElements getNotDefinedAccess() {
		return pNotDefined;
	}
	
	public ParserRule getNotDefinedRule() {
		return getNotDefinedAccess().getRule();
	}
	
	//Defined:
	//	'[' dataDimValue=Addition ']';
	public DefinedElements getDefinedAccess() {
		return pDefined;
	}
	
	public ParserRule getDefinedRule() {
		return getDefinedAccess().getRule();
	}
	
	//FieldDimensions:
	//	dimValue=[Field];
	public FieldDimensionsElements getFieldDimensionsAccess() {
		return pFieldDimensions;
	}
	
	public ParserRule getFieldDimensionsRule() {
		return getFieldDimensionsAccess().getRule();
	}
	
	//OtherTableField:
	//	name=ID '.' fieldName=ID;
	public OtherTableFieldElements getOtherTableFieldAccess() {
		return pOtherTableField;
	}
	
	public ParserRule getOtherTableFieldRule() {
		return getOtherTableFieldAccess().getRule();
	}
	
	//IntDimensions:
	//	dimValue=INT;
	public IntDimensionsElements getIntDimensionsAccess() {
		return pIntDimensions;
	}
	
	public ParserRule getIntDimensionsRule() {
		return getIntDimensionsAccess().getRule();
	}
	
	//Addition:
	//	addValue+=Multiplication (op+=('+' | '-') addValue+=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication:
	//	multValue+=Primary (op+=('*' | '/') multValue+=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary:
	//	primValue=(IntDimensions | OtherTableField | FieldDimensions) | '(' primAddValue=Addition ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
