package org.xtext.alma.sdmdsl.generator.cpp;

import alma.hla.datamodel.meta.asdm.ASDMAttribute;
import alma.hla.datamodel.meta.asdm.AlmaTable;
import alma.hla.datamodel.meta.asdm.AlmaTableContainer;
import alma.hla.datamodel.meta.asdm.TableKey;
import alma.hla.datamodel.util.MMUtil;
import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;

@SuppressWarnings("all")
public class CppTableImpl {
  private AlmaTableContainer container = AlmaTableContainer.getInstance();
  
  public void doGenerate(final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    SDMFileSystemAccess sdmFsa = ((SDMFileSystemAccess) fsa);
    List<AlmaTable> _tables = this.container.getTables();
    for (final AlmaTable table : _tables) {
      {
        String _name = table.getName();
        String _plus = ("src/" + _name);
        String _plus_1 = (_plus + "Table.cpp");
        sdmFsa.setFile(_plus_1);
        CharSequence _generateCppTableImpl = this.generateCppTableImpl(table);
        sdmFsa.generateFile(_generateCppTableImpl);
      }
    }
  }
  
  public CharSequence generateCppTableImpl(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ALMA - Atacama Large Millimeter Array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) European Southern Observatory, 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) Associated Universities Inc., 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by ESO (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by AUI (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is free software; you can redistribute it and/or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* modify it under the terms of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License as published by the Free software Foundation; either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* version 2.1 of the License, or (at your option) any later version.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* but WITHOUT ANY WARRANTY, without even the implied warranty of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Lesser General Public License for more details.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You should have received a copy of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License along with this library; if not, write to the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Foundation, Inc., 59 Temple Place, Suite 330, Boston,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MA 02111-1307  USA");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Warning!");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  -------------------------------------------------------------------- ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* | This is generated code!  Do not modify this file.                  |");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* | If you do, all changes will be lost when the file is re-generated. |");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* File ");
    String _name = table.getName();
    _builder.append(_name, " ");
    _builder.append("Table.cpp");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("#include <ConversionException.h>");
    _builder.newLine();
    _builder.append("#include <DuplicateKey.h>");
    _builder.newLine();
    _builder.append("#include <OutOfBoundsException.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using asdm::ConversionException;");
    _builder.newLine();
    _builder.append("using asdm::DuplicateKey;");
    _builder.newLine();
    _builder.append("using asdm::OutOfBoundsException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "");
    _builder.append(".h>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    String _name_2 = table.getName();
    _builder.append(_name_2, "");
    _builder.append("Table.h>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <");
    String _name_3 = table.getName();
    _builder.append(_name_3, "");
    _builder.append("Row.h>");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <Parser.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using asdm::");
    String _name_4 = this.container.getName();
    _builder.append(_name_4, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("using asdm::");
    String _name_5 = table.getName();
    _builder.append(_name_5, "");
    _builder.append("Table;");
    _builder.newLineIfNotEmpty();
    _builder.append("using asdm::");
    String _name_6 = table.getName();
    _builder.append(_name_6, "");
    _builder.append("Row;");
    _builder.newLineIfNotEmpty();
    _builder.append("using asdm::Parser;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.append("#include <fstream>");
    _builder.newLine();
    _builder.append("#include <iterator>");
    _builder.newLine();
    _builder.append("#include <sstream>");
    _builder.newLine();
    _builder.append("#include <set>");
    _builder.newLine();
    _builder.append("#include <algorithm>");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <Misc.h>");
    _builder.newLine();
    _builder.append("using namespace asdm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <libxml/parser.h>");
    _builder.newLine();
    _builder.append("#include <libxml/tree.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"boost/filesystem/operations.hpp\"");
    _builder.newLine();
    _builder.append("#include <boost/algorithm/string.hpp>");
    _builder.newLine();
    _builder.append("using namespace boost;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace asdm {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The name of the entity we will store in this table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static string entityNameOf");
    String _name_7 = table.getName();
    _builder.append(_name_7, "\t");
    _builder.append(" = \"");
    String _name_8 = table.getName();
    _builder.append(_name_8, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// An array of string containing the names of the columns of this table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The array is filled in the order : key, required value, optional value.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static string attributesNamesOf");
    String _name_9 = table.getName();
    _builder.append(_name_9, "\t");
    _builder.append("_a[] = {");
    _builder.newLineIfNotEmpty();
    {
      List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
      boolean _hasElements = false;
      for(final ASDMAttribute attr : _keyAttributes) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t");
        }
        _builder.append("\t\t");
        _builder.append("\"");
        String _name_10 = attr.getName();
        _builder.append(_name_10, "\t\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
      for(final ASDMAttribute attr_1 : _requiredValueAttributes) {
        _builder.append("\t\t");
        _builder.append(", \"");
        String _name_11 = attr_1.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      List<ASDMAttribute> _optionalValueAttributes = table.getOptionalValueAttributes();
      for(final ASDMAttribute attr_2 : _optionalValueAttributes) {
        _builder.append("\t\t");
        _builder.append(", \"");
        String _name_12 = attr_2.getName();
        _builder.append(_name_12, "\t\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// A vector of string whose content is a copy of the strings in the array above.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static vector<string> attributesNamesOf");
    String _name_13 = table.getName();
    _builder.append(_name_13, "\t");
    _builder.append("_v (attributesNamesOf");
    String _name_14 = table.getName();
    _builder.append(_name_14, "\t");
    _builder.append("_a, attributesNamesOf");
    String _name_15 = table.getName();
    _builder.append(_name_15, "\t");
    _builder.append("_a + sizeof(attributesNamesOf");
    String _name_16 = table.getName();
    _builder.append(_name_16, "\t");
    _builder.append("_a) / sizeof(attributesNamesOf");
    String _name_17 = table.getName();
    _builder.append(_name_17, "\t");
    _builder.append("_a[0]));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// An array of string containing the names of the columns of this table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The array is filled in the order where the names would be read by default in the XML header of a file containing");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// the table exported in binary mode.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static string attributesNamesInBinOf");
    String _name_18 = table.getName();
    _builder.append(_name_18, "\t");
    _builder.append("_a[] = {");
    _builder.newLineIfNotEmpty();
    {
      String _name_19 = table.getName();
      boolean _equals = _name_19.equals("Pointing");
      if (_equals) {
        _builder.append("\t\t");
        _builder.append("\"antennaId\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"timeInterval\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"numSample\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"encoder\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"pointingTracking\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"usePolynomials\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"timeOrigin\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"numTerm\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"pointingDirection\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"target\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"offset\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"pointingModelId\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"overTheTop\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"sourceOffset\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"sourceOffsetReferenceCode\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"sourceOffsetEquinox\",");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\"sampledTimeInterval\"");
        _builder.newLine();
      } else {
        {
          List<ASDMAttribute> _requiredAttributes = table.getRequiredAttributes();
          boolean _hasElements_1 = false;
          for(final ASDMAttribute attr_3 : _requiredAttributes) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(" \"");
            String _name_20 = attr_3.getName();
            _builder.append(_name_20, "");
            _builder.append("\" ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append(",");
        _builder.newLine();
        {
          List<ASDMAttribute> _optionalValueAttributes_1 = table.getOptionalValueAttributes();
          boolean _hasElements_2 = false;
          for(final ASDMAttribute attr_4 : _optionalValueAttributes_1) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(" \"");
            String _name_21 = attr_4.getName();
            _builder.append(_name_21, "");
            _builder.append("\" ");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// A vector of string whose content is a copy of the strings in the array above.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static vector<string> attributesNamesInBinOf");
    String _name_22 = table.getName();
    _builder.append(_name_22, "\t");
    _builder.append("_v(attributesNamesInBinOf");
    String _name_23 = table.getName();
    _builder.append(_name_23, "\t");
    _builder.append("_a, attributesNamesInBinOf");
    String _name_24 = table.getName();
    _builder.append(_name_24, "\t");
    _builder.append("_a + sizeof(attributesNamesInBinOf");
    String _name_25 = table.getName();
    _builder.append(_name_25, "\t");
    _builder.append("_a) / sizeof(attributesNamesInBinOf");
    String _name_26 = table.getName();
    _builder.append(_name_26, "\t");
    _builder.append("_a[0]));\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The array of attributes (or column) names that make up key ");
    TableKey _key = table.getKey();
    String _name_27 = _key.getName();
    _builder.append(_name_27, "\t");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    TableKey _key_1 = table.getKey();
    String _name_28 = _key_1.getName();
    _builder.append(_name_28, "\t");
    _builder.append("Of");
    String _name_29 = table.getName();
    _builder.append(_name_29, "\t");
    _builder.append("_a[] = {");
    _builder.newLineIfNotEmpty();
    {
      TableKey _key_2 = table.getKey();
      ASDMAttribute[] _field = _key_2.getField();
      boolean _hasElements_3 = false;
      for(final ASDMAttribute f : _field) {
        if (!_hasElements_3) {
          _hasElements_3 = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.append("\t");
        _builder.append("\"");
        String _name_30 = f.getName();
        _builder.append(_name_30, "\t");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// A vector of strings which are copies of those stored in the array above.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vector<string> ");
    TableKey _key_3 = table.getKey();
    String _name_31 = _key_3.getName();
    _builder.append(_name_31, "\t");
    _builder.append("Of");
    String _name_32 = table.getName();
    _builder.append(_name_32, "\t");
    _builder.append("_v(");
    TableKey _key_4 = table.getKey();
    String _name_33 = _key_4.getName();
    _builder.append(_name_33, "\t");
    _builder.append("Of");
    String _name_34 = table.getName();
    _builder.append(_name_34, "\t");
    _builder.append("_a, ");
    TableKey _key_5 = table.getKey();
    String _name_35 = _key_5.getName();
    _builder.append(_name_35, "\t");
    _builder.append("Of");
    String _name_36 = table.getName();
    _builder.append(_name_36, "\t");
    _builder.append("_a + sizeof(");
    TableKey _key_6 = table.getKey();
    String _name_37 = _key_6.getName();
    _builder.append(_name_37, "\t");
    _builder.append("Of");
    String _name_38 = table.getName();
    _builder.append(_name_38, "\t");
    _builder.append("_a) / sizeof(");
    TableKey _key_7 = table.getKey();
    String _name_39 = _key_7.getName();
    _builder.append(_name_39, "\t");
    _builder.append("Of");
    String _name_40 = table.getName();
    _builder.append(_name_40, "\t");
    _builder.append("_a[0]));");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the list of field names that make up key ");
    TableKey _key_8 = table.getKey();
    String _name_41 = _key_8.getName();
    _builder.append(_name_41, "\t ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* as a const reference to a vector of strings.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("const vector<string>& ");
    String _name_42 = table.getName();
    _builder.append(_name_42, "\t");
    _builder.append("Table::get");
    TableKey _key_9 = table.getKey();
    String _UpperCaseName = _key_9.UpperCaseName();
    _builder.append(_UpperCaseName, "\t");
    _builder.append("Name() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    TableKey _key_10 = table.getKey();
    String _name_43 = _key_10.getName();
    _builder.append(_name_43, "\t\t");
    _builder.append("Of");
    String _name_44 = table.getName();
    _builder.append(_name_44, "\t\t");
    _builder.append("_v;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_45 = table.getName();
    _builder.append(_name_45, "\t");
    _builder.append("Table::");
    String _name_46 = table.getName();
    _builder.append(_name_46, "\t");
    _builder.append("Table(");
    String _name_47 = this.container.getName();
    _builder.append(_name_47, "\t");
    _builder.append(" &c) : container(c) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Define a default entity.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityId(EntityId(\"uid://X0/X0/X0\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityIdEncrypted(\"na\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityTypeName(\"");
    String _name_48 = table.getName();
    _builder.append(_name_48, "\t\t");
    _builder.append("Table\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("entity.setEntityVersion(\"1\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setInstanceVersion(\"1\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Archive XML");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("archiveAsBin = ");
    boolean _isArchiveAsBin = table.isArchiveAsBin();
    _builder.append(_isArchiveAsBin, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// File XML");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fileAsBin = ");
    boolean _isFileAsBin = table.isFileAsBin();
    _builder.append(_isFileAsBin, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// By default the table is considered as present in memory");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("presentInMemory = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// By default there is no load in progress");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("loadInProgress = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* A destructor for ");
    String _name_49 = table.getName();
    _builder.append(_name_49, "\t ");
    _builder.append("Table.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    String _name_50 = table.getName();
    _builder.append(_name_50, "\t");
    _builder.append("Table::~");
    String _name_51 = table.getName();
    _builder.append(_name_51, "\t");
    _builder.append("Table() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < privateRows.size(); i++) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("delete(privateRows.at(i));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Container to which this table belongs.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    String _name_52 = this.container.getName();
    _builder.append(_name_52, "\t");
    _builder.append(" &");
    String _name_53 = table.getName();
    _builder.append(_name_53, "\t");
    _builder.append("Table::getContainer() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return container;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the number of rows in the table.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned int ");
    String _name_54 = table.getName();
    _builder.append(_name_54, "\t");
    _builder.append("Table::size() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (presentInMemory) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return privateRows.size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return declaredSize;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the name of this table.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    String _name_55 = table.getName();
    _builder.append(_name_55, "\t");
    _builder.append("Table::getName() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return entityNameOf");
    String _name_56 = table.getName();
    _builder.append(_name_56, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the name of this table.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    String _name_57 = table.getName();
    _builder.append(_name_57, "\t");
    _builder.append("Table::name() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return entityNameOf");
    String _name_58 = table.getName();
    _builder.append(_name_58, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the the names of the attributes (or columns) of this table.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("const vector<string>& ");
    String _name_59 = table.getName();
    _builder.append(_name_59, "\t");
    _builder.append("Table::getAttributesNames() { return attributesNamesOf");
    String _name_60 = table.getName();
    _builder.append(_name_60, "\t");
    _builder.append("_v; }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the the names of the attributes (or columns) of this table as they appear by default");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* in an binary export of this table.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("const vector<string>& ");
    String _name_61 = table.getName();
    _builder.append(_name_61, "\t");
    _builder.append("Table::defaultAttributesNamesInBin() { return attributesNamesInBinOf");
    String _name_62 = table.getName();
    _builder.append(_name_62, "\t");
    _builder.append("_v; }");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return this table\'s Entity.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity ");
    String _name_63 = table.getName();
    _builder.append(_name_63, "\t");
    _builder.append("Table::getEntity() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return entity;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Set this table\'s Entity.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_64 = table.getName();
    _builder.append(_name_64, "\t");
    _builder.append("Table::setEntity(Entity e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this->entity = e; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// ====> Row creation.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create a new row.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    String _name_65 = table.getName();
    _builder.append(_name_65, "\t");
    _builder.append("Row *");
    String _name_66 = table.getName();
    _builder.append(_name_66, "\t");
    _builder.append("Table::newRow() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _name_67 = table.getName();
    _builder.append(_name_67, "\t\t");
    _builder.append("Row (*this);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      List<ASDMAttribute> _requiredNoAutoIncrementableAttributes = table.getRequiredNoAutoIncrementableAttributes();
      int _size = _requiredNoAutoIncrementableAttributes.size();
      boolean _notEquals = (_size != 0);
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("* Create a new row initialized to the specified values.");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("* @return a pointer on the created and initialized row.");
        _builder.newLine();
        {
          List<ASDMAttribute> _requiredNoAutoIncrementableAttributes_1 = table.getRequiredNoAutoIncrementableAttributes();
          for(final ASDMAttribute attr_5 : _requiredNoAutoIncrementableAttributes_1) {
            _builder.append("\t");
            _builder.append("* @param ");
            String _name_68 = attr_5.getName();
            _builder.append(_name_68, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t");
        String _name_69 = table.getName();
        _builder.append(_name_69, "\t");
        _builder.append("Row* ");
        String _name_70 = table.getName();
        _builder.append(_name_70, "\t");
        _builder.append("Table::newRow(");
        String _RequiredNoAutoIncrementableCpp = table.RequiredNoAutoIncrementableCpp();
        _builder.append(_RequiredNoAutoIncrementableCpp, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_71 = table.getName();
        _builder.append(_name_71, "\t\t");
        _builder.append("Row *row = new ");
        String _name_72 = table.getName();
        _builder.append(_name_72, "\t\t");
        _builder.append("Row(*this);");
        _builder.newLineIfNotEmpty();
        {
          List<ASDMAttribute> _requiredNoAutoIncrementableAttributes_2 = table.getRequiredNoAutoIncrementableAttributes();
          for(final ASDMAttribute attr_6 : _requiredNoAutoIncrementableAttributes_2) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("row->set");
            String _UpperCaseName_1 = attr_6.UpperCaseName();
            _builder.append(_UpperCaseName_1, "\t\t");
            _builder.append("(");
            String _name_73 = attr_6.getName();
            _builder.append(_name_73, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return row;\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_74 = table.getName();
    _builder.append(_name_74, "\t");
    _builder.append("Row* ");
    String _name_75 = table.getName();
    _builder.append(_name_75, "\t");
    _builder.append("Table::newRow(");
    String _name_76 = table.getName();
    _builder.append(_name_76, "\t");
    _builder.append("Row* row) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _name_77 = table.getName();
    _builder.append(_name_77, "\t\t");
    _builder.append("Row(*this, *row);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Append a row to its table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    {
      boolean _isTemporal = table.isTemporal();
      if (_isTemporal) {
        {
          String _name_78 = table.getName();
          boolean _equals_1 = _name_78.equals("Source");
          if (_equals_1) {
            _builder.append("\t");
            CharSequence _addRowToSource = this.addRowToSource(table);
            _builder.append(_addRowToSource, "\t");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            CharSequence _addRowToTemporal = this.addRowToTemporal(table);
            _builder.append(_addRowToTemporal, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("\t");
        CharSequence _addRowToNotTemporal = this.addRowToNotTemporal(table);
        _builder.append(_addRowToNotTemporal, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// A private method to append a row to its table, used by input conversion");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// methods, with row uniqueness.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    {
      boolean _isTemporal_1 = table.isTemporal();
      if (_isTemporal_1) {
        _builder.append("\t");
        CharSequence _addAndCheckToTemporal = this.addAndCheckToTemporal(table);
        _builder.append(_addAndCheckToTemporal, "\t");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        CharSequence _addAndCheckToNotTemporal = this.addAndCheckToNotTemporal(table);
        _builder.append(_addAndCheckToNotTemporal, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// A private method to brutally append a row to its table, without checking for row uniqueness.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _append = this.append(table);
    _builder.append(_append, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _ters = this.getters(table);
    _builder.append(_ters, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isTemporal_2 = table.isTemporal();
      if (_isTemporal_2) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        CharSequence _tersTemporal = this.gettersTemporal(table);
        _builder.append(_tersTemporal, "\t\t");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        CharSequence _tersNotTemporal = this.gettersNotTemporal(table);
        _builder.append(_tersNotTemporal, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("using asdmIDL::");
    String _name_79 = table.getName();
    _builder.append(_name_79, "\t");
    _builder.append("TableIDL;");
    _builder.newLineIfNotEmpty();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Conversion Methods");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    String _name_80 = table.getName();
    _builder.append(_name_80, "\t");
    _builder.append("TableIDL *");
    String _name_81 = table.getName();
    _builder.append(_name_81, "\t");
    _builder.append("Table::toIDL() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_82 = table.getName();
    _builder.append(_name_82, "\t\t");
    _builder.append("TableIDL *x = new ");
    String _name_83 = table.getName();
    _builder.append(_name_83, "\t\t");
    _builder.append("TableIDL ();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("unsigned int nrow = size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x->row.length(nrow);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vector<");
    String _name_84 = table.getName();
    _builder.append(_name_84, "\t\t");
    _builder.append("Row*> v = get();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < nrow; ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//x->row[i] = *(v[i]->toIDL());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("v[i]->toIDL(x->row[i]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return x;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_85 = table.getName();
    _builder.append(_name_85, "\t");
    _builder.append("Table::toIDL(asdmIDL::");
    String _name_86 = table.getName();
    _builder.append(_name_86, "\t");
    _builder.append("TableIDL& x) const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("unsigned int nrow = size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x.row.length(nrow);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vector<");
    String _name_87 = table.getName();
    _builder.append(_name_87, "\t\t");
    _builder.append("Row*> v = get();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < nrow; ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("v[i]->toIDL(x.row[i]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_88 = table.getName();
    _builder.append(_name_88, "\t");
    _builder.append("Table::fromIDL(");
    String _name_89 = table.getName();
    _builder.append(_name_89, "\t");
    _builder.append("TableIDL x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("unsigned int nrow = x.row.length();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < nrow; ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_90 = table.getName();
    _builder.append(_name_90, "\t\t\t");
    _builder.append("Row *tmp = newRow();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("tmp->setFromIDL(x.row[i]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// checkAndAdd(tmp);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("add(tmp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xML = this.toXML(table);
    _builder.append(_xML, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _fromXML = this.fromXML(table);
    _builder.append(_fromXML, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_91 = table.getName();
    _builder.append(_name_91, "\t");
    _builder.append("Table::error()  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Invalid xml document\",\"");
    String _name_92 = table.getName();
    _builder.append(_name_92, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _mIME = this.toMIME(table);
    _builder.append(_mIME, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setFromMIME = this.setFromMIME(table);
    _builder.append(_setFromMIME, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _file = this.toFile(table);
    _builder.append(_file, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setFromFile = this.setFromFile(table);
    _builder.append(_setFromFile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setFromMIMEFile = this.setFromMIMEFile(table);
    _builder.append(_setFromMIMEFile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _setFromXMLFile = this.setFromXMLFile(table);
    _builder.append(_setFromXMLFile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isTemporal_3 = table.isTemporal();
      if (_isTemporal_3) {
        {
          ASDMAttribute _TemporalAttribute = table.TemporalAttribute();
          String _JavaType = _TemporalAttribute.JavaType();
          boolean _equals_2 = _JavaType.equals("ArrayTimeInterval");
          if (_equals_2) {
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("* Insert a ");
            String _name_93 = table.getName();
            _builder.append(_name_93, "\t ");
            _builder.append("Row* in a vector of ");
            String _name_94 = table.getName();
            _builder.append(_name_94, "\t ");
            _builder.append("Row* so that it\'s ordered by ascending start time.");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("* @param ");
            String _name_95 = table.getName();
            _builder.append(_name_95, "\t ");
            _builder.append("Row* x . The pointer to be inserted.");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("* @param vector <");
            String _name_96 = table.getName();
            _builder.append(_name_96, "\t ");
            _builder.append("Row*>& row. A reference to the vector where to insert x.");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            String _name_97 = table.getName();
            _builder.append(_name_97, "\t ");
            _builder.append("Row* ");
            String _name_98 = table.getName();
            _builder.append(_name_98, "\t ");
            _builder.append("Table::insertByStartTime(");
            String _name_99 = table.getName();
            _builder.append(_name_99, "\t ");
            _builder.append("Row* x, vector<");
            String _name_100 = table.getName();
            _builder.append(_name_100, "\t ");
            _builder.append("Row*>& row) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("vector <");
            String _name_101 = table.getName();
            _builder.append(_name_101, "\t \t\t");
            _builder.append("Row*>::iterator theIterator;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("ArrayTime start = x->");
            ASDMAttribute _TemporalAttribute_1 = table.TemporalAttribute();
            String _name_102 = _TemporalAttribute_1.getName();
            _builder.append(_name_102, "\t \t\t");
            _builder.append(".getStart();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("// Is the row vector empty ?");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("if (row.size() == 0) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("row.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("return x;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("// Optimization for the case of insertion by ascending time.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            String _name_103 = table.getName();
            _builder.append(_name_103, "\t     \t");
            _builder.append("Row* last = *(row.end()-1);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("         ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("if ( start > last->");
            ASDMAttribute _TemporalAttribute_2 = table.TemporalAttribute();
            String _name_104 = _TemporalAttribute_2.getName();
            _builder.append(_name_104, "\t     \t");
            _builder.append(".getStart() ) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("  \t    \t");
            _builder.append("//");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t    \t");
            _builder.append("// Modify the duration of last if and only if the start time of x");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t    \t");
            _builder.append("// is located strictly before the end time of last.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t    \t");
            _builder.append("//");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t  \t\t");
            _builder.append("if ( start < (last->");
            ASDMAttribute _TemporalAttribute_3 = table.TemporalAttribute();
            String _name_105 = _TemporalAttribute_3.getName();
            _builder.append(_name_105, "\t \t  \t\t");
            _builder.append(".getStart() + last->");
            ASDMAttribute _TemporalAttribute_4 = table.TemporalAttribute();
            String _name_106 = _TemporalAttribute_4.getName();
            _builder.append(_name_106, "\t \t  \t\t");
            _builder.append(".getDuration()))   \t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("     \t\t\t");
            _builder.append("last->");
            ASDMAttribute _TemporalAttribute_5 = table.TemporalAttribute();
            String _name_107 = _TemporalAttribute_5.getName();
            _builder.append(_name_107, "\t     \t\t\t");
            _builder.append(".setDuration(start - last->");
            ASDMAttribute _TemporalAttribute_6 = table.TemporalAttribute();
            String _name_108 = _TemporalAttribute_6.getName();
            _builder.append(_name_108, "\t     \t\t\t");
            _builder.append(".getStart());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("row.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("return x;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("// Optimization for the case of insertion by descending time.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            String _name_109 = table.getName();
            _builder.append(_name_109, "\t     \t");
            _builder.append("Row* first = *(row.begin());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("         ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("if ( start < first->");
            ASDMAttribute _TemporalAttribute_7 = table.TemporalAttribute();
            String _name_110 = _TemporalAttribute_7.getName();
            _builder.append(_name_110, "\t     \t");
            _builder.append(".getStart() ) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("//");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t  \t\t");
            _builder.append("// Modify the duration of x if and only if the start time of first");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t  \t\t");
            _builder.append("// is located strictly before the end time of x.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t  \t\t");
            _builder.append("//");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t  \t\t");
            _builder.append("if ( first->");
            ASDMAttribute _TemporalAttribute_8 = table.TemporalAttribute();
            String _name_111 = _TemporalAttribute_8.getName();
            _builder.append(_name_111, "\t \t  \t\t");
            _builder.append(".getStart() < (start + x->");
            ASDMAttribute _TemporalAttribute_9 = table.TemporalAttribute();
            String _name_112 = _TemporalAttribute_9.getName();
            _builder.append(_name_112, "\t \t  \t\t");
            _builder.append(".getDuration()) )\t  \t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("     \t\t\t");
            _builder.append("x->");
            ASDMAttribute _TemporalAttribute_10 = table.TemporalAttribute();
            String _name_113 = _TemporalAttribute_10.getName();
            _builder.append(_name_113, "\t     \t\t\t");
            _builder.append(".setDuration(first->");
            ASDMAttribute _TemporalAttribute_11 = table.TemporalAttribute();
            String _name_114 = _TemporalAttribute_11.getName();
            _builder.append(_name_114, "\t     \t\t\t");
            _builder.append(".getStart() - start);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("row.insert(row.begin(), x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t\t");
            _builder.append("return x;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("// Case where x has to be inserted inside row; let\'s use a dichotomy");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     \t");
            _builder.append("// method to find the insertion index.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("unsigned int k0 = 0;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("unsigned int k1 = row.size() - 1;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("while (k0 != (k1 - 1)) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("if (start == row[k0]->");
            ASDMAttribute _TemporalAttribute_12 = table.TemporalAttribute();
            String _name_115 = _TemporalAttribute_12.getName();
            _builder.append(_name_115, "\t \t\t\t");
            _builder.append(".getStart()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("if (row[k0]->equalByRequiredValue(x))");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("return row[k0];");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
            String _name_116 = table.getName();
            _builder.append(_name_116, "\t \t\t\t\t\t");
            _builder.append("Table\");\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("else if (start == row[k1]->");
            ASDMAttribute _TemporalAttribute_13 = table.TemporalAttribute();
            String _name_117 = _TemporalAttribute_13.getName();
            _builder.append(_name_117, "\t \t\t\t");
            _builder.append(".getStart()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("if (row[k1]->equalByRequiredValue(x))");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("return row[k1];");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
            String _name_118 = table.getName();
            _builder.append(_name_118, "\t \t\t\t\t\t");
            _builder.append("Table\");\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("if (start <= row[(k0+k1)/2]->");
            ASDMAttribute _TemporalAttribute_14 = table.TemporalAttribute();
            String _name_119 = _TemporalAttribute_14.getName();
            _builder.append(_name_119, "\t \t\t\t\t");
            _builder.append(".getStart())");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("k1 = (k0 + k1) / 2;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t\t");
            _builder.append("k0 = (k0 + k1) / 2;\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("} \t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("if (start == row[k0]->");
            ASDMAttribute _TemporalAttribute_15 = table.TemporalAttribute();
            String _name_120 = _TemporalAttribute_15.getName();
            _builder.append(_name_120, "\t \t\t");
            _builder.append(".getStart()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("if (row[k0]->equalByRequiredValue(x))");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("return row[k0];");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
            String _name_121 = table.getName();
            _builder.append(_name_121, "\t \t\t\t\t");
            _builder.append("Table\");\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("else if (start == row[k1]->");
            ASDMAttribute _TemporalAttribute_16 = table.TemporalAttribute();
            String _name_122 = _TemporalAttribute_16.getName();
            _builder.append(_name_122, "\t \t\t");
            _builder.append(".getStart()) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("if (row[k1]->equalByRequiredValue(x))");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("return row[k1];");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t");
            _builder.append("else");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t\t\t");
            _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
            String _name_123 = table.getName();
            _builder.append(_name_123, "\t \t\t\t\t");
            _builder.append("Table\");\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("}\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("row[k0]->");
            ASDMAttribute _TemporalAttribute_17 = table.TemporalAttribute();
            String _name_124 = _TemporalAttribute_17.getName();
            _builder.append(_name_124, "\t \t\t");
            _builder.append(".setDuration(start-row[k0]->");
            ASDMAttribute _TemporalAttribute_18 = table.TemporalAttribute();
            String _name_125 = _TemporalAttribute_18.getName();
            _builder.append(_name_125, "\t \t\t");
            _builder.append(".getStart());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("x->");
            ASDMAttribute _TemporalAttribute_19 = table.TemporalAttribute();
            String _name_126 = _TemporalAttribute_19.getName();
            _builder.append(_name_126, "\t \t\t");
            _builder.append(".setDuration(row[k0+1]->");
            ASDMAttribute _TemporalAttribute_20 = table.TemporalAttribute();
            String _name_127 = _TemporalAttribute_20.getName();
            _builder.append(_name_127, "\t \t\t");
            _builder.append(".getStart() - start);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("row.insert(row.begin()+(k0+1), x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    \t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" \t\t");
            _builder.append("return x;   ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("     ");
            _builder.append("}");
            _builder.newLine();
          } else {
            ASDMAttribute _TemporalAttribute_21 = table.TemporalAttribute();
            String _JavaType_1 = _TemporalAttribute_21.JavaType();
            boolean _equals_3 = _JavaType_1.equals("ArrayTime");
            if (_equals_3) {
              _builder.append("\t");
              _builder.newLine();
              _builder.append("\t");
              String _name_128 = table.getName();
              _builder.append(_name_128, "\t");
              _builder.append("Row * ");
              String _name_129 = table.getName();
              _builder.append(_name_129, "\t");
              _builder.append("Table::insertByTime(");
              String _name_130 = table.getName();
              _builder.append(_name_130, "\t");
              _builder.append("Row* x, vector<");
              String _name_131 = table.getName();
              _builder.append(_name_131, "\t");
              _builder.append("Row *>&row ) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("ArrayTime start = x->get");
              ASDMAttribute _TemporalAttribute_22 = table.TemporalAttribute();
              String _UpperCaseName_2 = _TemporalAttribute_22.UpperCaseName();
              _builder.append(_UpperCaseName_2, "\t\t\t");
              _builder.append("();");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Is the vector empty ?");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("if (row.size() == 0) {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("row.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("privateRows.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("x->isAdded(true);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("return x;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Optimization for the case of insertion by ascending time.");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              String _name_132 = table.getName();
              _builder.append(_name_132, "\t\t\t");
              _builder.append("Row* last = row.at(row.size()-1);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("if (start.get() > last->get");
              ASDMAttribute _TemporalAttribute_23 = table.TemporalAttribute();
              String _UpperCaseName_3 = _TemporalAttribute_23.UpperCaseName();
              _builder.append(_UpperCaseName_3, "\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("row.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("privateRows.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("x->isAdded(true);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("return x;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Optimization for the case of insertion by descending time.");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              String _name_133 = table.getName();
              _builder.append(_name_133, "\t\t\t");
              _builder.append("Row* first = row.at(0);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("if (start.get() < first->get");
              ASDMAttribute _TemporalAttribute_24 = table.TemporalAttribute();
              String _UpperCaseName_4 = _TemporalAttribute_24.UpperCaseName();
              _builder.append(_UpperCaseName_4, "\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("row.insert(row.begin(), x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("privateRows.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("x->isAdded(true);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("return x;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Case where x has to be inserted inside row; let\'s use a dichotomy");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// method to find the insertion index.\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("int k0 = 0;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("int k1 = row.size() - 1;    \t  ");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("while (k0 != (k1 - 1)) {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("if (start.get() == row.at(k0)->get");
              ASDMAttribute _TemporalAttribute_25 = table.TemporalAttribute();
              String _UpperCaseName_5 = _TemporalAttribute_25.UpperCaseName();
              _builder.append(_UpperCaseName_5, "\t\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("if (row.at(k0)->equalByRequiredValue(x))");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("return row.at(k0);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("else");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
              String _name_134 = table.getName();
              _builder.append(_name_134, "\t\t\t\t\t\t");
              _builder.append("Table\");\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("else if (start.get() == row.at(k1)->get");
              ASDMAttribute _TemporalAttribute_26 = table.TemporalAttribute();
              String _UpperCaseName_6 = _TemporalAttribute_26.UpperCaseName();
              _builder.append(_UpperCaseName_6, "\t\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("if (row.at(k1)->equalByRequiredValue(x))");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("return row.at(k1);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("else");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("throw  DuplicateKey(\"DuplicateKey exception in \", \"");
              String _name_135 = table.getName();
              _builder.append(_name_135, "\t\t\t\t\t\t");
              _builder.append("Table\");\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("else {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("if (start.get() <= row.at((k0+k1)/2)->get");
              ASDMAttribute _TemporalAttribute_27 = table.TemporalAttribute();
              String _UpperCaseName_7 = _TemporalAttribute_27.UpperCaseName();
              _builder.append(_UpperCaseName_7, "\t\t\t\t\t");
              _builder.append("().get())");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("k1 = (k0 + k1) / 2;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("else");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t\t");
              _builder.append("k0 = (k0 + k1) / 2;\t\t\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("} \t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("if (start.get() == row.at(k0)->get");
              ASDMAttribute _TemporalAttribute_28 = table.TemporalAttribute();
              String _UpperCaseName_8 = _TemporalAttribute_28.UpperCaseName();
              _builder.append(_UpperCaseName_8, "\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("if (row.at(k0)->equalByRequiredValue(x))");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("return row.at(k0);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("else");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("throw DuplicateKey(\"DuplicateKey exception in \", \"");
              String _name_136 = table.getName();
              _builder.append(_name_136, "\t\t\t\t\t");
              _builder.append("Table\");\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("else if (start.get() == row.at(k1)->get");
              ASDMAttribute _TemporalAttribute_29 = table.TemporalAttribute();
              String _UpperCaseName_9 = _TemporalAttribute_29.UpperCaseName();
              _builder.append(_UpperCaseName_9, "\t\t\t");
              _builder.append("().get()) {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("if (row.at(k1)->equalByRequiredValue(x))");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("return row.at(k1);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t");
              _builder.append("else");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t\t\t");
              _builder.append("throw  DuplicateKey(\"DuplicateKey exception in \", \"");
              String _name_137 = table.getName();
              _builder.append(_name_137, "\t\t\t\t\t");
              _builder.append("Table\");\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("}\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("row.insert(row.begin()+(k0+1), x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("privateRows.push_back(x);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("x->isAdded(true);");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("return x; \t\t\t\t\t\t");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _and = false;
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      boolean _not = (!_NoAutoIncrementableAttribute);
      if (!_not) {
        _and = false;
      } else {
        boolean _isTemporal_4 = table.isTemporal();
        boolean _not_1 = (!_isTemporal_4);
        _and = _not_1;
      }
      if (_and) {
        _builder.append("\t");
        _builder.append("void ");
        String _name_138 = table.getName();
        _builder.append(_name_138, "\t");
        _builder.append("Table::autoIncrement(string key, ");
        String _name_139 = table.getName();
        _builder.append(_name_139, "\t");
        _builder.append("Row* x) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("map<string, int>::iterator iter;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if ((iter=noAutoIncIds.find(key)) == noAutoIncIds.end()) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("// There is not yet a combination of the non autoinc attributes values in the hashtable");
        _builder.newLine();
        {
          ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
          String _JavaType_2 = _TheAutoIncrementableAttribute.JavaType();
          boolean _equals_4 = _JavaType_2.equals("Tag");
          if (_equals_4) {
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("// Initialize  ");
            ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
            String _name_140 = _TheAutoIncrementableAttribute_1.getName();
            _builder.append(_name_140, "\t\t\t");
            _builder.append(" to Tag(0).");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("x->set");
            ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
            String _UpperCaseName_10 = _TheAutoIncrementableAttribute_2.UpperCaseName();
            _builder.append(_UpperCaseName_10, "\t\t\t");
            _builder.append("(Tag(0,  TagType::");
            String _name_141 = table.getName();
            _builder.append(_name_141, "\t\t\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          } else {
            ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
            String _JavaType_3 = _TheAutoIncrementableAttribute_3.JavaType();
            boolean _equals_5 = _JavaType_3.equals("int");
            if (_equals_5) {
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Initialize  ");
              ASDMAttribute _TheAutoIncrementableAttribute_4 = table.TheAutoIncrementableAttribute();
              String _name_142 = _TheAutoIncrementableAttribute_4.getName();
              _builder.append(_name_142, "\t\t\t");
              _builder.append(" to 0.\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("x->set");
              ASDMAttribute _TheAutoIncrementableAttribute_5 = table.TheAutoIncrementableAttribute();
              String _UpperCaseName_11 = _TheAutoIncrementableAttribute_5.UpperCaseName();
              _builder.append(_UpperCaseName_11, "\t\t\t");
              _builder.append("(0);");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("// Record it in the map.\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("noAutoIncIds.insert(make_pair(key, 0));\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("} ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("// There is already a combination of the non autoinc attributes values in the hashtable");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("// Increment its value.");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("int n = iter->second + 1; ");
        _builder.newLine();
        {
          ASDMAttribute _TheAutoIncrementableAttribute_6 = table.TheAutoIncrementableAttribute();
          String _JavaType_4 = _TheAutoIncrementableAttribute_6.JavaType();
          boolean _equals_6 = _JavaType_4.equals("Tag");
          if (_equals_6) {
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("// Initialize  ");
            ASDMAttribute _TheAutoIncrementableAttribute_7 = table.TheAutoIncrementableAttribute();
            String _name_143 = _TheAutoIncrementableAttribute_7.getName();
            _builder.append(_name_143, "\t\t\t");
            _builder.append(" to Tag(n).");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("x->set");
            ASDMAttribute _TheAutoIncrementableAttribute_8 = table.TheAutoIncrementableAttribute();
            String _UpperCaseName_12 = _TheAutoIncrementableAttribute_8.UpperCaseName();
            _builder.append(_UpperCaseName_12, "\t\t\t");
            _builder.append("(Tag(n, TagType::");
            String _name_144 = table.getName();
            _builder.append(_name_144, "\t\t\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          } else {
            ASDMAttribute _TheAutoIncrementableAttribute_9 = table.TheAutoIncrementableAttribute();
            String _JavaType_5 = _TheAutoIncrementableAttribute_9.JavaType();
            boolean _equals_7 = _JavaType_5.equals("int");
            if (_equals_7) {
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("// Initialize  ");
              ASDMAttribute _TheAutoIncrementableAttribute_10 = table.TheAutoIncrementableAttribute();
              String _name_145 = _TheAutoIncrementableAttribute_10.getName();
              _builder.append(_name_145, "\t\t\t");
              _builder.append(" to n.\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("x->set");
              ASDMAttribute _TheAutoIncrementableAttribute_11 = table.TheAutoIncrementableAttribute();
              String _UpperCaseName_13 = _TheAutoIncrementableAttribute_11.UpperCaseName();
              _builder.append(_UpperCaseName_13, "\t\t\t");
              _builder.append("(n);");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("// Record it in the map.\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("noAutoIncIds.insert(make_pair(key, n));\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("} // End namespace asdm");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addRowToSource(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a string built by concatenating the ascii representation of the");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* parameters values suffixed with a \"_\" character.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("string ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::Key(");
    String _KeyNoAutoIncNoTimeCpp = table.KeyNoAutoIncNoTimeCpp();
    _builder.append(_KeyNoAutoIncNoTimeCpp, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ostringstream ostrstr;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ostrstr");
    _builder.newLine();
    {
      List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes = table.KeyNoAutoIncNoTimeAttributes();
      for(final ASDMAttribute attr : _KeyNoAutoIncNoTimeAttributes) {
        _builder.append("\t");
        _builder.append("<< ");
        {
          String _CppType = attr.CppType();
          boolean _equals = _CppType.equals("Tag");
          if (_equals) {
            String _name_1 = attr.getName();
            _builder.append(_name_1, "\t");
            _builder.append(".toString() ");
          } else {
            _builder.append(" ");
            String _name_2 = attr.getName();
            _builder.append(_name_2, "\t");
            _builder.append(" ");
          }
        }
        _builder.append(" << \"_\"");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return ostrstr.str();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _name_3 = table.getName();
    _builder.append(_name_3, "");
    _builder.append("Row* ");
    String _name_4 = table.getName();
    _builder.append(_name_4, "");
    _builder.append("Table::add(");
    String _name_5 = table.getName();
    _builder.append(_name_5, "");
    _builder.append("Row* x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// Get the start time of the row to be inserted.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayTime startTime = x->get");
    ASDMAttribute _TemporalAttribute = table.TemporalAttribute();
    String _UpperCaseName = _TemporalAttribute.UpperCaseName();
    _builder.append(_UpperCaseName, "\t");
    _builder.append("().getStart();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// cout << \"Trying to add a new row with start time = \" << startTime << endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int insertionId = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Determine the entry in the context map from the appropriates attributes.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string k = Key(");
    {
      List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_1 = table.KeyNoAutoIncNoTimeAttributes();
      boolean _hasElements = false;
      for(final ASDMAttribute param : _KeyNoAutoIncNoTimeAttributes_1) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("x->get");
        String _UpperCaseName_1 = param.UpperCaseName();
        _builder.append(_UpperCaseName_1, "\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t   ");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t   ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (name2id_m.find(x->getSourceName()) == name2id_m.end()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int dummy = name2id_m.size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("name2id_m[x->getSourceName()] = dummy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("insertionId = name2id_m[x->getSourceName()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (context.find(k) != context.end()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (unsigned int j = 0; j < context[k].size(); j++) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if ((context[k].size() > insertionId) && context[k][insertionId][j]->getTimeInterval().getStart().equals(startTime)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(");
    _builder.newLine();
    {
      List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
      boolean _hasElements_1 = false;
      for(final ASDMAttribute attr_1 : _requiredValueAttributes) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(" && \n", "\t\t\t\t\t");
        }
        _builder.append("\t\t\t\t\t");
        _builder.append("(context[k][insertionId][j]->get");
        String _UpperCaseName_2 = attr_1.UpperCaseName();
        _builder.append(_UpperCaseName_2, "\t\t\t\t\t");
        _builder.append("() == x->get");
        String _UpperCaseName_3 = attr_1.UpperCaseName();
        _builder.append(_UpperCaseName_3, "\t\t\t\t\t");
        _builder.append("())");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append(") {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// cout << \"A row equal to x has been found, I return it \" << endl;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return context[k][insertionId][j];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throw UniquenessViolationException();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else { // There is not yet a context ...");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("// Create and initialize an entry in the context map for this combination....");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// cout << \"Starting a new context \" << k << endl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ID_TIME_ROWS vv;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("context[k] = vv;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
      String _CppType_1 = _TheAutoIncrementableAttribute.CppType();
      boolean _equals_1 = _CppType_1.equals("int");
      if (_equals_1) {
        _builder.append("\t");
        _builder.append("x->set");
        ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
        String _UpperCaseName_4 = _TheAutoIncrementableAttribute_1.UpperCaseName();
        _builder.append(_UpperCaseName_4, "\t");
        _builder.append("(insertionId);");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        _builder.append("x->set");
        ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
        String _UpperCaseName_5 = _TheAutoIncrementableAttribute_2.UpperCaseName();
        _builder.append(_UpperCaseName_5, "\t");
        _builder.append("(Tag(insertionId, TagType::");
        String _name_6 = table.getName();
        _builder.append(_name_6, "\t");
        _builder.append("));\t\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("if (insertionId >= (int) context[k].size()) context[k].resize(insertionId+1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return insertByStartTime(x, context[k][insertionId]);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ");
    String _name_7 = table.getName();
    _builder.append(_name_7, "");
    _builder.append("Table::addWithoutCheckingUnique(");
    String _name_8 = table.getName();
    _builder.append(_name_8, "");
    _builder.append("Row * x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_9 = table.getName();
    _builder.append(_name_9, "\t");
    _builder.append("Row * dummy = checkAndAdd(x, true); // We require the check for uniqueness to be skipped.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t                                           ");
    _builder.append("// by passing true in the second parameter");
    _builder.newLine();
    _builder.append("\t                                           ");
    _builder.append("// whose value by default is false");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (false) cout << (unsigned long long) dummy;");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addRowToTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      boolean _not = (!_NoAutoIncrementableAttribute);
      if (_not) {
        _builder.newLine();
        {
          List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes = table.KeyNoAutoIncNoTimeAttributes();
          int _size = _KeyNoAutoIncNoTimeAttributes.size();
          boolean _equals = (_size == 0);
          if (_equals) {
            _builder.newLine();
          } else {
            _builder.newLine();
            _builder.newLine();
            _builder.append("/** ");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* Returns a string built by concatenating the ascii representation of the");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* parameters values suffixed with a \"_\" character.");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("string ");
            String _name = table.getName();
            _builder.append(_name, " ");
            _builder.append("Table::Key(");
            String _KeyNoAutoIncNoTimeCpp = table.KeyNoAutoIncNoTimeCpp();
            _builder.append(_KeyNoAutoIncNoTimeCpp, " ");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append(" \t");
            _builder.append("ostringstream ostrstr;");
            _builder.newLine();
            _builder.append(" \t\t");
            _builder.append("ostrstr  ");
            _builder.newLine();
            {
              List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_1 = table.KeyNoAutoIncNoTimeAttributes();
              for(final ASDMAttribute attr : _KeyNoAutoIncNoTimeAttributes_1) {
                _builder.append("\t\t");
                _builder.append("<< ");
                {
                  String _CppType = attr.CppType();
                  boolean _equals_1 = _CppType.equals("Tag");
                  if (_equals_1) {
                    String _name_1 = attr.getName();
                    _builder.append(_name_1, "\t\t");
                    _builder.append(".toString() ");
                  } else {
                    _builder.append(" ");
                    String _name_2 = attr.getName();
                    _builder.append(_name_2, "\t\t");
                    _builder.append(" ");
                  }
                }
                _builder.append(" << \"_\"");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append(";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return ostrstr.str();\t \t");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("/**");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* Append a row to a ");
            String _name_3 = table.getName();
            _builder.append(_name_3, " ");
            _builder.append("Table which has simply ");
            _builder.newLineIfNotEmpty();
            _builder.append(" ");
            _builder.append("* 1) an autoincrementable attribute  (");
            ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
            String _name_4 = _TheAutoIncrementableAttribute.getName();
            _builder.append(_name_4, " ");
            _builder.append(") ");
            _builder.newLineIfNotEmpty();
            _builder.append(" ");
            _builder.append("* 2) a temporal attribute (");
            ASDMAttribute _TemporalAttribute = table.TemporalAttribute();
            String _name_5 = _TemporalAttribute.getName();
            _builder.append(_name_5, " ");
            _builder.append(") in its key section.");
            _builder.newLineIfNotEmpty();
            _builder.append(" ");
            _builder.append("* 3) other attributes in the key section (defining a so called context).");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* If there is already a row in the table whose key section non including is equal to x\'s one and");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* whose value section is equal to x\'s one then return this row, otherwise add x to the collection");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* of rows.");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            String _name_6 = table.getName();
            _builder.append(_name_6, "");
            _builder.append("Row* ");
            String _name_7 = table.getName();
            _builder.append(_name_7, "");
            _builder.append("Table::add(");
            String _name_8 = table.getName();
            _builder.append(_name_8, "");
            _builder.append("Row* x) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("// Get the start time of the row to be inserted.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("ArrayTime startTime = x->get");
            ASDMAttribute _TemporalAttribute_1 = table.TemporalAttribute();
            String _UpperCaseName = _TemporalAttribute_1.UpperCaseName();
            _builder.append(_UpperCaseName, "\t");
            _builder.append("().getStart();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("// cout << \"Trying to add a new row with start time = \" << startTime << endl;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("int insertionId = 0;");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("// Determine the entry in the context map from the appropriates attributes.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("string k = Key(");
            {
              List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_2 = table.KeyNoAutoIncNoTimeAttributes();
              boolean _hasElements = false;
              for(final ASDMAttribute param : _KeyNoAutoIncNoTimeAttributes_2) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "\t");
                }
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("x->get");
                String _UpperCaseName_1 = param.UpperCaseName();
                _builder.append(_UpperCaseName_1, "\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t\t   ");
              }
            }
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t   ");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("// Determine the insertion index for the row x, possibly returning a pointer to a row identical to x. \t\t\t\t\t   ");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("if (context.find(k) != context.end()) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("// cout << \"The context \" << k << \" already exists \" << endl;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("for (unsigned int i = 0; i < context[k].size(); i++) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("//cout << \"Looking for a same starttime in i = \" << i << endl;");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("for (unsigned int j=0; j<context[k][i].size(); j++) ");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("if (context[k][i][j]->getTimeInterval().getStart().equals(startTime)) {");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("if (");
            _builder.newLine();
            {
              List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
              boolean _hasElements_1 = false;
              for(final ASDMAttribute attr_1 : _requiredValueAttributes) {
                if (!_hasElements_1) {
                  _hasElements_1 = true;
                } else {
                  _builder.appendImmediate(" && \n", "\t\t\t\t\t");
                }
                _builder.append("\t\t\t\t\t");
                _builder.append("(context[k][i][j]->get");
                String _UpperCaseName_2 = attr_1.UpperCaseName();
                _builder.append(_UpperCaseName_2, "\t\t\t\t\t");
                _builder.append("() == x->get");
                String _UpperCaseName_3 = attr_1.UpperCaseName();
                _builder.append(_UpperCaseName_3, "\t\t\t\t\t");
                _builder.append("())");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t\t\t\t");
            _builder.append(") {");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t");
            _builder.append("// cout << \"A row equal to x has been found, I return it \" << endl;");
            _builder.newLine();
            _builder.append("\t\t\t\t\t\t");
            _builder.append("return context[k][i][j];");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("// Otherwise we must autoincrement ");
            ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
            String _name_9 = _TheAutoIncrementableAttribute_1.getName();
            _builder.append(_name_9, "\t\t\t\t\t");
            _builder.append(" and");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("// insert a new ");
            String _name_10 = table.getName();
            _builder.append(_name_10, "\t\t\t\t\t");
            _builder.append("Row with this autoincremented value.");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("insertionId = i+1;");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("break;");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("// And goto insertion");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("// goto done;");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("//cout << \"No row with the same start time than x, it will be inserted in row with id = 0\" << endl;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("// insertionId = 0;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("else { // There is not yet a context ...");
            _builder.newLine();
            _builder.append("\t\t   ");
            _builder.append("// Create and initialize an entry in the context map for this combination....");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("// cout << \"Starting a new context \" << k << endl;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("ID_TIME_ROWS vv;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("context[k] = vv;");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("insertionId = 0;\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
            {
              ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
              String _CppType_1 = _TheAutoIncrementableAttribute_2.CppType();
              boolean _equals_2 = _CppType_1.equals("int");
              if (_equals_2) {
                _builder.append("\t");
                _builder.append("x->set");
                ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_4 = _TheAutoIncrementableAttribute_3.UpperCaseName();
                _builder.append(_UpperCaseName_4, "\t");
                _builder.append("(insertionId);");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("x->set");
                ASDMAttribute _TheAutoIncrementableAttribute_4 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_5 = _TheAutoIncrementableAttribute_4.UpperCaseName();
                _builder.append(_UpperCaseName_5, "\t");
                _builder.append("(Tag(insertionId, TagType::");
                String _name_11 = table.getName();
                _builder.append(_name_11, "\t");
                _builder.append("));\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("if (insertionId >= (int) context[k].size()) context[k].resize(insertionId+1);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return insertByStartTime(x, context[k][insertionId]);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
          }
        }
      } else {
        {
          List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_3 = table.KeyNoAutoIncNoTimeAttributes();
          int _size_1 = _KeyNoAutoIncNoTimeAttributes_3.size();
          boolean _notEquals = (_size_1 != 0);
          if (_notEquals) {
            _builder.newLine();
            _builder.append("/** ");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* Returns a string built by concatenating the ascii representation of the");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* parameters values suffixed with a \"_\" character.");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("string ");
            String _name_12 = table.getName();
            _builder.append(_name_12, " ");
            _builder.append("Table::Key(");
            String _KeyNoAutoIncNoTimeCpp_1 = table.KeyNoAutoIncNoTimeCpp();
            _builder.append(_KeyNoAutoIncNoTimeCpp_1, " ");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append(" \t");
            _builder.append("ostringstream ostrstr;");
            _builder.newLine();
            _builder.append(" \t\t");
            _builder.append("ostrstr  ");
            _builder.newLine();
            {
              List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_4 = table.KeyNoAutoIncNoTimeAttributes();
              for(final ASDMAttribute attr_2 : _KeyNoAutoIncNoTimeAttributes_4) {
                _builder.append("\t\t");
                _builder.append("<<  ");
                {
                  String _CppType_2 = attr_2.CppType();
                  boolean _equals_3 = _CppType_2.equals("Tag");
                  if (_equals_3) {
                    String _name_13 = attr_2.getName();
                    _builder.append(_name_13, "\t\t");
                    _builder.append(".toString() ");
                  } else {
                    _builder.append(" ");
                    String _name_14 = attr_2.getName();
                    _builder.append(_name_14, "\t\t");
                    _builder.append(" ");
                  }
                }
                _builder.append(" << \"_\"");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append(";");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return ostrstr.str();\t \t");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("}");
            _builder.newLine();
            _builder.append(" ");
            _builder.newLine();
            {
              ASDMAttribute _TemporalAttribute_2 = table.TemporalAttribute();
              String _JavaType = _TemporalAttribute_2.JavaType();
              boolean _equals_4 = Objects.equal(_JavaType, "ArrayTimeInterval");
              if (_equals_4) {
                _builder.newLine();
                String _name_15 = table.getName();
                _builder.append(_name_15, "");
                _builder.append("Row* ");
                String _name_16 = table.getName();
                _builder.append(_name_16, "");
                _builder.append("Table::add(");
                String _name_17 = table.getName();
                _builder.append(_name_17, "");
                _builder.append("Row* x) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("ArrayTime startTime = x->get");
                ASDMAttribute _TemporalAttribute_3 = table.TemporalAttribute();
                String _UpperCaseName_6 = _TemporalAttribute_3.UpperCaseName();
                _builder.append(_UpperCaseName_6, "\t");
                _builder.append("().getStart();");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("\t");
                _builder.append("/*");
                _builder.newLine();
                _builder.append(" \t ");
                _builder.append("* Is there already a context for this combination of not temporal ");
                _builder.newLine();
                _builder.append(" \t ");
                _builder.append("* attributes ?");
                _builder.newLine();
                _builder.append(" \t ");
                _builder.append("*/");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("string k = Key(");
                {
                  List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_5 = table.KeyNoAutoIncNoTimeAttributes();
                  boolean _hasElements_2 = false;
                  for(final ASDMAttribute param_1 : _KeyNoAutoIncNoTimeAttributes_5) {
                    if (!_hasElements_2) {
                      _hasElements_2 = true;
                    } else {
                      _builder.appendImmediate(",", "\t");
                    }
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("x->get");
                    String _UpperCaseName_7 = param_1.UpperCaseName();
                    _builder.append(_UpperCaseName_7, "\t");
                    _builder.append("()");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t   ");
                  }
                }
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("\t");
                _builder.append("if (context.find(k) == context.end()) { ");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("// There is not yet a context ...");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("// Create and initialize an entry in the context map for this combination....");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("TIME_ROWS v;");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("context[k] = v;\t\t\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("return insertByStartTime(x, context[k]);");
                _builder.newLine();
                _builder.append("}\t");
                _builder.newLine();
              } else {
                ASDMAttribute _TemporalAttribute_4 = table.TemporalAttribute();
                String _JavaType_1 = _TemporalAttribute_4.JavaType();
                boolean _equals_5 = Objects.equal(_JavaType_1, "ArrayTime");
                if (_equals_5) {
                  _builder.newLine();
                  String _name_18 = table.getName();
                  _builder.append(_name_18, "");
                  _builder.append("Row* ");
                  String _name_19 = table.getName();
                  _builder.append(_name_19, "");
                  _builder.append("Table::add(");
                  String _name_20 = table.getName();
                  _builder.append(_name_20, "");
                  _builder.append("Row* x) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("string keystr = Key(");
                  {
                    List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_6 = table.KeyNoAutoIncNoTimeAttributes();
                    boolean _hasElements_3 = false;
                    for(final ASDMAttribute param_2 : _KeyNoAutoIncNoTimeAttributes_6) {
                      if (!_hasElements_3) {
                        _hasElements_3 = true;
                      } else {
                        _builder.appendImmediate(",", "\t");
                      }
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("x->get");
                      String _UpperCaseName_8 = param_2.UpperCaseName();
                      _builder.append(_UpperCaseName_8, "\t");
                      _builder.append("()");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t   ");
                    }
                  }
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("if (context.find(keystr) == context.end()) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("vector<");
                  String _name_21 = table.getName();
                  _builder.append(_name_21, "\t\t");
                  _builder.append("Row *> v;");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("context[keystr] = v;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return insertByTime(x, context[keystr]);\t\t\t\t\t");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            }
          } else {
            String _name_22 = table.getName();
            _builder.append(_name_22, "");
            _builder.append("Row* ");
            String _name_23 = table.getName();
            _builder.append(_name_23, "");
            _builder.append("Table::add(");
            String _name_24 = table.getName();
            _builder.append(_name_24, "");
            _builder.append("Row* x) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_25 = table.getName();
            _builder.append(_name_25, "\t");
            _builder.append("Row* aRow = getRowByKey(");
            _builder.newLineIfNotEmpty();
            {
              List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
              boolean _hasElements_4 = false;
              for(final ASDMAttribute param_3 : _keyAttributes) {
                if (!_hasElements_4) {
                  _hasElements_4 = true;
                } else {
                  _builder.appendImmediate(",", "\t");
                }
                _builder.append("\t");
                _builder.append("x->get");
                String _UpperCaseName_9 = param_3.UpperCaseName();
                _builder.append(_UpperCaseName_9, "\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append(");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("// There is a row with x\'s key section return it.");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("if (aRow) throw DuplicateKey(\"Duplicate key exception in \", \"");
            String _name_26 = table.getName();
            _builder.append(_name_26, "\t");
            _builder.append("Table\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("// Insert the row x in the table in such a way that the vector row is sorted");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("// by ascending values on ");
            ASDMAttribute _TemporalAttribute_5 = table.TemporalAttribute();
            String _name_27 = _TemporalAttribute_5.getName();
            _builder.append(_name_27, "\t");
            _builder.append(".getStart().");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return insertByStartTime(x, row);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("void ");
    String _name_28 = table.getName();
    _builder.append(_name_28, "");
    _builder.append("Table::addWithoutCheckingUnique(");
    String _name_29 = table.getName();
    _builder.append(_name_29, "");
    _builder.append("Row * x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_30 = table.getName();
    _builder.append(_name_30, "\t");
    _builder.append("Row * dummy = checkAndAdd(x, true); // We require the check for uniqueness to be skipped.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t                                           ");
    _builder.append("// by passing true in the second parameter");
    _builder.newLine();
    _builder.append("\t                                           ");
    _builder.append("// whose value by default is false.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (false) cout << (unsigned long long) dummy;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addRowToNotTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      boolean _not = (!_NoAutoIncrementableAttribute);
      if (_not) {
        _builder.newLine();
        _builder.append("/** ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Look up the table for a row whose noautoincrementable attributes are matching their");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* homologues in *x.  If a row is found  this row else autoincrement  *x.");
        ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
        String _name = _TheAutoIncrementableAttribute.getName();
        _builder.append(_name, " ");
        _builder.append(", ");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* add x to its table and returns x.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*  ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @returns a pointer on a ");
        String _name_1 = table.getName();
        _builder.append(_name_1, " ");
        _builder.append("Row.");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* @param x. A pointer on the row to be added.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/ ");
        _builder.newLine();
        {
          List<ASDMAttribute> _keyNoAutoIncrementableAttributes = table.getKeyNoAutoIncrementableAttributes();
          int _size = _keyNoAutoIncrementableAttributes.size();
          boolean _notEquals = (_size != 0);
          if (_notEquals) {
            _builder.newLine();
            _builder.append("\t");
            String _name_2 = table.getName();
            _builder.append(_name_2, "\t");
            _builder.append("Row* ");
            String _name_3 = table.getName();
            _builder.append(_name_3, "\t");
            _builder.append("Table::add(");
            String _name_4 = table.getName();
            _builder.append(_name_4, "\t");
            _builder.append("Row* x) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _name_5 = table.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("Row* aRow = lookup(");
            _builder.newLineIfNotEmpty();
            {
              List<ASDMAttribute> _requiredNoAutoIncrementableAttributes = table.getRequiredNoAutoIncrementableAttributes();
              boolean _hasElements = false;
              for(final ASDMAttribute param : _requiredNoAutoIncrementableAttributes) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "\t\t\t");
                }
                _builder.append("\t\t\t");
                _builder.append("x->get");
                String _UpperCaseName = param.UpperCaseName();
                _builder.append(_UpperCaseName, "\t\t\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append(");");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if (aRow) return aRow;");
            _builder.newLine();
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("// Autoincrementation algorithm. We use the hashtable.");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("ostringstream noAutoIncIdsEntry;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("noAutoIncIdsEntry");
            _builder.newLine();
            {
              List<ASDMAttribute> _keyNoAutoIncrementableAttributes_1 = table.getKeyNoAutoIncrementableAttributes();
              for(final ASDMAttribute at : _keyNoAutoIncrementableAttributes_1) {
                {
                  String _JavaType = at.JavaType();
                  boolean _equals = _JavaType.equals("Tag");
                  if (_equals) {
                    _builder.append("\t\t");
                    _builder.append("<< x->");
                    String _name_6 = at.getName();
                    _builder.append(_name_6, "\t\t");
                    _builder.append(".toString() << \"_\"");
                    _builder.newLineIfNotEmpty();
                  } else {
                    String _JavaType_1 = at.JavaType();
                    boolean _equals_1 = _JavaType_1.equals("int");
                    if (_equals_1) {
                      _builder.append("\t\t");
                      _builder.append("<< x->");
                      String _name_7 = at.getName();
                      _builder.append(_name_7, "\t\t");
                      _builder.append(" << \"_\"\t\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append(";");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("map<string, int>::iterator iter;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("if ((iter=noAutoIncIds.find(noAutoIncIdsEntry.str())) == noAutoIncIds.end()) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("// There is not yet a combination of the non autoinc attributes values in the hashtable");
            _builder.newLine();
            _builder.newLine();
            {
              ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
              String _JavaType_2 = _TheAutoIncrementableAttribute_1.JavaType();
              boolean _equals_2 = _JavaType_2.equals("Tag");
              if (_equals_2) {
                _builder.append("\t\t\t");
                _builder.append("// Initialize  ");
                ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
                String _name_8 = _TheAutoIncrementableAttribute_2.getName();
                _builder.append(_name_8, "\t\t\t");
                _builder.append(" .");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("x->");
                ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
                String _name_9 = _TheAutoIncrementableAttribute_3.getName();
                _builder.append(_name_9, "\t\t\t");
                _builder.append(" = Tag(0, TagType::");
                String _name_10 = table.getName();
                _builder.append(_name_10, "\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("//x->set");
                ASDMAttribute _TheAutoIncrementableAttribute_4 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_1 = _TheAutoIncrementableAttribute_4.UpperCaseName();
                _builder.append(_UpperCaseName_1, "\t\t\t");
                _builder.append("(Tag(0, TagType::");
                String _name_11 = table.getName();
                _builder.append(_name_11, "\t\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              } else {
                ASDMAttribute _TheAutoIncrementableAttribute_5 = table.TheAutoIncrementableAttribute();
                String _JavaType_3 = _TheAutoIncrementableAttribute_5.JavaType();
                boolean _equals_3 = _JavaType_3.equals("int");
                if (_equals_3) {
                  _builder.append("\t\t\t");
                  _builder.append("// Initialize  ");
                  ASDMAttribute _TheAutoIncrementableAttribute_6 = table.TheAutoIncrementableAttribute();
                  String _name_12 = _TheAutoIncrementableAttribute_6.getName();
                  _builder.append(_name_12, "\t\t\t");
                  _builder.append(" to 0.");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("x->");
                  ASDMAttribute _TheAutoIncrementableAttribute_7 = table.TheAutoIncrementableAttribute();
                  String _name_13 = _TheAutoIncrementableAttribute_7.getName();
                  _builder.append(_name_13, "\t\t\t");
                  _builder.append(" = 0;\t\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("//x->set");
                  ASDMAttribute _TheAutoIncrementableAttribute_8 = table.TheAutoIncrementableAttribute();
                  String _UpperCaseName_2 = _TheAutoIncrementableAttribute_8.UpperCaseName();
                  _builder.append(_UpperCaseName_2, "\t\t\t");
                  _builder.append("(0);");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t\t\t");
            _builder.append("// Record it in the map.\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("noAutoIncIds.insert(make_pair(noAutoIncIdsEntry.str(), 0));\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("} ");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("// There is already a combination of the non autoinc attributes values in the hashtable");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("// Increment its value.");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("int n = iter->second + 1; ");
            _builder.newLine();
            {
              ASDMAttribute _TheAutoIncrementableAttribute_9 = table.TheAutoIncrementableAttribute();
              String _JavaType_4 = _TheAutoIncrementableAttribute_9.JavaType();
              boolean _equals_4 = _JavaType_4.equals("Tag");
              if (_equals_4) {
                _builder.append("\t\t\t");
                _builder.append("// Initialize  ");
                ASDMAttribute _TheAutoIncrementableAttribute_10 = table.TheAutoIncrementableAttribute();
                String _name_14 = _TheAutoIncrementableAttribute_10.getName();
                _builder.append(_name_14, "\t\t\t");
                _builder.append(" to Tag(n).");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("//x->set");
                ASDMAttribute _TheAutoIncrementableAttribute_11 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_3 = _TheAutoIncrementableAttribute_11.UpperCaseName();
                _builder.append(_UpperCaseName_3, "\t\t\t");
                _builder.append("(Tag(n, TagType::");
                String _name_15 = table.getName();
                _builder.append(_name_15, "\t\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("x->");
                ASDMAttribute _TheAutoIncrementableAttribute_12 = table.TheAutoIncrementableAttribute();
                String _name_16 = _TheAutoIncrementableAttribute_12.getName();
                _builder.append(_name_16, "\t\t\t");
                _builder.append(" = Tag(n, TagType::");
                String _name_17 = table.getName();
                _builder.append(_name_17, "\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                ASDMAttribute _TheAutoIncrementableAttribute_13 = table.TheAutoIncrementableAttribute();
                String _JavaType_5 = _TheAutoIncrementableAttribute_13.JavaType();
                boolean _equals_5 = _JavaType_5.equals("int");
                if (_equals_5) {
                  _builder.append("\t\t\t");
                  _builder.append("// Initialize  ");
                  ASDMAttribute _TheAutoIncrementableAttribute_14 = table.TheAutoIncrementableAttribute();
                  String _name_18 = _TheAutoIncrementableAttribute_14.getName();
                  _builder.append(_name_18, "\t\t\t");
                  _builder.append(" to n.\t\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("//x->set");
                  ASDMAttribute _TheAutoIncrementableAttribute_15 = table.TheAutoIncrementableAttribute();
                  String _UpperCaseName_4 = _TheAutoIncrementableAttribute_15.UpperCaseName();
                  _builder.append(_UpperCaseName_4, "\t\t\t");
                  _builder.append("(n);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("x->");
                  ASDMAttribute _TheAutoIncrementableAttribute_16 = table.TheAutoIncrementableAttribute();
                  String _name_19 = _TheAutoIncrementableAttribute_16.getName();
                  _builder.append(_name_19, "\t\t\t");
                  _builder.append(" = n;");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t\t\t");
            _builder.append("// Record it in the map.\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("noAutoIncIds.erase(iter);");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("noAutoIncIds.insert(make_pair(noAutoIncIdsEntry.str(), n));\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("row.push_back(x);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return x;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}\t ");
            _builder.newLine();
          } else {
            _builder.newLine();
            _builder.append("\t");
            String _name_20 = table.getName();
            _builder.append(_name_20, "\t");
            _builder.append("Row* ");
            String _name_21 = table.getName();
            _builder.append(_name_21, "\t");
            _builder.append("Table::add(");
            String _name_22 = table.getName();
            _builder.append(_name_22, "\t");
            _builder.append("Row* x) {");
            _builder.newLineIfNotEmpty();
            {
              List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
              int _size_1 = _requiredValueAttributes.size();
              boolean _notEquals_1 = (_size_1 != 0);
              if (_notEquals_1) {
                _builder.append("\t\t");
                String _name_23 = table.getName();
                _builder.append(_name_23, "\t\t");
                _builder.append("Row* aRow = lookup(");
                _builder.newLineIfNotEmpty();
                {
                  List<ASDMAttribute> _requiredValueAttributes_1 = table.getRequiredValueAttributes();
                  boolean _hasElements_1 = false;
                  for(final ASDMAttribute param_1 : _requiredValueAttributes_1) {
                    if (!_hasElements_1) {
                      _hasElements_1 = true;
                    } else {
                      _builder.appendImmediate(",", "\t\t");
                    }
                    _builder.append("\t\t");
                    _builder.append("x->get");
                    String _UpperCaseName_5 = param_1.UpperCaseName();
                    _builder.append(_UpperCaseName_5, "\t\t");
                    _builder.append("()");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append(");");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("if (aRow) return aRow;");
                _builder.newLine();
              }
            }
            _builder.newLine();
            {
              ASDMAttribute _TheAutoIncrementableAttribute_17 = table.TheAutoIncrementableAttribute();
              String _JavaType_6 = _TheAutoIncrementableAttribute_17.JavaType();
              boolean _equals_6 = _JavaType_6.equals("Tag");
              if (_equals_6) {
                _builder.append("\t\t");
                _builder.append("// Autoincrement ");
                ASDMAttribute _TheAutoIncrementableAttribute_18 = table.TheAutoIncrementableAttribute();
                String _name_24 = _TheAutoIncrementableAttribute_18.getName();
                _builder.append(_name_24, "\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("x->set");
                ASDMAttribute _TheAutoIncrementableAttribute_19 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_6 = _TheAutoIncrementableAttribute_19.UpperCaseName();
                _builder.append(_UpperCaseName_6, "\t\t");
                _builder.append("(Tag(size(), TagType::");
                String _name_25 = table.getName();
                _builder.append(_name_25, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              } else {
                ASDMAttribute _TheAutoIncrementableAttribute_20 = table.TheAutoIncrementableAttribute();
                String _JavaType_7 = _TheAutoIncrementableAttribute_20.JavaType();
                boolean _equals_7 = _JavaType_7.equals("int");
                if (_equals_7) {
                  _builder.append("\t\t");
                  _builder.append("x->set");
                  ASDMAttribute _TheAutoIncrementableAttribute_21 = table.TheAutoIncrementableAttribute();
                  String _UpperCaseName_7 = _TheAutoIncrementableAttribute_21.UpperCaseName();
                  _builder.append(_UpperCaseName_7, "\t\t");
                  _builder.append("(size());");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("row.push_back(x);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("privateRows.push_back(x);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("x->isAdded(true);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return x;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      } else {
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Add a row.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @throws DuplicateKey Thrown if the new row has a key that is already in the table.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @param x A pointer to the row to be added.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @return x");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        String _name_26 = table.getName();
        _builder.append(_name_26, "");
        _builder.append("Row* ");
        String _name_27 = table.getName();
        _builder.append(_name_27, "");
        _builder.append("Table::add(");
        String _name_28 = table.getName();
        _builder.append(_name_28, "");
        _builder.append("Row* x) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if (getRowByKey(");
        {
          List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
          boolean _hasElements_2 = false;
          for(final ASDMAttribute attr : _keyAttributes) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder.appendImmediate(",", "\t");
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("x->get");
            String _UpperCaseName_8 = attr.UpperCaseName();
            _builder.append(_UpperCaseName_8, "\t");
            _builder.append("()");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          }
        }
        _builder.append("))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("//throw DuplicateKey(");
        TableKey _key = table.getKey();
        String _FieldNames4 = _key.FieldNames4();
        _builder.append(_FieldNames4, "\t\t");
        _builder.append(",\"");
        String _name_29 = table.getName();
        _builder.append(_name_29, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("throw DuplicateKey(\"Duplicate key exception in \",\"");
        String _name_30 = table.getName();
        _builder.append(_name_30, "\t\t");
        _builder.append("Table\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("row.push_back(x);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("privateRows.push_back(x);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("x->isAdded(true);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return x;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_31 = table.getName();
    _builder.append(_name_31, "\t");
    _builder.append("Table::addWithoutCheckingUnique(");
    String _name_32 = table.getName();
    _builder.append(_name_32, "\t");
    _builder.append("Row * x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (getRowByKey(");
    {
      List<ASDMAttribute> _keyAttributes_1 = table.getKeyAttributes();
      boolean _hasElements_3 = false;
      for(final ASDMAttribute attr_1 : _keyAttributes_1) {
        if (!_hasElements_3) {
          _hasElements_3 = true;
        } else {
          _builder.appendImmediate(",", "\t\t");
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("x->get");
        String _UpperCaseName_9 = attr_1.UpperCaseName();
        _builder.append(_UpperCaseName_9, "\t\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      }
    }
    _builder.append(") != (");
    String _name_33 = table.getName();
    _builder.append(_name_33, "\t\t");
    _builder.append("Row *) 0) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw DuplicateKey(\"Dupicate key exception in \", \"");
    String _name_34 = table.getName();
    _builder.append(_name_34, "\t\t\t");
    _builder.append("Table\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("row.push_back(x);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("privateRows.push_back(x);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x->isAdded(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addAndCheckToTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      boolean _not = (!_NoAutoIncrementableAttribute);
      if (_not) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* If this table has an autoincrementable attribute then check if *x verifies the rule of uniqueness and throw exception if not.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Check if *x verifies the key uniqueness rule and throw an exception if not.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Append x to its table.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @param x a pointer on the row to be appended.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @returns a pointer on x.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @throws DuplicateKey");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @throws UniquenessViolationException ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        String _name = table.getName();
        _builder.append(_name, "");
        _builder.append("Row*  ");
        String _name_1 = table.getName();
        _builder.append(_name_1, "");
        _builder.append("Table::checkAndAdd(");
        String _name_2 = table.getName();
        _builder.append(_name_2, "");
        _builder.append("Row* x, bool skipCheckUniqueness) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("ArrayTime startTime = x->get");
        ASDMAttribute _TemporalAttribute = table.TemporalAttribute();
        String _UpperCaseName = _TemporalAttribute.UpperCaseName();
        _builder.append(_UpperCaseName, "\t");
        _builder.append("().getStart();\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// Determine the entry in the context map from the appropriate attributes.");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("string k = Key(");
        {
          List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes = table.KeyNoAutoIncNoTimeAttributes();
          boolean _hasElements = false;
          for(final ASDMAttribute attr : _KeyNoAutoIncNoTimeAttributes) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "\t");
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("x->get");
            String _UpperCaseName_1 = attr.UpperCaseName();
            _builder.append(_UpperCaseName_1, "\t");
            _builder.append("()");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t               ");
          }
        }
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if (!skipCheckUniqueness) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("// Uniqueness Rule Check");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if (context.find(k) != context.end()) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("for (unsigned int i = 0;  i < context[k].size(); i++) ");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("for (unsigned int j = 0; j < context[k][i].size(); j++)");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("if (");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("(context[k][i][j]->get");
        ASDMAttribute _TemporalAttribute_1 = table.TemporalAttribute();
        String _UpperCaseName_2 = _TemporalAttribute_1.UpperCaseName();
        _builder.append(_UpperCaseName_2, "\t\t\t\t\t\t");
        _builder.append("().getStart().equals(startTime)) ");
        _builder.newLineIfNotEmpty();
        {
          List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
          boolean _hasElements_1 = false;
          for(final ASDMAttribute attr_1 : _requiredValueAttributes) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate("\n", "\t\t\t\t");
            }
            _builder.append("\t\t\t\t");
            _builder.append("&& (context[k][i][j]->get");
            String _UpperCaseName_3 = attr_1.UpperCaseName();
            _builder.append(_UpperCaseName_3, "\t\t\t\t");
            _builder.append("() == x->get");
            String _UpperCaseName_4 = attr_1.UpperCaseName();
            _builder.append(_UpperCaseName_4, "\t\t\t\t");
            _builder.append("())");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t\t\t");
        _builder.append(")");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("throw UniquenessViolationException(\"Uniqueness violation exception in table ");
        String _name_3 = table.getName();
        _builder.append(_name_3, "\t\t\t\t\t\t");
        _builder.append("Table\");\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// Good, now it\'s time to insert the row x, possibly triggering a DuplicateKey exception.\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("ID_TIME_ROWS dummyPlane;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// Determine the integer representation of the identifier of the row (x) to be inserted. ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("int id = ");
        {
          ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
          String _CppType = _TheAutoIncrementableAttribute.CppType();
          boolean _equals = _CppType.equals("Tag");
          if (_equals) {
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("Integer.parseInt(x->get");
            ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
            String _UpperCaseName_5 = _TheAutoIncrementableAttribute_1.UpperCaseName();
            _builder.append(_UpperCaseName_5, "\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("x->get");
            ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
            String _UpperCaseName_6 = _TheAutoIncrementableAttribute_2.UpperCaseName();
            _builder.append(_UpperCaseName_6, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if (context.find(k) != context.end()) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if (id >= (int) context[k].size()) ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("context[k].resize(id+1);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("// This ");
        ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
        String _name_4 = _TheAutoIncrementableAttribute_3.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append(" \'s value has already rows for this context.");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("// Check that there is not yet a row with the same time. (simply check start time)");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("// If there is such a row then trigger a Duplicate Key Exception.");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("for (unsigned int j = 0; j < context[k][id].size(); j++)");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("if (context[k][id][j]->get");
        ASDMAttribute _TemporalAttribute_2 = table.TemporalAttribute();
        String _UpperCaseName_7 = _TemporalAttribute_2.UpperCaseName();
        _builder.append(_UpperCaseName_7, "\t\t\t\t");
        _builder.append("().getStart().equals(startTime))");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("throw DuplicateKey(\"Duplicate key exception in \", \"");
        String _name_5 = table.getName();
        _builder.append(_name_5, "\t\t\t\t\t");
        _builder.append("Table\"); ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("context[k] = dummyPlane;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("context[k].resize(id+1);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return insertByStartTime(x, context[k][id]);");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.newLine();
        {
          List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_1 = table.KeyNoAutoIncNoTimeAttributes();
          int _size = _KeyNoAutoIncNoTimeAttributes_1.size();
          boolean _notEquals = (_size != 0);
          if (_notEquals) {
            _builder.newLine();
            _builder.newLine();
            {
              ASDMAttribute _TemporalAttribute_3 = table.TemporalAttribute();
              String _JavaType = _TemporalAttribute_3.JavaType();
              boolean _equals_1 = _JavaType.equals("ArrayTimeInterval");
              if (_equals_1) {
                _builder.newLine();
                String _name_6 = table.getName();
                _builder.append(_name_6, "");
                _builder.append("Row*  ");
                String _name_7 = table.getName();
                _builder.append(_name_7, "");
                _builder.append("Table::checkAndAdd(");
                String _name_8 = table.getName();
                _builder.append(_name_8, "");
                _builder.append("Row* x, bool ) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("string keystr = Key(");
                {
                  List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_2 = table.KeyNoAutoIncNoTimeAttributes();
                  boolean _hasElements_2 = false;
                  for(final ASDMAttribute attr_2 : _KeyNoAutoIncNoTimeAttributes_2) {
                    if (!_hasElements_2) {
                      _hasElements_2 = true;
                    } else {
                      _builder.appendImmediate(",", "\t");
                    }
                    _builder.append(" ");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("x->get");
                    String _UpperCaseName_8 = attr_2.UpperCaseName();
                    _builder.append(_UpperCaseName_8, "\t");
                    _builder.append("() ");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t\t   ");
                  }
                }
                _builder.append("); ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("if (context.find(keystr) == context.end()) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("vector<");
                String _name_9 = table.getName();
                _builder.append(_name_9, "\t\t");
                _builder.append("Row *> v;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("context[keystr] = v;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("vector<");
                String _name_10 = table.getName();
                _builder.append(_name_10, "\t");
                _builder.append("Row*>& found = context.find(keystr)->second;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("return insertByStartTime(x, found);\t\t\t");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              } else {
                ASDMAttribute _TemporalAttribute_4 = table.TemporalAttribute();
                String _JavaType_1 = _TemporalAttribute_4.JavaType();
                boolean _equals_2 = _JavaType_1.equals("ArrayTime");
                if (_equals_2) {
                  _builder.newLine();
                  String _name_11 = table.getName();
                  _builder.append(_name_11, "");
                  _builder.append("Row*  ");
                  String _name_12 = table.getName();
                  _builder.append(_name_12, "");
                  _builder.append("Table::checkAndAdd(");
                  String _name_13 = table.getName();
                  _builder.append(_name_13, "");
                  _builder.append("Row* x, bool ) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("string keystr = Key(");
                  {
                    List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_3 = table.KeyNoAutoIncNoTimeAttributes();
                    boolean _hasElements_3 = false;
                    for(final ASDMAttribute attr_3 : _KeyNoAutoIncNoTimeAttributes_3) {
                      if (!_hasElements_3) {
                        _hasElements_3 = true;
                      } else {
                        _builder.appendImmediate(",", "\t");
                      }
                      _builder.append(" ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("x->get");
                      String _UpperCaseName_9 = attr_3.UpperCaseName();
                      _builder.append(_UpperCaseName_9, "\t");
                      _builder.append("() ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t\t\t\t   ");
                    }
                  }
                  _builder.append("); ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("if (context.find(keystr) == context.end()) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("vector<");
                  String _name_14 = table.getName();
                  _builder.append(_name_14, "\t\t");
                  _builder.append("Row *> v;");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("context[keystr] = v;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("vector<");
                  String _name_15 = table.getName();
                  _builder.append(_name_15, "\t");
                  _builder.append("Row*>& found = context.find(keystr)->second;");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("return insertByTime(x, found);\t");
                  _builder.newLine();
                  _builder.append("}\t\t\t\t");
                  _builder.newLine();
                }
              }
            }
          } else {
            _builder.newLine();
            String _name_16 = table.getName();
            _builder.append(_name_16, "");
            _builder.append("Row*  ");
            String _name_17 = table.getName();
            _builder.append(_name_17, "");
            _builder.append("Table::checkAndAdd(");
            String _name_18 = table.getName();
            _builder.append(_name_18, "");
            _builder.append("Row* x, bool) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("if (getRowByKey(");
            _builder.newLine();
            {
              List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
              boolean _hasElements_4 = false;
              for(final ASDMAttribute param : _keyAttributes) {
                if (!_hasElements_4) {
                  _hasElements_4 = true;
                } else {
                  _builder.appendImmediate(",", "\t");
                }
                _builder.append("\t");
                _builder.append("x->get");
                String _UpperCaseName_10 = param.UpperCaseName();
                _builder.append(_UpperCaseName_10, "\t");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append(")) throw DuplicateKey(\"Duplicate key exception in \", \"");
            String _name_19 = table.getName();
            _builder.append(_name_19, "\t");
            _builder.append("Table\");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return insertByStartTime(x, row);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence addAndCheckToNotTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* If this table has an autoincrementable attribute then check if *x verifies the rule of uniqueness and throw exception if not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if *x verifies the key uniqueness rule and throw an exception if not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Append x to its table.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param x a pointer on the row to be appended.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @returns a pointer on x.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @throws DuplicateKey");
    _builder.newLine();
    {
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      boolean _not = (!_NoAutoIncrementableAttribute);
      if (_not) {
        _builder.append(" ");
        _builder.append("* @throws UniquenessViolationException");
        _builder.newLine();
      }
    }
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Row*  ");
    String _name_1 = table.getName();
    _builder.append(_name_1, "");
    _builder.append("Table::checkAndAdd(");
    String _name_2 = table.getName();
    _builder.append(_name_2, "");
    _builder.append("Row* x, bool skipCheckUniqueness)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (!skipCheckUniqueness) { ");
    _builder.newLine();
    {
      boolean _NoAutoIncrementableAttribute_1 = table.NoAutoIncrementableAttribute();
      boolean _not_1 = (!_NoAutoIncrementableAttribute_1);
      if (_not_1) {
        {
          List<ASDMAttribute> _requiredNoAutoIncrementableAttributes = table.getRequiredNoAutoIncrementableAttributes();
          int _size = _requiredNoAutoIncrementableAttributes.size();
          boolean _notEquals = (_size != 0);
          if (_notEquals) {
            _builder.append("if (lookup(");
            _builder.newLine();
            {
              List<ASDMAttribute> _requiredNoAutoIncrementableAttributes_1 = table.getRequiredNoAutoIncrementableAttributes();
              boolean _hasElements = false;
              for(final ASDMAttribute param : _requiredNoAutoIncrementableAttributes_1) {
                if (!_hasElements) {
                  _hasElements = true;
                } else {
                  _builder.appendImmediate(",", "");
                }
                _builder.append("x->get");
                String _UpperCaseName = param.UpperCaseName();
                _builder.append(_UpperCaseName, "");
                _builder.append("()");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(")) throw UniquenessViolationException();");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (getRowByKey(");
    _builder.newLine();
    {
      List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
      boolean _hasElements_1 = false;
      for(final ASDMAttribute param_1 : _keyAttributes) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append("x->get");
        String _UpperCaseName_1 = param_1.UpperCaseName();
        _builder.append(_UpperCaseName_1, "");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append(")) throw DuplicateKey(\"Duplicate key exception in \", \"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Table\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("row.push_back(x);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("privateRows.push_back(x);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("x->isAdded(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return x;\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toFile(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::toFile(string directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (!directoryExists(directory.c_str()) &&");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("!createPath(directory.c_str())) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Could not create directory \" , directory);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string fileName = directory + \"/");
    String _name_1 = table.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ofstream tableout(fileName.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + fileName + \" to write \", \"");
    String _name_2 = table.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (fileAsBin) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableout << MIMEXMLPart();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableout << toXML() << endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tableout.close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + fileName, \"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (fileAsBin) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// write the bin serialized");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string fileName = directory + \"/");
    String _name_4 = table.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(".bin\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("ofstream tableout(fileName.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + fileName + \" to write \", \"");
    String _name_5 = table.getName();
    _builder.append(_name_5, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("tableout << toMIME() << endl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tableout.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + fileName, \"");
    String _name_6 = table.getName();
    _builder.append(_name_6, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence append(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::append(");
    String _name_1 = table.getName();
    _builder.append(_name_1, "");
    _builder.append("Row *x) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("privateRows.push_back(x);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("x->isAdded(true);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getters(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("vector<");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Row *> ");
    String _name_1 = table.getName();
    _builder.append(_name_1, "");
    _builder.append("Table::get() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("checkPresenceInMemory();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return privateRows;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("const vector<");
    String _name_2 = table.getName();
    _builder.append(_name_2, "");
    _builder.append("Row *>& ");
    String _name_3 = table.getName();
    _builder.append(_name_3, "");
    _builder.append("Table::get() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("const_cast<");
    String _name_4 = table.getName();
    _builder.append(_name_4, "\t");
    _builder.append("Table&>(*this).checkPresenceInMemory();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return privateRows;");
    _builder.newLine();
    _builder.append("}\t ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence gettersTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
      if (_NoAutoIncrementableAttribute) {
        _builder.newLine();
        {
          List<ASDMAttribute> _keyNoAutoIncNoTimeAttributes = table.getKeyNoAutoIncNoTimeAttributes();
          int _size = _keyNoAutoIncNoTimeAttributes.size();
          boolean _notEquals = (_size != 0);
          if (_notEquals) {
            _builder.append("vector<");
            String _name = table.getName();
            _builder.append(_name, "");
            _builder.append("Row *> *");
            String _name_1 = table.getName();
            _builder.append(_name_1, "");
            _builder.append("Table::getByContext(");
            String _KeyNoAutoIncNoTimeCpp = table.KeyNoAutoIncNoTimeCpp();
            _builder.append(_KeyNoAutoIncNoTimeCpp, "");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("//if (getContainer().checkRowUniqueness() == false)");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("//throw IllegalAccessException (\"The method \'getByContext\' can\'t be called because the dataset has been built without checking the row uniqueness.\", \"");
            String _name_2 = table.getName();
            _builder.append(_name_2, "\t");
            _builder.append("Table\");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("heckPresenceInMemory();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("string k = Key(");
            String _KeyNoAutoIncNoTimeAttributesList = table.KeyNoAutoIncNoTimeAttributesList();
            _builder.append(_KeyNoAutoIncNoTimeAttributesList, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t");
            _builder.append("if (context.find(k) == context.end()) return 0;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("else return &(context[k]);\t\t");
            _builder.newLine();
            _builder.append("}\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    {
      String _KeyCpp = table.KeyCpp();
      boolean _equals = _KeyCpp.equals("");
      boolean _not = (!_equals);
      if (_not) {
        {
          boolean _NoAutoIncrementableAttribute_1 = table.NoAutoIncrementableAttribute();
          if (_NoAutoIncrementableAttribute_1) {
            _builder.newLine();
            {
              List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes = table.KeyNoAutoIncNoTimeAttributes();
              int _size_1 = _KeyNoAutoIncNoTimeAttributes.size();
              boolean _notEquals_1 = (_size_1 != 0);
              if (_notEquals_1) {
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("/*");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** Returns a ");
                String _name_3 = table.getName();
                _builder.append(_name_3, "\t ");
                _builder.append("Row* given a key.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** @return a pointer to the row having the key whose values are passed as parameters, or 0 if");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** no row exists for that key.");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("**");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("*/");
                _builder.newLine();
                {
                  ASDMAttribute _TemporalAttribute = table.TemporalAttribute();
                  String _CppType = _TemporalAttribute.CppType();
                  boolean _equals_1 = _CppType.equals("ArrayTimeInterval");
                  if (_equals_1) {
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    String _name_4 = table.getName();
                    _builder.append(_name_4, "\t\t ");
                    _builder.append("Row* ");
                    String _name_5 = table.getName();
                    _builder.append(_name_5, "\t\t ");
                    _builder.append("Table::getRowByKey(");
                    String _KeyCpp_1 = table.KeyCpp();
                    _builder.append(_KeyCpp_1, "\t\t ");
                    _builder.append(")  {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t");
                    _builder.append("checkPresenceInMemory();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("string keystr = Key(");
                    String _KeyNoAutoIncNoTimeAttributesList_1 = table.KeyNoAutoIncNoTimeAttributesList();
                    _builder.append(_KeyNoAutoIncNoTimeAttributesList_1, "\t\t  \t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("vector<");
                    String _name_6 = table.getName();
                    _builder.append(_name_6, "\t\t  \t\t");
                    _builder.append("Row *> row;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("if ( context.find(keystr)  == context.end()) return 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("row = context[keystr];");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("// Is the vector empty...impossible in principle !");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("if (row.size() == 0) return 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("// Only one element in the vector");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("if (row.size() == 1) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    String _name_7 = table.getName();
                    _builder.append(_name_7, "\t\t  \t\t\t");
                    _builder.append("Row* r = row.at(0);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("if ( r->get");
                    ASDMAttribute _TemporalAttribute_1 = table.TemporalAttribute();
                    String _UpperCaseName = _TemporalAttribute_1.UpperCaseName();
                    _builder.append(_UpperCaseName, "\t\t  \t\t\t");
                    _builder.append("().contains(timeInterval.getStart()))");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t\t");
                    _builder.append("return r;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("else");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t\t");
                    _builder.append("return 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("// Optimizations");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    String _name_8 = table.getName();
                    _builder.append(_name_8, "\t\t  \t\t");
                    _builder.append("Row* last = row.at(row.size()-1);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("if (timeInterval.getStart().get() >= (last->get");
                    ASDMAttribute _TemporalAttribute_2 = table.TemporalAttribute();
                    String _UpperCaseName_1 = _TemporalAttribute_2.UpperCaseName();
                    _builder.append(_UpperCaseName_1, "\t\t  \t\t");
                    _builder.append("().getStart().get()+last->get");
                    ASDMAttribute _TemporalAttribute_3 = table.TemporalAttribute();
                    String _UpperCaseName_2 = _TemporalAttribute_3.UpperCaseName();
                    _builder.append(_UpperCaseName_2, "\t\t  \t\t");
                    _builder.append("().getDuration().get())) return 0;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    String _name_9 = table.getName();
                    _builder.append(_name_9, "\t\t  \t\t");
                    _builder.append("Row* first = row.at(0);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("if (timeInterval.getStart().get() < first->get");
                    ASDMAttribute _TemporalAttribute_4 = table.TemporalAttribute();
                    String _UpperCaseName_3 = _TemporalAttribute_4.UpperCaseName();
                    _builder.append(_UpperCaseName_3, "\t\t  \t\t");
                    _builder.append("().getStart().get()) return 0;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("// More than one row ");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("// Let\'s use a dichotomy method for the general case..\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("int k0 = 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("int k1 = row.size() - 1;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    String _name_10 = table.getName();
                    _builder.append(_name_10, "\t\t  \t\t");
                    _builder.append("Row* r = 0;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.append("while (k0!=k1) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("// Is the start time contained in the time interval of row #k0");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("r = row.at(k0);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("if (r->get");
                    ASDMAttribute _TemporalAttribute_5 = table.TemporalAttribute();
                    String _UpperCaseName_4 = _TemporalAttribute_5.UpperCaseName();
                    _builder.append(_UpperCaseName_4, "\t\t  \t\t\t");
                    _builder.append("().contains(timeInterval.getStart())) return r;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("// Is the start contained in the time interval of row #k1");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append(" \t\t\t");
                    _builder.append("r = row.at(k1);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("if (r->get");
                    ASDMAttribute _TemporalAttribute_6 = table.TemporalAttribute();
                    String _UpperCaseName_5 = _TemporalAttribute_6.UpperCaseName();
                    _builder.append(_UpperCaseName_5, "\t\t \t\t\t");
                    _builder.append("().contains(timeInterval.getStart())) return r;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("// Are the rows #k0 and #k1 consecutive");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("// Then we know for sure that there is no row containing the start of timeInterval");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("if (k1==(k0+1)) return 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("// Proceed to the next step of dichotomy.");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("r = row.at((k0+k1)/2);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("if ( timeInterval.getStart().get() <= r->get");
                    ASDMAttribute _TemporalAttribute_7 = table.TemporalAttribute();
                    String _UpperCaseName_6 = _TemporalAttribute_7.UpperCaseName();
                    _builder.append(_UpperCaseName_6, "\t\t \t\t\t");
                    _builder.append("().getStart().get())");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t\t");
                    _builder.append("k1 = (k0 + k1) / 2;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t");
                    _builder.append("else");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t\t\t");
                    _builder.append("k0 = (k0 + k1) / 2;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t\t");
                    _builder.append("return 0;\t");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t ");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    ASDMAttribute _TemporalAttribute_8 = table.TemporalAttribute();
                    String _CppType_1 = _TemporalAttribute_8.CppType();
                    boolean _equals_2 = _CppType_1.equals("ArrayTime");
                    if (_equals_2) {
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      String _name_11 = table.getName();
                      _builder.append(_name_11, "\t\t ");
                      _builder.append("Row* ");
                      String _name_12 = table.getName();
                      _builder.append(_name_12, "\t\t ");
                      _builder.append("Table::getRowByKey(");
                      String _KeyCpp_2 = table.KeyCpp();
                      _builder.append(_KeyCpp_2, "\t\t ");
                      _builder.append(")  {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t");
                      _builder.append("checkPresenceInMemory();");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("string keystr = Key(");
                      String _KeyNoAutoIncNoTimeAttributesList_2 = table.KeyNoAutoIncNoTimeAttributesList();
                      _builder.append(_KeyNoAutoIncNoTimeAttributesList_2, "\t\t \t");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t");
                      _builder.append("if (context.find(keystr) == context.end()) return 0;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t");
                      _builder.append("vector<");
                      String _name_13 = table.getName();
                      _builder.append(_name_13, "\t\t  \t");
                      _builder.append("Row* > row = context[keystr];");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append(" \t");
                      _builder.append("// Is the vector empty...impossible in principle !");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("if (row.size() == 0) return 0;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("// Only one element in the vector");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("if (row.size() == 1) {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("if (time.get() == row.at(0)->getTime().get())");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("return row.at(0);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("else");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("return 0;\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("// Optimizations ");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      String _name_14 = table.getName();
                      _builder.append(_name_14, "\t\t \t");
                      _builder.append("Row* last = row.at(row.size()-1);\t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("if (time.get() > last->get");
                      ASDMAttribute _TemporalAttribute_9 = table.TemporalAttribute();
                      String _UpperCaseName_7 = _TemporalAttribute_9.UpperCaseName();
                      _builder.append(_UpperCaseName_7, "\t\t \t");
                      _builder.append("().get()) return 0;");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      String _name_15 = table.getName();
                      _builder.append(_name_15, "\t\t \t");
                      _builder.append("Row* first = row.at(0);");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("if (time.get() < first->get");
                      ASDMAttribute _TemporalAttribute_10 = table.TemporalAttribute();
                      String _UpperCaseName_8 = _TemporalAttribute_10.UpperCaseName();
                      _builder.append(_UpperCaseName_8, "\t\t \t");
                      _builder.append("().get()) return 0;");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("// More than one row");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("// let\'s use a dichotomy method for the general case..\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("int k0 = 0;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("int k1 = row.size() - 1;    \t  ");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("while (k0 !=  k1 ) {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("if (time.get() == row.at(k0)->get");
                      ASDMAttribute _TemporalAttribute_11 = table.TemporalAttribute();
                      String _UpperCaseName_9 = _TemporalAttribute_11.UpperCaseName();
                      _builder.append(_UpperCaseName_9, "\t\t \t\t");
                      _builder.append("().get()) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("return row.at(k0);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("else if (time.get() == row.at(k1)->get");
                      ASDMAttribute _TemporalAttribute_12 = table.TemporalAttribute();
                      String _UpperCaseName_10 = _TemporalAttribute_12.UpperCaseName();
                      _builder.append(_UpperCaseName_10, "\t\t \t\t");
                      _builder.append("().get()) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("return row.at(k1);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("else {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("if (time.get() <= row.at((k0+k1)/2)->get");
                      ASDMAttribute _TemporalAttribute_13 = table.TemporalAttribute();
                      String _UpperCaseName_11 = _TemporalAttribute_13.UpperCaseName();
                      _builder.append(_UpperCaseName_11, "\t\t \t\t\t");
                      _builder.append("().get())");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t\t");
                      _builder.append("k1 = (k0 + k1) / 2;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t");
                      _builder.append("else");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t\t\t");
                      _builder.append("k0 = (k0 + k1) / 2;\t\t\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("} \t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("\t\t");
                      _builder.append("return 0; \t\t\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                }
              } else {
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("/*");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** Returns a ");
                String _name_16 = table.getName();
                _builder.append(_name_16, "\t ");
                _builder.append("Row* given a key.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** @return a pointer to the row having the key whose values are passed as parameters, or 0 if");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** no row exists for that key.");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("**");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("*/");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                String _name_17 = table.getName();
                _builder.append(_name_17, "\t ");
                _builder.append("Row* ");
                String _name_18 = table.getName();
                _builder.append(_name_18, "\t ");
                _builder.append("Table::getRowByKey(");
                String _KeyCpp_3 = table.KeyCpp();
                _builder.append(_KeyCpp_3, "\t ");
                _builder.append(")  {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" \t");
                _builder.append("checkPresenceInMemory();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                String _name_19 = table.getName();
                _builder.append(_name_19, "\t\t");
                _builder.append("Row* aRow = 0;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("for (unsigned int i = 0; i < privateRows.size(); i++) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("aRow = row.at(i);");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("if (aRow->");
                ASDMAttribute _TemporalAttribute_14 = table.TemporalAttribute();
                String _name_20 = _TemporalAttribute_14.getName();
                _builder.append(_name_20, "\t\t\t");
                _builder.append(".contains(");
                ASDMAttribute _TemporalAttribute_15 = table.TemporalAttribute();
                String _name_21 = _TemporalAttribute_15.getName();
                _builder.append(_name_21, "\t\t\t");
                _builder.append(".getStart())) return aRow;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return 0;\t\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          } else {
            _builder.newLine();
            {
              List<ASDMAttribute> _KeyNoAutoIncNoTimeAttributes_1 = table.KeyNoAutoIncNoTimeAttributes();
              int _size_2 = _KeyNoAutoIncNoTimeAttributes_1.size();
              boolean _notEquals_2 = (_size_2 != 0);
              if (_notEquals_2) {
                _builder.append("\t");
                _builder.append(" ");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("/*");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** Returns a ");
                String _name_22 = table.getName();
                _builder.append(_name_22, "\t ");
                _builder.append("Row* given a key.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** @return a pointer to the row having the key whose values are passed as parameters, or 0 if");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("** no row exists for that key.");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("**");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("*/");
                _builder.newLine();
                _builder.append("\t");
                String _name_23 = table.getName();
                _builder.append(_name_23, "\t");
                _builder.append("Row* ");
                String _name_24 = table.getName();
                _builder.append(_name_24, "\t");
                _builder.append("Table::getRowByKey(");
                String _KeyCpp_4 = table.KeyCpp();
                _builder.append(_KeyCpp_4, "\t");
                _builder.append(")  {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("checkPresenceInMemory();\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("ArrayTime start = ");
                ASDMAttribute _TemporalAttribute_16 = table.TemporalAttribute();
                String _name_25 = _TemporalAttribute_16.getName();
                _builder.append(_name_25, "\t\t");
                _builder.append(".getStart();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("map<string, ID_TIME_ROWS >::iterator mapIter;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("if ((mapIter = context.find(Key(");
                String _KeyNoAutoIncNoTimeAttributesList_3 = table.KeyNoAutoIncNoTimeAttributesList();
                _builder.append(_KeyNoAutoIncNoTimeAttributesList_3, "\t\t");
                _builder.append("))) != context.end()) {");
                _builder.newLineIfNotEmpty();
                {
                  ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
                  String _CppType_2 = _TheAutoIncrementableAttribute.CppType();
                  boolean _equals_3 = _CppType_2.equals("Tag");
                  if (_equals_3) {
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("int id = Integer.parseInt(");
                    ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
                    String _name_26 = _TheAutoIncrementableAttribute_1.getName();
                    _builder.append(_name_26, "\t\t\t");
                    _builder.append(".getId());");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("int id = ");
                    ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
                    String _name_27 = _TheAutoIncrementableAttribute_2.getName();
                    _builder.append(_name_27, "\t\t\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("if (id < (int) ((*mapIter).second).size()) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("vector <");
                String _name_28 = table.getName();
                _builder.append(_name_28, "\t\t\t\t");
                _builder.append("Row*>::iterator rowIter;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("for (rowIter = ((*mapIter).second)[id].begin(); rowIter != ((*mapIter).second)[id].end(); rowIter++) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t\t\t");
                _builder.append("if ((*rowIter)->get");
                ASDMAttribute _TemporalAttribute_17 = table.TemporalAttribute();
                String _UpperCaseName_12 = _TemporalAttribute_17.UpperCaseName();
                _builder.append(_UpperCaseName_12, "\t\t\t\t\t");
                _builder.append("().contains(");
                ASDMAttribute _TemporalAttribute_18 = table.TemporalAttribute();
                String _name_29 = _TemporalAttribute_18.getName();
                _builder.append(_name_29, "\t\t\t\t\t");
                _builder.append("))");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t\t\t");
                _builder.append("return *rowIter; ");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return 0;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("/*");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("* Returns a vector of pointers on rows whose key element ");
                ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
                String _name_30 = _TheAutoIncrementableAttribute_3.getName();
                _builder.append(_name_30, "\t ");
                _builder.append(" ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("* is equal to the parameter ");
                ASDMAttribute _TheAutoIncrementableAttribute_4 = table.TheAutoIncrementableAttribute();
                String _name_31 = _TheAutoIncrementableAttribute_4.getName();
                _builder.append(_name_31, "\t ");
                _builder.append(".");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("* @return a vector of vector <");
                String _name_32 = table.getName();
                _builder.append(_name_32, "\t ");
                _builder.append("Row *>. A returned vector of size 0 means that no row has been found.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("* @param ");
                ASDMAttribute _TheAutoIncrementableAttribute_5 = table.TheAutoIncrementableAttribute();
                String _name_33 = _TheAutoIncrementableAttribute_5.getName();
                _builder.append(_name_33, "\t ");
                _builder.append(" ");
                ASDMAttribute _TheAutoIncrementableAttribute_6 = table.TheAutoIncrementableAttribute();
                String _CppType_3 = _TheAutoIncrementableAttribute_6.CppType();
                _builder.append(_CppType_3, "\t ");
                _builder.append(" contains the value of");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("* the autoincrementable attribute that is looked up in the table.");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("*/");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("vector <");
                String _name_34 = table.getName();
                _builder.append(_name_34, "\t ");
                _builder.append("Row *>  ");
                String _name_35 = table.getName();
                _builder.append(_name_35, "\t ");
                _builder.append("Table::getRowBy");
                ASDMAttribute _TheAutoIncrementableAttribute_7 = table.TheAutoIncrementableAttribute();
                String _UpperCaseName_13 = _TheAutoIncrementableAttribute_7.UpperCaseName();
                _builder.append(_UpperCaseName_13, "\t ");
                _builder.append("(");
                ASDMAttribute _TheAutoIncrementableAttribute_8 = table.TheAutoIncrementableAttribute();
                String _CppType_4 = _TheAutoIncrementableAttribute_8.CppType();
                _builder.append(_CppType_4, "\t ");
                _builder.append(" ");
                ASDMAttribute _TheAutoIncrementableAttribute_9 = table.TheAutoIncrementableAttribute();
                String _name_36 = _TheAutoIncrementableAttribute_9.getName();
                _builder.append(_name_36, "\t ");
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("checkPresenceInMemory();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("vector<");
                String _name_37 = table.getName();
                _builder.append(_name_37, "\t\t");
                _builder.append("Row *> list;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("map<string, ID_TIME_ROWS >::iterator mapIter;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("for (mapIter=context.begin(); mapIter!=context.end(); mapIter++) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("int maxId = ((*mapIter).second).size();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("if (");
                ASDMAttribute _TheAutoIncrementableAttribute_10 = table.TheAutoIncrementableAttribute();
                String _name_38 = _TheAutoIncrementableAttribute_10.getName();
                _builder.append(_name_38, "\t\t\t");
                _builder.append(" < maxId) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("vector<");
                String _name_39 = table.getName();
                _builder.append(_name_39, "\t\t\t\t");
                _builder.append("Row *>::iterator rowIter;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t");
                _builder.append("for (rowIter=((*mapIter).second)[");
                ASDMAttribute _TheAutoIncrementableAttribute_11 = table.TheAutoIncrementableAttribute();
                String _name_40 = _TheAutoIncrementableAttribute_11.getName();
                _builder.append(_name_40, "\t\t\t\t");
                _builder.append("].begin(); ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t     ");
                _builder.append("rowIter!=((*mapIter).second)[");
                ASDMAttribute _TheAutoIncrementableAttribute_12 = table.TheAutoIncrementableAttribute();
                String _name_41 = _TheAutoIncrementableAttribute_12.getName();
                _builder.append(_name_41, "\t\t\t\t     ");
                _builder.append("].end(); rowIter++)");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t\t\t\t");
                _builder.append("list.push_back(*rowIter);");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return list;");
                _builder.newLine();
                _builder.append("\t");
                _builder.append(" ");
                _builder.append("}");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append(" ");
                _builder.newLine();
              }
            }
          }
        }
        {
          boolean _and = false;
          boolean _NoAutoIncrementableAttribute_2 = table.NoAutoIncrementableAttribute();
          boolean _not_1 = (!_NoAutoIncrementableAttribute_2);
          if (!_not_1) {
            _and = false;
          } else {
            List<ASDMAttribute> _requiredNoAutoIncrementableAttributes = table.getRequiredNoAutoIncrementableAttributes();
            int _size_3 = _requiredNoAutoIncrementableAttributes.size();
            boolean _notEquals_3 = (_size_3 != 0);
            _and = _notEquals_3;
          }
          if (_and) {
            _builder.append("/**");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* Look up the table for a row whose all attributes ");
            {
              boolean _NoAutoIncrementableAttribute_3 = table.NoAutoIncrementableAttribute();
              boolean _not_2 = (!_NoAutoIncrementableAttribute_3);
              if (_not_2) {
                _builder.append(" except the autoincrementable one ");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append(" ");
            _builder.append("* are equal to the corresponding parameters of the method.");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("* @return a pointer on this row if any, 0 otherwise.");
            _builder.newLine();
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            {
              List<ASDMAttribute> _requiredNoAutoIncrementableAttributes_1 = table.getRequiredNoAutoIncrementableAttributes();
              for(final ASDMAttribute attr : _requiredNoAutoIncrementableAttributes_1) {
                _builder.append("* @param ");
                _builder.append(attr, "");
                _builder.append(".");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            String _name_42 = table.getName();
            _builder.append(_name_42, "");
            _builder.append("Row* ");
            String _name_43 = table.getName();
            _builder.append(_name_43, "");
            _builder.append("Table::lookup(");
            String _RequiredNoAutoIncrementableCpp = table.RequiredNoAutoIncrementableCpp();
            _builder.append(_RequiredNoAutoIncrementableCpp, "");
            _builder.append(") {\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("using asdm::ArrayTimeInterval;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("map<string, ID_TIME_ROWS >::iterator mapIter;");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("string k = Key(");
            String _KeyNoAutoIncNoTimeAttributesList_4 = table.KeyNoAutoIncNoTimeAttributesList();
            _builder.append(_KeyNoAutoIncNoTimeAttributesList_4, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("if ((mapIter = context.find(k)) != context.end()) {");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("ID_TIME_ROWS::iterator planeIter;");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("for (planeIter = context[k].begin(); planeIter != context[k].end(); planeIter++)  {");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("vector <");
            String _name_44 = table.getName();
            _builder.append(_name_44, "\t\t\t\t");
            _builder.append("Row*>::iterator rowIter;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("for (rowIter = (*planeIter).begin(); rowIter != (*planeIter).end(); rowIter++) {");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("if ((*rowIter)->get");
            ASDMAttribute _TemporalAttribute_19 = table.TemporalAttribute();
            String _UpperCaseName_14 = _TemporalAttribute_19.UpperCaseName();
            _builder.append(_UpperCaseName_14, "\t\t\t\t\t");
            _builder.append("().contains(");
            ASDMAttribute _TemporalAttribute_20 = table.TemporalAttribute();
            String _name_45 = _TemporalAttribute_20.getName();
            _builder.append(_name_45, "\t\t\t\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t    ");
            _builder.append("&& (*rowIter)->compareRequiredValue(");
            List<ASDMAttribute> _requiredValueAttributes = table.getRequiredValueAttributes();
            _builder.append(_requiredValueAttributes, "\t\t\t\t\t    ");
            _builder.append(")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t\t");
            _builder.append("return *rowIter;");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("} ");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return 0;\t");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence gettersNotTemporal(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      String _KeyCpp = table.KeyCpp();
      boolean _notEquals = (!Objects.equal(_KeyCpp, ""));
      if (_notEquals) {
        _builder.append("/*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("** Returns a ");
        String _name = table.getName();
        _builder.append(_name, " ");
        _builder.append("Row* given a key.");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("** @return a pointer to the row having the key whose values are passed as parameters, or 0 if");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("** no row exists for that key.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append(" \t");
        String _name_1 = table.getName();
        _builder.append(_name_1, " \t");
        _builder.append("Row* ");
        String _name_2 = table.getName();
        _builder.append(_name_2, " \t");
        _builder.append("Table::getRowByKey(");
        String _KeyCpp_1 = table.KeyCpp();
        _builder.append(_KeyCpp_1, " \t");
        _builder.append(")  {");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t");
        _builder.append("checkPresenceInMemory();");
        _builder.newLine();
        _builder.append("\t");
        String _name_3 = table.getName();
        _builder.append(_name_3, "\t");
        _builder.append("Row* aRow = 0;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for (unsigned int i = 0; i < privateRows.size(); i++) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("aRow = row.at(i);");
        _builder.newLine();
        {
          List<ASDMAttribute> _keyAttributes = table.getKeyAttributes();
          for(final ASDMAttribute param : _keyAttributes) {
            {
              boolean _isArrayTimeIntervalType = param.isArrayTimeIntervalType();
              if (_isArrayTimeIntervalType) {
                _builder.append("\t\t");
                _builder.append("if (!aRow->");
                String _name_4 = param.getName();
                _builder.append(_name_4, "\t\t");
                _builder.append(".contains(");
                String _name_5 = param.getName();
                _builder.append(_name_5, "\t\t");
                _builder.append(".getStart())) continue;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("if (aRow->");
                String _name_6 = param.getName();
                _builder.append(_name_6, "\t\t");
                _builder.append(" != ");
                String _name_7 = param.getName();
                _builder.append(_name_7, "\t\t");
                _builder.append(") continue;");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("return aRow;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return 0;\t\t");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      List<ASDMAttribute> _requiredNoAutoIncrementableAttributes = table.getRequiredNoAutoIncrementableAttributes();
      int _size = _requiredNoAutoIncrementableAttributes.size();
      boolean _notEquals_1 = (_size != 0);
      if (_notEquals_1) {
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Look up the table for a row whose all attributes ");
        {
          boolean _NoAutoIncrementableAttribute = table.NoAutoIncrementableAttribute();
          boolean _not = (!_NoAutoIncrementableAttribute);
          if (_not) {
            _builder.append(" except the autoincrementable one ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* are equal to the corresponding parameters of the method.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @return a pointer on this row if any, 0 otherwise.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        {
          List<ASDMAttribute> _requiredNoAutoIncrementableAttributes_1 = table.getRequiredNoAutoIncrementableAttributes();
          for(final ASDMAttribute attr : _requiredNoAutoIncrementableAttributes_1) {
            _builder.append("* @param ");
            String _name_8 = attr.getName();
            _builder.append(_name_8, "");
            _builder.append(".");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        String _name_9 = table.getName();
        _builder.append(_name_9, "");
        _builder.append("Row* ");
        String _name_10 = table.getName();
        _builder.append(_name_10, "");
        _builder.append("Table::lookup(");
        String _RequiredNoAutoIncrementableCpp = table.RequiredNoAutoIncrementableCpp();
        _builder.append(_RequiredNoAutoIncrementableCpp, "");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_11 = table.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("Row* aRow;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("for (unsigned int i = 0; i < privateRows.size(); i++) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("aRow = privateRows.at(i); ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("if (aRow->compareNoAutoInc(");
        String _RequiredNoAutoIncrementableAttributesList = table.RequiredNoAutoIncrementableAttributesList();
        _builder.append(_RequiredNoAutoIncrementableAttributesList, "\t\t\t");
        _builder.append(")) return aRow;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return 0;\t");
        _builder.newLine();
        _builder.append("} ");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.newLine();
    {
      boolean _and = false;
      boolean _NoAutoIncrementableAttribute_1 = table.NoAutoIncrementableAttribute();
      boolean _not_1 = (!_NoAutoIncrementableAttribute_1);
      if (!_not_1) {
        _and = false;
      } else {
        List<ASDMAttribute> _keyNoAutoIncrementableAttributes = table.getKeyNoAutoIncrementableAttributes();
        int _size_1 = _keyNoAutoIncrementableAttributes.size();
        boolean _notEquals_2 = (_size_1 != 0);
        _and = _notEquals_2;
      }
      if (_and) {
        _builder.append("/*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Returns a vector of pointers on rows whose key element ");
        ASDMAttribute _TheAutoIncrementableAttribute = table.TheAutoIncrementableAttribute();
        String _name_12 = _TheAutoIncrementableAttribute.getName();
        _builder.append(_name_12, " ");
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* is equal to the parameter ");
        ASDMAttribute _TheAutoIncrementableAttribute_1 = table.TheAutoIncrementableAttribute();
        String _name_13 = _TheAutoIncrementableAttribute_1.getName();
        _builder.append(_name_13, " ");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* @return a vector of vector <");
        String _name_14 = table.getName();
        _builder.append(_name_14, " ");
        _builder.append("Row *>. A returned vector of size 0 means that no row has been found.");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* @param ");
        ASDMAttribute _TheAutoIncrementableAttribute_2 = table.TheAutoIncrementableAttribute();
        String _name_15 = _TheAutoIncrementableAttribute_2.getName();
        _builder.append(_name_15, " ");
        _builder.append(" ");
        ASDMAttribute _TheAutoIncrementableAttribute_3 = table.TheAutoIncrementableAttribute();
        String _CppType = _TheAutoIncrementableAttribute_3.CppType();
        _builder.append(_CppType, " ");
        _builder.append(" contains the value of");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* the autoincrementable attribute that is looked up in the table.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("vector <");
        String _name_16 = table.getName();
        _builder.append(_name_16, " ");
        _builder.append("Row *>  ");
        String _name_17 = table.getName();
        _builder.append(_name_17, " ");
        _builder.append("Table::getRowBy");
        ASDMAttribute _TheAutoIncrementableAttribute_4 = table.TheAutoIncrementableAttribute();
        String _UpperCaseName = _TheAutoIncrementableAttribute_4.UpperCaseName();
        _builder.append(_UpperCaseName, " ");
        _builder.append("(");
        ASDMAttribute _TheAutoIncrementableAttribute_5 = table.TheAutoIncrementableAttribute();
        String _CppType_1 = _TheAutoIncrementableAttribute_5.CppType();
        _builder.append(_CppType_1, " ");
        _builder.append(" ");
        ASDMAttribute _TheAutoIncrementableAttribute_6 = table.TheAutoIncrementableAttribute();
        String _name_18 = _TheAutoIncrementableAttribute_6.getName();
        _builder.append(_name_18, " ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("checkPresenceInMemory();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("vector<");
        String _name_19 = table.getName();
        _builder.append(_name_19, "\t");
        _builder.append("Row *> list;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("for (unsigned int i = 0; i < row.size(); ++i) {");
        _builder.newLine();
        _builder.append("\t\t");
        String _name_20 = table.getName();
        _builder.append(_name_20, "\t\t");
        _builder.append("Row &x = *row[i];");
        _builder.newLineIfNotEmpty();
        {
          ASDMAttribute _TheAutoIncrementableAttribute_7 = table.TheAutoIncrementableAttribute();
          String _JavaType = _TheAutoIncrementableAttribute_7.JavaType();
          boolean _equals = Objects.equal(_JavaType, "Tag");
          if (_equals) {
            _builder.append("\t\t");
            _builder.append("if (x.");
            ASDMAttribute _TheAutoIncrementableAttribute_8 = table.TheAutoIncrementableAttribute();
            String _name_21 = _TheAutoIncrementableAttribute_8.getName();
            _builder.append(_name_21, "\t\t");
            _builder.append(".equals(");
            ASDMAttribute _TheAutoIncrementableAttribute_9 = table.TheAutoIncrementableAttribute();
            String _name_22 = _TheAutoIncrementableAttribute_9.getName();
            _builder.append(_name_22, "\t\t");
            _builder.append("))");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("if (x.");
            ASDMAttribute _TheAutoIncrementableAttribute_10 = table.TheAutoIncrementableAttribute();
            String _name_23 = _TheAutoIncrementableAttribute_10.getName();
            _builder.append(_name_23, "\t\t");
            _builder.append(" == ");
            ASDMAttribute _TheAutoIncrementableAttribute_11 = table.TheAutoIncrementableAttribute();
            String _name_24 = _TheAutoIncrementableAttribute_11.getName();
            _builder.append(_name_24, "\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("list.push_back(row[i]);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//if (list.size() == 0) throw  NoSuchRow(\"\",\"");
        String _name_25 = table.getName();
        _builder.append(_name_25, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return list;\t");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence toXML(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("string ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::toXML()  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("string buf;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("buf.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?> \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("buf.append(\"<");
    String _name_1 = table.getName();
    _builder.append(_name_1, "\t");
    _builder.append("Table xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:");
    String _xmlnsPrefix = table.xmlnsPrefix();
    _builder.append(_xmlnsPrefix, "\t");
    _builder.append("=\\\"http://Alma/XASDM/");
    String _name_2 = table.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Table\\\" xsi:schemaLocation=\\\"http://Alma/XASDM/");
    String _name_3 = table.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Table http://almaobservatory.org/XML/XASDM/");
    String _version = this.container.getVersion();
    _builder.append(_version, "\t");
    _builder.append("/");
    String _name_4 = table.getName();
    _builder.append(_name_4, "\t");
    _builder.append("Table.xsd\\\" schemaVersion=\\\"");
    String _version_1 = this.container.getVersion();
    _builder.append(_version_1, "\t");
    _builder.append("\\\" schemaRevision=\\\"");
    String _revision = AlmaTableContainer.getRevision();
    _builder.append(_revision, "\t");
    _builder.append("\\\">\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("buf.append(entity.toXML());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s = container.getEntity().toXML();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Change the \"Entity\" tag to \"ContainerEntity\".");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("buf.append(\"<Container\" + s.substr(1,s.length() - 1)+\" \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vector<");
    String _name_5 = table.getName();
    _builder.append(_name_5, "\t");
    _builder.append("Row*> v = get();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < v.size(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("buf.append(v[i]->toXML());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (NoSuchRow e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("buf.append(\"  \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("buf.append(\"</");
    String _name_6 = table.getName();
    _builder.append(_name_6, "\t");
    _builder.append("Table> \");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return buf;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence fromXML(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("string ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::getVersion() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return version;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ");
    String _name_1 = table.getName();
    _builder.append(_name_1, "");
    _builder.append("Table::fromXML(string& tableInXML)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Look for a version information in the schemaVersion of the XML");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlDoc *doc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("doc = xmlReadMemory(tableInXML.data(), tableInXML.size(), \"XMLTableHeader.xml\", NULL, XML_PARSE_NOBLANKS);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ( doc == NULL )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Failed to parse the xmlHeader into a DOM structure.\", \"");
    String _name_2 = table.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlNode* root_element = xmlDocGetRootElement(doc);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ( root_element == NULL || root_element->type != XML_ELEMENT_NODE )");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Failed to retrieve the root element in the DOM structure.\", \"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlChar * propValue = xmlGetProp(root_element, (const xmlChar *) \"schemaVersion\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ( propValue != 0 ) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("version = string( (const char*) propValue);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlFree(propValue);   \t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Parser xml(tableInXML);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!xml.isStr(\"<");
    String _name_4 = table.getName();
    _builder.append(_name_4, "\t");
    _builder.append("Table\")) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// cout << \"Parsing a ");
    String _name_5 = table.getName();
    _builder.append(_name_5, "\t");
    _builder.append("Table\" << endl;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("string s = xml.getElement(\"<Entity\",\"/>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("e.setFromXML(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (e.getEntityTypeName() != \"");
    String _name_6 = table.getName();
    _builder.append(_name_6, "\t");
    _builder.append("Table\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setEntity(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Skip the container\'s entity; but, it has to be there.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElement(\"<ContainerEntity\",\"/>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Get each row in the table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElementContent(\"<row>\",\"</row>\");");
    _builder.newLine();
    _builder.append("\t");
    String _name_7 = table.getName();
    _builder.append(_name_7, "\t");
    _builder.append("Row *row;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (getContainer().checkRowUniqueness()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (s.length() != 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("row = newRow();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("row->setFromXML(s);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("checkAndAdd(row);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("s = xml.getElementContent(\"<row>\",\"</row>\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (DuplicateKey e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(e1.getMessage(),\"");
    String _name_8 = table.getName();
    _builder.append(_name_8, "\t\t\t");
    _builder.append("Table\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (UniquenessViolationException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(e1.getMessage(),\"");
    String _name_9 = table.getName();
    _builder.append(_name_9, "\t\t\t");
    _builder.append("Table\");\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// cout << \"Unexpected error in ");
    String _name_10 = table.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("Table::checkAndAdd called from ");
    String _name_11 = table.getName();
    _builder.append(_name_11, "\t\t\t");
    _builder.append("Table::fromXML \" << endl;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (s.length() != 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("row = newRow();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("row->setFromXML(s);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("addWithoutCheckingUnique(row);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("s = xml.getElementContent(\"<row>\",\"</row>\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (DuplicateKey e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(e1.getMessage(),\"");
    String _name_12 = table.getName();
    _builder.append(_name_12, "\t\t\t");
    _builder.append("Table\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// cout << \"Unexpected error in ");
    String _name_13 = table.getName();
    _builder.append(_name_13, "\t\t\t");
    _builder.append("Table::addWithoutCheckingUnique called from ");
    String _name_14 = table.getName();
    _builder.append(_name_14, "\t\t\t");
    _builder.append("Table::fromXML \" << endl;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!xml.isStr(\"</");
    String _name_15 = table.getName();
    _builder.append(_name_15, "\t");
    _builder.append("Table>\")) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Changed 24 Sep, 2015 - The export policy cannot be changed by what has been observed at import time. M Caillat.\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//archiveAsBin = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//fileAsBin = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toMIME(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("string ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::MIMEXMLPart(const asdm::ByteOrder* byteOrder) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("string UID = getEntity().getEntityId().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string withoutUID = UID.substr(6);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string containerUID = getContainer().getEntity().getEntityId().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ostringstream oss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<?xml version=\'1.0\'  encoding=\'ISO-8859-1\'?>\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<");
    String _name_1 = table.getName();
    _builder.append(_name_1, "\t");
    _builder.append("Table xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:");
    String _xmlnsPrefix = table.xmlnsPrefix();
    _builder.append(_xmlnsPrefix, "\t");
    _builder.append("=\\\"http://Alma/XASDM/");
    String _name_2 = table.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Table\\\" xsi:schemaLocation=\\\"http://Alma/XASDM/");
    String _name_3 = table.getName();
    _builder.append(_name_3, "\t");
    _builder.append("Table http://almaobservatory.org/XML/XASDM/");
    String _version = this.container.getVersion();
    _builder.append(_version, "\t");
    _builder.append("/");
    String _name_4 = table.getName();
    _builder.append(_name_4, "\t");
    _builder.append("Table.xsd\\\" schemaVersion=\\\"");
    String _version_1 = this.container.getVersion();
    _builder.append(_version_1, "\t");
    _builder.append("\\\" schemaRevision=\\\"");
    String _revision = AlmaTableContainer.getRevision();
    _builder.append(_revision, "\t");
    _builder.append("\\\">\\n\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss<< \"<Entity entityId=\'\"<<UID<<\"\' entityIdEncrypted=\'na\' entityTypeName=\'");
    String _name_5 = table.getName();
    String _UpperCaseName = MMUtil.UpperCaseName(_name_5);
    _builder.append(_UpperCaseName, "\t");
    _builder.append("Table\' schemaVersion=\'1\' documentVersion=\'1\'/>\\n\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss<< \"<ContainerEntity entityId=\'\"<<containerUID<<\"\' entityIdEncrypted=\'na\' entityTypeName=\'ASDM\' schemaVersion=\'1\' documentVersion=\'1\'/>\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<BulkStoreRef file_id=\'\"<<withoutUID<<\"\' byteOrder=\'\"<<byteOrder->toString()<<\"\' />\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<Attributes>\\n\";");
    _builder.newLine();
    {
      List<ASDMAttribute> _requiredAttributes = table.getRequiredAttributes();
      for(final ASDMAttribute ra : _requiredAttributes) {
        _builder.append("\t");
        _builder.append("oss << \"<");
        String _name_6 = ra.getName();
        _builder.append(_name_6, "\t");
        _builder.append("/>\\n\"; ");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      List<ASDMAttribute> _optionalValueAttributes = table.getOptionalValueAttributes();
      for(final ASDMAttribute oa : _optionalValueAttributes) {
        _builder.append("\t");
        _builder.append("oss << \"<");
        String _name_7 = oa.getName();
        _builder.append(_name_7, "\t");
        _builder.append("/>\\n\"; ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss << \"</Attributes>\\n\";\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"</");
    String _name_8 = table.getName();
    _builder.append(_name_8, "\t");
    _builder.append("Table>\\n\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return oss.str();\t\t\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("string ");
    String _name_9 = table.getName();
    _builder.append(_name_9, "");
    _builder.append("Table::toMIME(const asdm::ByteOrder* byteOrder) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("EndianOSStream eoss(byteOrder);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string UID = getEntity().getEntityId().toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The MIME Header");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"MIME-Version: 1.0\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss << \"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss << \"Content-Type: Multipart/Related; boundary=\'MIME_boundary\'; type=\'text/xml\'; start= \'<header.xml>\'\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-Description: Correlator\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"alma-uid:\" << UID;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The MIME XML part header.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"--MIME_boundary\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-Type: text/xml; charset=\'ISO-8859-1\'\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-Transfer-Encoding: 8bit\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-ID: <header.xml>\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The MIME XML part content.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss << MIMEXMLPart(byteOrder);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The MIME binary part header");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"--MIME_boundary\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-Type: binary/octet-stream\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"Content-ID: <content.bin>\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss <<\"\\n\";\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The MIME binary content");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("entity.toBin(eoss);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("container.getEntity().toBin(eoss);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss.writeInt((int) privateRows.size());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < privateRows.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("privateRows.at(i)->toBin(eoss);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The closing MIME boundary");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss << \"\\n--MIME_boundary--\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("eoss << \"\\n\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return eoss.str();\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setFromMIME(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::setFromMIME(const string & mimeMsg) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("string xmlPartMIMEHeader = \"Content-ID: <header.xml>\\n\\n\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string binPartMIMEHeader = \"--MIME_boundary\\nContent-Type: binary/octet-stream\\nContent-ID: <content.bin>\\n\\n\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Detect the XML header.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string::size_type loc0 = mimeMsg.find(xmlPartMIMEHeader, 0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( loc0 == string::npos) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// let\'s try with CRLFs");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("xmlPartMIMEHeader = \"Content-ID: <header.xml>\\r\\n\\r\\n\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("loc0 = mimeMsg.find(xmlPartMIMEHeader, 0);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if  ( loc0 == string::npos ) ");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("throw ConversionException(\"Failed to detect the beginning of the XML header\", \"");
    String _name_1 = table.getName();
    _builder.append(_name_1, "\t      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("loc0 += xmlPartMIMEHeader.size();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Look for the string announcing the binary part.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string::size_type loc1 = mimeMsg.find( binPartMIMEHeader, loc0 );");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( loc1 == string::npos ) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Failed to detect the beginning of the binary part\", \"");
    String _name_2 = table.getName();
    _builder.append(_name_2, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Extract the xmlHeader and analyze it to find out what is the byte order and the sequence");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// of attribute names.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string xmlHeader = mimeMsg.substr(loc0, loc1-loc0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlDoc *doc;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("doc = xmlReadMemory(xmlHeader.data(), xmlHeader.size(), \"BinaryTableHeader.xml\", NULL, XML_PARSE_NOBLANKS);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( doc == NULL ) ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Failed to parse the xmlHeader into a DOM structure.\", \"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("// This vector will be filled by the names of  all the attributes of the table");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("// in the order in which they are expected to be found in the binary representation.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("vector<string> attributesSeq;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlNode* root_element = xmlDocGetRootElement(doc);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( root_element == NULL || root_element->type != XML_ELEMENT_NODE )");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Failed to parse the xmlHeader into a DOM structure.\", \"");
    String _name_4 = table.getName();
    _builder.append(_name_4, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const ByteOrder* byteOrder=0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( string(\"ASDMBinaryTable\").compare((const char*) root_element->name) == 0) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Then it\'s an \"old fashioned\" MIME file for tables.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Just try to deserialize it with Big_Endian for the bytes ordering.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("byteOrder = asdm::ByteOrder::Big_Endian;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Let\'s consider a  default order for the sequence of attributes.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    {
      String _name_5 = table.getName();
      boolean _equals = Objects.equal(_name_5, "Pointing");
      if (_equals) {
        _builder.append("    ");
        _builder.append("\t");
        _builder.append("attributesSeq.push_back(\"antennaId\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"timeInterval\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"numSample\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"encoder\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"pointingTracking\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"usePolynomials\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"timeOrigin\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"numTerm\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"pointingDirection\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"target\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"offset\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"pointingModelId\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"overTheTop\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"sourceOffset\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"sourceOffsetReferenceCode\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"sourceOffsetEquinox\");");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("attributesSeq.push_back(\"sampledTimeInterval\");    \t");
        _builder.newLine();
      } else {
        {
          List<ASDMAttribute> _requiredAttributes = table.getRequiredAttributes();
          for(final ASDMAttribute ra : _requiredAttributes) {
            _builder.append("    ");
            _builder.append("attributesSeq.push_back(\"");
            String _name_6 = ra.getName();
            _builder.append(_name_6, "    ");
            _builder.append("\") ; ");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          List<ASDMAttribute> _optionalValueAttributes = table.getOptionalValueAttributes();
          for(final ASDMAttribute oa : _optionalValueAttributes) {
            _builder.append("    ");
            _builder.append("attributesSeq.push_back(\"");
            String _name_7 = oa.getName();
            _builder.append(_name_7, "    ");
            _builder.append("\") ; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// And decide that it has version == \"2\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("version = \"2\";         ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else if (string(\"");
    String _name_8 = table.getName();
    _builder.append(_name_8, "    ");
    _builder.append("Table\").compare((const char*) root_element->name) == 0) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("// It\'s a new (and correct) MIME file for tables.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// 1st )  Look for a BulkStoreRef element with an attribute byteOrder.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("xmlNode* bulkStoreRef = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("xmlNode* child = root_element->children;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (xmlHasProp(root_element, (const xmlChar*) \"schemaVersion\")) {");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("xmlChar * value = xmlGetProp(root_element, (const xmlChar *) \"schemaVersion\");");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("version = string ((const char *) value);");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("xmlFree(value);\t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Skip the two first children (Entity and ContainerEntity).");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bulkStoreRef = (child ==  0) ? 0 : ( (child->next) == 0 ? 0 : child->next->next );");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if ( bulkStoreRef == 0 || (bulkStoreRef->type != XML_ELEMENT_NODE)  || (string(\"BulkStoreRef\").compare((const char*) bulkStoreRef->name) != 0))");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("throw ConversionException (\"Could not find the element \'/");
    String _name_9 = table.getName();
    _builder.append(_name_9, "      \t");
    _builder.append("Table/BulkStoreRef\'. Invalid XML header \'\"+ xmlHeader + \"\'.\", \"");
    String _name_10 = table.getName();
    _builder.append(_name_10, "      \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("      \t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// We found BulkStoreRef, now look for its attribute byteOrder.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_xmlAttr* byteOrderAttr = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (struct _xmlAttr* attr = bulkStoreRef->properties; attr; attr = attr->next) ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("if (string(\"byteOrder\").compare((const char*) attr->name) == 0) {");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("byteOrderAttr = attr;");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (byteOrderAttr == 0) ");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("throw ConversionException(\"Could not find the element \'/");
    String _name_11 = table.getName();
    _builder.append(_name_11, "\t     ");
    _builder.append("Table/BulkStoreRef/@byteOrder\'. Invalid XML header \'\" + xmlHeader +\"\'.\", \"");
    String _name_12 = table.getName();
    _builder.append(_name_12, "\t     ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("string byteOrderValue = string((const char*) byteOrderAttr->children->content);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!(byteOrder = asdm::ByteOrder::fromString(byteOrderValue)))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"No valid value retrieved for the element \'/");
    String _name_13 = table.getName();
    _builder.append(_name_13, "\t\t");
    _builder.append("Table/BulkStoreRef/@byteOrder\'. Invalid XML header \'\" + xmlHeader + \"\'.\", \"");
    String _name_14 = table.getName();
    _builder.append(_name_14, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("// 2nd) Look for the Attributes element and grab the names of the elements it contains.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("xmlNode* attributes = bulkStoreRef->next;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if ( attributes == 0 || (attributes->type != XML_ELEMENT_NODE)  || (string(\"Attributes\").compare((const char*) attributes->name) != 0))\t ");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("throw ConversionException (\"Could not find the element \'/");
    String _name_15 = table.getName();
    _builder.append(_name_15, "       \t");
    _builder.append("Table/Attributes\'. Invalid XML header \'\"+ xmlHeader + \"\'.\", \"");
    String _name_16 = table.getName();
    _builder.append(_name_16, "       \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("xmlNode* childOfAttributes = attributes->children;");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("while ( childOfAttributes != 0 && (childOfAttributes->type == XML_ELEMENT_NODE) ) {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("attributesSeq.push_back(string((const char*) childOfAttributes->name));");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("childOfAttributes = childOfAttributes->next;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Create an EndianISStream from the substring containing the binary part.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EndianISStream eiss(mimeMsg.substr(loc1+binPartMIMEHeader.size()), byteOrder);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("entity = Entity::fromBin((EndianIStream&) eiss);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// We do nothing with that but we have to read it.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Entity containerEntity = Entity::fromBin((EndianIStream&) eiss);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Let\'s read numRows but ignore it and rely on the value specified in the ASDM.xml file.    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int numRows = ((EndianIStream&) eiss).readInt();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ((numRows != -1)                        // Then these are *not* data produced at the EVLA.");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("&& ((unsigned int) numRows != this->declaredSize )) { // Then the declared size (in ASDM.xml) is not equal to the one ");
    _builder.newLine();
    _builder.append("    \t                                       ");
    _builder.append("// written into the binary representation of the table.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cout << \"The a number of rows (\'\" ");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< numRows");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< \"\') declared in the binary representation of the table is different from the one declared in ASDM.xml (\'\"");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< this->declaredSize");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< \"\'). I\'ll proceed with the value declared in ASDM.xml\"");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< endl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}                                           ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (getContainer().checkRowUniqueness()) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      \t\t");
    _builder.append("for (uint32_t i = 0; i < this->declaredSize; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _name_17 = table.getName();
    _builder.append(_name_17, "\t\t\t\t");
    _builder.append("Row* aRow = ");
    String _name_18 = table.getName();
    _builder.append(_name_18, "\t\t\t\t");
    _builder.append("Row::fromBin((EndianIStream&) eiss, *this, attributesSeq);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("checkAndAdd(aRow);");
    _builder.newLine();
    _builder.append("      \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("catch (DuplicateKey e) {");
    _builder.newLine();
    _builder.append("      \t\t");
    _builder.append("throw ConversionException(\"Error while writing binary data , the message was \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ e.getMessage(), \"");
    String _name_19 = table.getName();
    _builder.append(_name_19, "\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("catch (TagFormatException e) {");
    _builder.newLine();
    _builder.append("     \t\t ");
    _builder.append("throw ConversionException(\"Error while reading binary data , the message was \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ e.getMessage(), \"");
    String _name_20 = table.getName();
    _builder.append(_name_20, "\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("for (uint32_t i = 0; i < this->declaredSize; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_21 = table.getName();
    _builder.append(_name_21, "\t\t\t");
    _builder.append("Row* aRow = ");
    String _name_22 = table.getName();
    _builder.append(_name_22, "\t\t\t");
    _builder.append("Row::fromBin((EndianIStream&) eiss, *this, attributesSeq);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("append(aRow);");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("}   \t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Changed 24 Sep, 2015 - The export policy cannot be changed by what has been observed at import time. M Caillat");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// archiveAsBin = true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// fileAsBin = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_23 = table.getName();
    _builder.append(_name_23, "\t");
    _builder.append("Table::setUnknownAttributeBinaryReader(const string& attributeName, BinaryAttributeReaderFunctor* barFctr) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Is this attribute really unknown ?");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (vector<string>::const_iterator iter = attributesNamesOf");
    String _name_24 = table.getName();
    _builder.append(_name_24, "\t\t");
    _builder.append("_v.begin(); iter != attributesNamesOf");
    String _name_25 = table.getName();
    _builder.append(_name_25, "\t\t");
    _builder.append("_v.end(); iter++) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("if ((*iter).compare(attributeName) == 0) ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"the attribute \'\"+attributeName+\"\' is known you can\'t override the way it\'s read in the MIME binary file containing the table.\", \"");
    String _name_26 = table.getName();
    _builder.append(_name_26, "\t\t\t\t");
    _builder.append("\"); ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Ok then register the functor to activate when an unknown attribute is met during the reading of a binary table?");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("unknownAttributes2Functors[attributeName] = barFctr;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BinaryAttributeReaderFunctor* ");
    String _name_27 = table.getName();
    _builder.append(_name_27, "\t");
    _builder.append("Table::getUnknownAttributeBinaryReader(const string& attributeName) const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("map<string, BinaryAttributeReaderFunctor*>::const_iterator iter = unknownAttributes2Functors.find(attributeName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (iter == unknownAttributes2Functors.end()) ? 0 : iter->second;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setFromFile(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::setFromFile(const string& directory) {\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("if (boost::filesystem::exists(boost::filesystem::path(uniqSlashes(directory + \"/");
    String _name_1 = table.getName();
    _builder.append(_name_1, "    ");
    _builder.append(".xml\"))))");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("setFromXMLFile(directory);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else if (boost::filesystem::exists(boost::filesystem::path(uniqSlashes(directory + \"/");
    String _name_2 = table.getName();
    _builder.append(_name_2, "    ");
    _builder.append(".bin\"))))");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("setFromMIMEFile(directory);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"No file found for the ");
    String _name_3 = table.getName();
    _builder.append(_name_3, "      ");
    _builder.append(" table\", \"");
    String _name_4 = table.getName();
    _builder.append(_name_4, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setFromMIMEFile(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::setFromMIMEFile(const string& directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("string tablePath ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tablePath = directory + \"/");
    String _name_1 = table.getName();
    _builder.append(_name_1, "    ");
    _builder.append(".bin\";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("ifstream tablefile(tablePath.c_str(), ios::in|ios::binary);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!tablefile.is_open()) { ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Could not open file \" + tablePath, \"");
    String _name_2 = table.getName();
    _builder.append(_name_2, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Read in a stringstream.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("stringstream ss; ss << tablefile.rdbuf();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (tablefile.rdstate() == istream::failbit || tablefile.rdstate() == istream::badbit) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Error reading file \" + tablePath,\"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// And close.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tablefile.close();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (tablefile.rdstate() == istream::failbit)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Could not close file \" + tablePath,\"");
    String _name_4 = table.getName();
    _builder.append(_name_4, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("setFromMIME(ss.str());");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("/* ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("void ");
    String _name_5 = table.getName();
    _builder.append(_name_5, "  ");
    _builder.append("Table::openMIMEFile (const string& directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("// Open the file.");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("string tablePath ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tablePath = directory + \"/");
    String _name_6 = table.getName();
    _builder.append(_name_6, "    ");
    _builder.append(".bin\";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("ifstream tablefile(tablePath.c_str(), ios::in|ios::binary);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!tablefile.is_open())");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Could not open file \" + tablePath, \"");
    String _name_7 = table.getName();
    _builder.append(_name_7, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Locate the xmlPartMIMEHeader.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string xmlPartMIMEHeader = \"CONTENT-ID: <HEADER.XML>\\n\\n\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CharComparator comparator;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("istreambuf_iterator<char> BEGIN(tablefile.rdbuf());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("istreambuf_iterator<char> END;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("istreambuf_iterator<char> it = search(BEGIN, END, xmlPartMIMEHeader.begin(), xmlPartMIMEHeader.end(), comparator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (it == END) ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("throw ConversionException(\"failed to detect the beginning of the XML header\", \"");
    String _name_8 = table.getName();
    _builder.append(_name_8, "    \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Locate the binaryPartMIMEHeader while accumulating the characters of the xml header.\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string binPartMIMEHeader = \"--MIME_BOUNDARY\\nCONTENT-TYPE: BINARY/OCTET-STREAM\\nCONTENT-ID: <CONTENT.BIN>\\n\\n\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string xmlHeader;");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("CharCompAccumulator compaccumulator(&xmlHeader, 100000);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("++it;");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("it = search(it, END, binPartMIMEHeader.begin(), binPartMIMEHeader.end(), compaccumulator);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("if (it == END) ");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("throw ConversionException(\"failed to detect the beginning of the binary part\", \"");
    String _name_9 = table.getName();
    _builder.append(_name_9, "   \t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cout << xmlHeader << endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We have the xmlHeader , let\'s parse it.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xmlDoc *doc;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("doc = xmlReadMemory(xmlHeader.data(), xmlHeader.size(), \"BinaryTableHeader.xml\", NULL, XML_PARSE_NOBLANKS);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( doc == NULL ) ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Failed to parse the xmlHeader into a DOM structure.\", \"");
    String _name_10 = table.getName();
    _builder.append(_name_10, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("// This vector will be filled by the names of  all the attributes of the table");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("// in the order in which they are expected to be found in the binary representation.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("vector<string> attributesSeq(attributesNamesInBinOf");
    String _name_11 = table.getName();
    _builder.append(_name_11, "    ");
    _builder.append("_v);");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("xmlNode* root_element = xmlDocGetRootElement(doc);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( root_element == NULL || root_element->type != XML_ELEMENT_NODE )");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Failed to parse the xmlHeader into a DOM structure.\", \"");
    String _name_12 = table.getName();
    _builder.append(_name_12, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("const ByteOrder* byteOrder=0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ( string(\"ASDMBinaryTable\").compare((const char*) root_element->name) == 0) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Then it\'s an \"old fashioned\" MIME file for tables.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Just try to deserialize it with Big_Endian for the bytes ordering.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("byteOrder = asdm::ByteOrder::Big_Endian;");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// And decide that it has version == \"2\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("version = \"2\";         ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else if (string(\"");
    String _name_13 = table.getName();
    _builder.append(_name_13, "    ");
    _builder.append("Table\").compare((const char*) root_element->name) == 0) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("// It\'s a new (and correct) MIME file for tables.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// 1st )  Look for a BulkStoreRef element with an attribute byteOrder.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("xmlNode* bulkStoreRef = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("xmlNode* child = root_element->children;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (xmlHasProp(root_element, (const xmlChar*) \"schemaVersion\")) {");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("xmlChar * value = xmlGetProp(root_element, (const xmlChar *) \"schemaVersion\");");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("version = string ((const char *) value);");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("xmlFree(value);\t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Skip the two first children (Entity and ContainerEntity).");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bulkStoreRef = (child ==  0) ? 0 : ( (child->next) == 0 ? 0 : child->next->next );");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if ( bulkStoreRef == 0 || (bulkStoreRef->type != XML_ELEMENT_NODE)  || (string(\"BulkStoreRef\").compare((const char*) bulkStoreRef->name) != 0))");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("throw ConversionException (\"Could not find the element \'/");
    String _name_14 = table.getName();
    _builder.append(_name_14, "      \t");
    _builder.append("Table/BulkStoreRef\'. Invalid XML header \'\"+ xmlHeader + \"\'.\", \"");
    String _name_15 = table.getName();
    _builder.append(_name_15, "      \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("      \t");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// We found BulkStoreRef, now look for its attribute byteOrder.");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_xmlAttr* byteOrderAttr = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (struct _xmlAttr* attr = bulkStoreRef->properties; attr; attr = attr->next) ");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("if (string(\"byteOrder\").compare((const char*) attr->name) == 0) {");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("byteOrderAttr = attr;");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (byteOrderAttr == 0) ");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("throw ConversionException(\"Could not find the element \'/");
    String _name_16 = table.getName();
    _builder.append(_name_16, "\t     ");
    _builder.append("Table/BulkStoreRef/@byteOrder\'. Invalid XML header \'\" + xmlHeader +\"\'.\", \"");
    String _name_17 = table.getName();
    _builder.append(_name_17, "\t     ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("string byteOrderValue = string((const char*) byteOrderAttr->children->content);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!(byteOrder = asdm::ByteOrder::fromString(byteOrderValue)))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"No valid value retrieved for the element \'/");
    String _name_18 = table.getName();
    _builder.append(_name_18, "\t\t");
    _builder.append("Table/BulkStoreRef/@byteOrder\'. Invalid XML header \'\" + xmlHeader + \"\'.\", \"");
    String _name_19 = table.getName();
    _builder.append(_name_19, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("// 2nd) Look for the Attributes element and grab the names of the elements it contains.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("xmlNode* attributes = bulkStoreRef->next;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if ( attributes == 0 || (attributes->type != XML_ELEMENT_NODE)  || (string(\"Attributes\").compare((const char*) attributes->name) != 0))\t ");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("throw ConversionException (\"Could not find the element \'/");
    String _name_20 = table.getName();
    _builder.append(_name_20, "       \t");
    _builder.append("Table/Attributes\'. Invalid XML header \'\"+ xmlHeader + \"\'.\", \"");
    String _name_21 = table.getName();
    _builder.append(_name_21, "       \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("xmlNode* childOfAttributes = attributes->children;");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("while ( childOfAttributes != 0 && (childOfAttributes->type == XML_ELEMENT_NODE) ) {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("attributesSeq.push_back(string((const char*) childOfAttributes->name));");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("childOfAttributes = childOfAttributes->next;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Create an EndianISStream from the substring containing the binary part.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EndianIFStream eifs(&tablefile, byteOrder);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("entity = Entity::fromBin((EndianIStream &) eifs);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// We do nothing with that but we have to read it.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Entity containerEntity = Entity::fromBin((EndianIStream &) eifs);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Let\'s read numRows but ignore it and rely on the value specified in the ASDM.xml file.    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int numRows = eifs.readInt();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if ((numRows != -1)                        // Then these are *not* data produced at the EVLA.");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("&& ((unsigned int) numRows != this->declaredSize )) { // Then the declared size (in ASDM.xml) is not equal to the one ");
    _builder.newLine();
    _builder.append("    \t                                       ");
    _builder.append("// written into the binary representation of the table.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cout << \"The a number of rows (\'\" ");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< numRows");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< \"\') declared in the binary representation of the table is different from the one declared in ASDM.xml (\'\"");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< this->declaredSize");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< \"\'). I\'ll proceed with the value declared in ASDM.xml\"");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("<< endl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setFromXMLFile(final AlmaTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = table.getName();
    _builder.append(_name, "");
    _builder.append("Table::setFromXMLFile(const string& directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("string tablePath ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tablePath = directory + \"/");
    String _name_1 = table.getName();
    _builder.append(_name_1, "    ");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ifstream tablefile(tablePath.c_str(), ios::in|ios::binary);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (!tablefile.is_open()) { ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Could not open file \" + tablePath, \"");
    String _name_2 = table.getName();
    _builder.append(_name_2, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Read in a stringstream.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("stringstream ss;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ss << tablefile.rdbuf();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if  (tablefile.rdstate() == istream::failbit || tablefile.rdstate() == istream::badbit) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Error reading file \'\" + tablePath + \"\'\", \"");
    String _name_3 = table.getName();
    _builder.append(_name_3, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// And close");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tablefile.close();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (tablefile.rdstate() == istream::failbit)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throw ConversionException(\"Could not close file \'\" + tablePath + \"\'\", \"");
    String _name_4 = table.getName();
    _builder.append(_name_4, "      ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Let\'s make a string out of the stringstream content and empty the stringstream.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string xmlDocument = ss.str(); ss.str(\"\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Let\'s make a very primitive check to decide");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// whether the XML content represents the table");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// or refers to it via a <BulkStoreRef element.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("string xmlDocument;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("xmlDocument = getContainer().getXSLTransformer()(tablePath);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (getenv(\"ASDM_DEBUG\")) cout << \"About to read \" << tablePath << endl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("catch (XSLTransformerException e) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("throw ConversionException(\"Caugth an exception whose message is \'\" + e.getMessage() + \"\'.\", \"");
    String _name_5 = table.getName();
    _builder.append(_name_5, "    \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (xmlDocument.find(\"<BulkStoreRef\") != string::npos)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("setFromMIMEFile(directory);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fromXML(xmlDocument);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
