package org.xtext.alma.sdmdsl.generator.cpp;

import alma.hla.datamodel.meta.asdm.AlmaTable;
import alma.hla.datamodel.meta.asdm.AlmaTableContainer;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;

@SuppressWarnings("all")
public class CppContainerImpl {
  private AlmaTableContainer container = AlmaTableContainer.getInstance();
  
  public void doGenerate(final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    SDMFileSystemAccess sdmFsa = ((SDMFileSystemAccess) fsa);
    String _name = this.container.getName();
    String _plus = ("src/" + _name);
    String _plus_1 = (_plus + ".cpp");
    sdmFsa.setFile(_plus_1);
    CharSequence _generateCppContainerImpl = this.generateCppContainerImpl();
    sdmFsa.generateFile(_generateCppContainerImpl);
  }
  
  public CharSequence generateCppContainerImpl() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ALMA - Atacama Large Millimeter Array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) European Southern Observatory, 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) Associated Universities Inc., 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by ESO (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by AUI (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is free software; you can redistribute it and/or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* modify it under the terms of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License as published by the Free software Foundation; either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* version 2.1 of the License, or (at your option) any later version.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* but WITHOUT ANY WARRANTY, without even the implied warranty of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Lesser General Public License for more details.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You should have received a copy of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License along with this library; if not, write to the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Foundation, Inc., 59 Temple Place, Suite 330, Boston,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MA 02111-1307  USA");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Warning!");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  -------------------------------------------------------------------- ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* | This is generated code!  Do not modify this file.                  |");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* | If you do, all changes will be lost when the file is re-generated. |");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* File ");
    String _name = this.container.getName();
    _builder.append(_name, " ");
    _builder.append(".cpp");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("#include <");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "");
    _builder.append(".h>");
    _builder.newLineIfNotEmpty();
    {
      List<AlmaTable> _tables = this.container.getTables();
      for(final AlmaTable table : _tables) {
        _builder.append("#include <");
        String _name_2 = table.getName();
        _builder.append(_name_2, "");
        _builder.append("Table.h>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("using asdm::");
    String _name_3 = this.container.getName();
    _builder.append(_name_3, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      List<AlmaTable> _tables_1 = this.container.getTables();
      for(final AlmaTable table_1 : _tables_1) {
        _builder.append("using asdm::");
        String _name_4 = table_1.getName();
        _builder.append(_name_4, "");
        _builder.append("Table;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("#include <Parser.h>");
    _builder.newLine();
    _builder.append("#include <ConversionException.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("using asdm::ConversionException;");
    _builder.newLine();
    _builder.append("using asdm::Parser;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.append("#include <fstream>");
    _builder.newLine();
    _builder.append("#include <time.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//#ifdef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("#include <sys/stat.h>");
    _builder.newLine();
    _builder.append("#include <sys/types.h>");
    _builder.newLine();
    _builder.append("#include <dirent.h>");
    _builder.newLine();
    _builder.append("//#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <Misc.h>");
    _builder.newLine();
    _builder.append("using namespace asdm;");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace asdm { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_5 = this.container.getName();
    _builder.append(_name_5, "\t");
    _builder.append("::Origin ");
    String _name_6 = this.container.getName();
    _builder.append(_name_6, "\t");
    _builder.append("::getOrigin() const { return origin ; }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    String _name_7 = this.container.getName();
    _builder.append(_name_7, "\t");
    _builder.append("::getDirectory() const { return directory_ ; }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("XSLTransformer & ");
    String _name_8 = this.container.getName();
    _builder.append(_name_8, "\t");
    _builder.append("::getXSLTransformer() { return xslTransformer; }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create an instance of the tables that belong to this model.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    String _name_9 = this.container.getName();
    _builder.append(_name_9, "\t");
    _builder.append("::");
    String _name_10 = this.container.getName();
    _builder.append(_name_10, "\t");
    _builder.append(" () {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Entity emptyEntity;");
    _builder.newLine();
    {
      List<AlmaTable> _tables_2 = this.container.getTables();
      for(final AlmaTable table_2 : _tables_2) {
        _builder.append("\t\t");
        String _LowerCase = table_2.LowerCase();
        _builder.append(_LowerCase, "\t\t");
        _builder.append(" = new ");
        String _name_11 = table_2.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("Table (*this);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("table.push_back(");
        String _LowerCase_1 = table_2.LowerCase();
        _builder.append(_LowerCase_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("tableEntity[\"");
        String _name_12 = table_2.getName();
        _builder.append(_name_12, "\t\t");
        _builder.append("\"] = emptyEntity;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("//for (unsigned int i = 0; i < table.size(); ++i)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//\ttableEntity.push_back(new Entity ());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Define a default entity.\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityId(EntityId(\"uid://X0/X0/X0\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityIdEncrypted(\"na\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setEntityTypeName(\"");
    String _name_13 = this.container.getName();
    _builder.append(_name_13, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("entity.setEntityVersion(\"1\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("entity.setInstanceVersion(\"1\");\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Define a default creation time : now.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("time_t rawtime;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("time(&rawtime);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("struct tm* timeInfo = localtime(&rawtime);\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//setTimeOfCreation(ArrayTime((1900+timeInfo->tm_year), (timeInfo->tm_mon+1), timeInfo->tm_mday, timeInfo->tm_hour, timeInfo->tm_min, (double) timeInfo->tm_sec));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("timeOfCreation = ArrayTime((1900+timeInfo->tm_year), (timeInfo->tm_mon+1), timeInfo->tm_mday, timeInfo->tm_hour, timeInfo->tm_min, (double) timeInfo->tm_sec);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Archive binary or XML");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("archiveAsBin = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// File binary or XML");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fileAsBin = false;\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Set imperatively to false");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("hasBeenAdded = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// So far it\'s created ex nihilo.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("origin = EX_NIHILO;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("loadTablesOnDemand_ = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("checkRowUniqueness_ = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_14 = this.container.getName();
    _builder.append(_name_14, "\t");
    _builder.append("::~");
    String _name_15 = this.container.getName();
    _builder.append(_name_15, "\t");
    _builder.append(" () {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < table.size(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("delete table[i];");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//delete tableEntity[i];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      List<AlmaTable> _tables_3 = this.container.getTables();
      for(final AlmaTable table_3 : _tables_3) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("* Get the table ");
        String _name_16 = table_3.getName();
        _builder.append(_name_16, "\t ");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("* @return The table ");
        String _name_17 = table_3.getName();
        _builder.append(_name_17, "\t ");
        _builder.append(" as a ");
        String _name_18 = table_3.getName();
        _builder.append(_name_18, "\t ");
        _builder.append("Table.");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t");
        String _name_19 = table_3.getName();
        _builder.append(_name_19, "\t");
        _builder.append("Table & ");
        String _name_20 = this.container.getName();
        _builder.append(_name_20, "\t");
        _builder.append("::get");
        String _name_21 = table_3.getName();
        _builder.append(_name_21, "\t");
        _builder.append(" () const {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return *");
        String _LowerCase_2 = table_3.LowerCase();
        _builder.append(_LowerCase_2, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _xML = this.toXML();
    _builder.append(_xML, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _fromXML = this.fromXML();
    _builder.append(_fromXML, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("using namespace asdmIDL;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#endif");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#ifndef WITHOUT_ACS\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ASDMDataSetIDL* ASDM::toIDL() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ASDMDataSetIDL* result = new ASDMDataSetIDL();");
    _builder.newLine();
    {
      List<AlmaTable> _tables_4 = this.container.getTables();
      for(final AlmaTable table_4 : _tables_4) {
        _builder.append("\t\t\t");
        _builder.append("result->");
        String _LowerCase_3 = table_4.LowerCase();
        _builder.append(_LowerCase_3, "\t\t\t");
        _builder.append(" = *(this->");
        String _LowerCase_4 = table_4.LowerCase();
        _builder.append(_LowerCase_4, "\t\t\t");
        _builder.append("->toIDL());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("return result;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("void ASDM::fromIDL(ASDMDataSetIDL* x) {");
    _builder.newLine();
    {
      List<AlmaTable> _tables_5 = this.container.getTables();
      for(final AlmaTable table_5 : _tables_5) {
        _builder.append("\t\t\t");
        _builder.append("this->");
        String _LowerCase_5 = table_5.LowerCase();
        _builder.append(_LowerCase_5, "\t\t\t");
        _builder.append("->fromIDL(x->");
        String _LowerCase_6 = table_5.LowerCase();
        _builder.append(_LowerCase_6, "\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#endif");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Write this ");
    String _name_22 = this.container.getName();
    _builder.append(_name_22, "\t ");
    _builder.append(" dataset to the specified directory");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* as a collection of XML documents. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param directory The directory to which this dataset is written.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @throws ConversionException If any error occurs in converting the");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* table to XML and writing it to the directory.  This method will");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* not overwrite any existing file; a ConversionException is also");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* thrown in this case.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_23 = this.container.getName();
    _builder.append(_name_23, "\t");
    _builder.append("::toXML(string directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!directoryExists(directory.c_str()) &&");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("!createPath(directory.c_str())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not create directory \" , directory);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (mkdir(directory.c_str(), S_IRWXU) == -1) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not create directory \", directory);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string containername = directory + \"/");
    String _name_24 = this.container.getName();
    _builder.append(_name_24, "\t\t");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("ofstream out(containername.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (out.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + containername + \" for writing\",\"");
    String _name_25 = this.container.getName();
    _builder.append(_name_25, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("out << toXML() << endl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (out.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + containername,\"");
    String _name_26 = this.container.getName();
    _builder.append(_name_26, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < table.size(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (table[i]->size() == 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("continue; // Skip any empty table.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string tablename = directory + \"/\" + table[i]->getName() + \".xml\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ofstream tableout(tablename.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + tablename + \" for writing\",table[i]->getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tableout << table[i]->toXML() << endl;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tableout.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + tablename,table[i]->getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Get an ");
    String _name_27 = this.container.getName();
    _builder.append(_name_27, "\t ");
    _builder.append(" dataset, given the full path name of the ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* directory containing the XML version of the dataset.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param xmlDirectory The full path name of the directory");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* containing this dataset.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return The complete dataset that belongs to the container");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* in this directory.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @throws ConversionException If any error occurs reading the ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* files in the directory or in converting the tables from XML.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    String _name_28 = this.container.getName();
    _builder.append(_name_28, "\t");
    _builder.append(" *");
    String _name_29 = this.container.getName();
    _builder.append(_name_29, "\t");
    _builder.append("::getFromXML(string xmlDirectory)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("string containername = xmlDirectory + \"/");
    String _name_30 = this.container.getName();
    _builder.append(_name_30, "\t\t");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("ifstream in(containername.c_str(),ios::in);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (in.rdstate() == istream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + containername + \" for reading\",\"");
    String _name_31 = this.container.getName();
    _builder.append(_name_31, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("string xmlDoc;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("const int SIZE = 4096*1024;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("char line[SIZE];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (in.getline(line,SIZE)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (in.rdstate() == istream::failbit || in.rdstate() == istream::badbit) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Error reading file \" + containername,\"");
    String _name_32 = this.container.getName();
    _builder.append(_name_32, "\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("xmlDoc.append(line);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("in.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (in.rdstate() == istream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + containername,\"");
    String _name_33 = this.container.getName();
    _builder.append(_name_33, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_34 = this.container.getName();
    _builder.append(_name_34, "\t\t");
    _builder.append(" *dataset = new ");
    String _name_35 = this.container.getName();
    _builder.append(_name_35, "\t\t");
    _builder.append(" ();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("dataset->fromXML(xmlDoc);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Now, do each table.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int BLOCKSIZE = 1000000;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("char c[BLOCKSIZE];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Entity entity;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      List<AlmaTable> _tables_6 = this.container.getTables();
      for(final AlmaTable table_6 : _tables_6) {
        _builder.append("\t\t");
        _builder.append("entity = dataset->tableEntity[\"");
        String _name_36 = table_6.getName();
        _builder.append(_name_36, "\t\t");
        _builder.append("\"];");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (entity.getEntityId().getId().length()  != 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// Which file must we read ?");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("string tablename = xmlDirectory + \"/");
        String _name_37 = table_6.getName();
        _builder.append(_name_37, "\t\t\t");
        _builder.append(".xml\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// Determine the file size");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("ifstream::pos_type size;\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("ifstream tablein (tablename.c_str() , ios::in|ios::binary|ios::ate);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (tablein.is_open()) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("size = tablein.tellg();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("throw ConversionException(\"Could not open file \" + tablename, \"");
        String _name_38 = table_6.getName();
        _builder.append(_name_38, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// Read the file in a string");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("string tableDoc;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("tableDoc.reserve(size);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("tablein.seekg (0);\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("int nread = BLOCKSIZE;\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("while (nread == BLOCKSIZE) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("tablein.read(c, BLOCKSIZE);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("if (tablein.rdstate() == istream::failbit || tablein.rdstate() == istream::badbit) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("throw ConversionException(\"Error reading file \" + tablename,\"");
        String _name_39 = this.container.getName();
        _builder.append(_name_39, "\t\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("nread = tablein.gcount();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("tableDoc.append(c, nread);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("tablein.close();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (tablein.rdstate() == istream::failbit)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("throw ConversionException(\"Could not close file \" + tablename,\"");
        String _name_40 = this.container.getName();
        _builder.append(_name_40, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("// And finally parse the XML document to populate the table.");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("dataset->get");
        String _name_41 = table_6.getName();
        _builder.append(_name_41, "\t\t\t");
        _builder.append("().fromXML(tableDoc);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dataset;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    String _name_42 = this.container.getName();
    _builder.append(_name_42, "\t");
    _builder.append("::toMIME() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// To be implemented");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_43 = this.container.getName();
    _builder.append(_name_43, "\t");
    _builder.append("::setFromMIME(const string & ) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// To be implemented");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _file = this.toFile();
    _builder.append(_file, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _setFromFile = this.setFromFile();
    _builder.append(_setFromFile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity ");
    String _name_44 = this.container.getName();
    _builder.append(_name_44, "\t");
    _builder.append("::getEntity() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return entity;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void ");
    String _name_45 = this.container.getName();
    _builder.append(_name_45, "\t");
    _builder.append("::setEntity(Entity e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this->entity = e; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Meaningless, but required for the Representable interface.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ");
    String _name_46 = this.container.getName();
    _builder.append(_name_46, "\t");
    _builder.append("::getName() const {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Meaningless, but required for the Representable interface.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned int ");
    String _name_47 = this.container.getName();
    _builder.append(_name_47, "\t");
    _builder.append("::size()  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Create an ");
    String _name_48 = this.container.getName();
    _builder.append(_name_48, "\t\t ");
    _builder.append(" dataset from the ALMA archive, given the");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t ");
    _builder.append("* entityId of its container.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param datasetId The entityId of the container of the dataset.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_49 = this.container.getName();
    _builder.append(_name_49, "\t\t");
    _builder.append(" *");
    String _name_50 = this.container.getName();
    _builder.append(_name_50, "\t\t");
    _builder.append("::fromArchive(EntityId datasetId) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("// Get the xml representation of the container.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string xml = getXMLEntity(datasetId);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create the container ...");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_51 = this.container.getName();
    _builder.append(_name_51, "\t\t\t");
    _builder.append(" *container = new ");
    String _name_52 = this.container.getName();
    _builder.append(_name_52, "\t\t\t");
    _builder.append(" ();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("// ... and populate it with data.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("container->fromXML(xml);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Now build the tables.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Entity entity;");
    _builder.newLine();
    {
      List<AlmaTable> _tables_7 = this.container.getTables();
      for(final AlmaTable table_7 : _tables_7) {
        _builder.append("\t\t\t");
        _builder.append("entity = container->tableEntity[\"");
        String _name_53 = table_7.getName();
        _builder.append(_name_53, "\t\t\t");
        _builder.append("\"];");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("if (entity.getEntityId().getId().size() != 0) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("container->get");
        String _name_54 = table_7.getName();
        _builder.append(_name_54, "\t\t\t\t");
        _builder.append("().setEntity(entity);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("xml = getXMLEntity(entity.getEntityId());");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("container->get");
        String _name_55 = table_7.getName();
        _builder.append(_name_55, "\t\t\t\t");
        _builder.append("().fromXML(xml);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("return container;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#endif");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#ifndef WITHOUT_ACS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Update an ");
    String _name_56 = this.container.getName();
    _builder.append(_name_56, "\t\t ");
    _builder.append(" dataset that already exists in the ALMA archive.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("void ");
    String _name_57 = this.container.getName();
    _builder.append(_name_57, "\t\t");
    _builder.append("::updateArchive() const{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("// Assumption: Entity objects have already been assigned.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Convert each table to an XML document and write it to the archive.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (unsigned int i = 0; i < table.size(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("string xml = table[i]->toXML();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("putXMLEntity(xml);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Now, convert the container and write it to the archive.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string xml = toXML();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("putXMLEntity(xml);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#endif");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Return the table, as a Representable object, with the");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* specified name.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Representable &");
    String _name_58 = this.container.getName();
    _builder.append(_name_58, "\t");
    _builder.append("::getTable(string tableName)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < table.size(); ++i)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (table[i]->getName() == tableName)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return *table[i];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw InvalidArgumentException(\"No such table as \" + tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Get timeOfCreation.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @return timeOfCreation as ArrayTime");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("ArrayTime ASDM::getTimeOfCreation() const {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("return timeOfCreation;");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Set timeOfCreation with the specified ArrayTime.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @param timeOfCreation The ArrayTime value to which timeOfCreation is to be set.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("void ASDM::setTimeOfCreation (ArrayTime timeOfCreation)  {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("if (hasBeenAdded) {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("this->timeOfCreation = timeOfCreation;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Get version.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @return version as int");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("int ASDM::getVersion() const {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("return version;");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Set version with the specified int.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @param version The int value to which version is to be set.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("void ASDM::setVersion (int version)  {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("if (hasBeenAdded) {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("this->version = version;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Get xmlnsPrefix.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @return xmlnsPrefix as string");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("string ASDM::getXmlnsPrefix() const {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("return xmlnsPrefix;");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* Set xmlnsPrefix with the specified string.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("* @param xmlnsPrefix The string value to which xmlnsPrefix is to be set.");
    _builder.newLine();
    _builder.append(" \t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("void ASDM::setXmlnsPrefix (string xmlnsPrefix)  {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("if (hasBeenAdded) {");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("this->xmlnsPrefix = xmlnsPrefix;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("void ");
    String _name_59 = this.container.getName();
    _builder.append(_name_59, " \t");
    _builder.append("::error() {");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    _builder.append("throw ConversionException(\"Invalid xml document\",\"");
    String _name_60 = this.container.getName();
    _builder.append(_name_60, " \t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("string ");
    String _name_61 = this.container.getName();
    _builder.append(_name_61, " \t");
    _builder.append("::getXMLEntity(EntityId) {");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    _builder.append("throw ConversionException(\"Not implemented\",\"");
    String _name_62 = this.container.getName();
    _builder.append(_name_62, " \t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("void ");
    String _name_63 = this.container.getName();
    _builder.append(_name_63, " \t");
    _builder.append("::putXMLEntity(string) {");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    _builder.append("throw ConversionException(\"Not implemented\",\"");
    String _name_64 = this.container.getName();
    _builder.append(_name_64, " \t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("} // End namespace asdm");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toXML() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("string ");
    String _name = this.container.getName();
    _builder.append(_name, "");
    _builder.append("::toXML()   {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("string out;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?> \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\"<");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:");
    _builder.append(this.container.xmlnsPrefix, "\t");
    _builder.append("=\\\"http://Alma/XASDM/ASDM\\\" xsi:schemaLocation=\\\"http://Alma/XASDM/");
    String _name_2 = this.container.getName();
    _builder.append(_name_2, "\t");
    _builder.append(" http://almaobservatory.org/XML/XASDM/");
    String _version = this.container.getVersion();
    _builder.append(_version, "\t");
    _builder.append("/");
    String _name_3 = this.container.getName();
    _builder.append(_name_3, "\t");
    _builder.append(".xsd\\\" schemaVersion=\\\"");
    String _version_1 = this.container.getVersion();
    _builder.append(_version_1, "\t");
    _builder.append("\\\" schemaRevision=\\\"");
    String _revision = AlmaTableContainer.getRevision();
    _builder.append(_revision, "\t");
    _builder.append("\\\"> \");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (entity.isNull())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Container entity cannot be null.\",\"Container\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(entity.toXML());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\" \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\"<TimeOfCreation> \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(timeOfCreation.toFITS());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\" \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\"</TimeOfCreation>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < table.size(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"<Table> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"<Name> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(table[i]->getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\" \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"</Name> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"<NumberRows> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(Integer::toString(table[i]->size()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\" \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"</NumberRows> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (table[i]->size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (table[i]->getEntity().isNull())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Table entity is null.\",table[i]->getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("out.append(table[i]->getEntity().toXML());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\" \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("out.append(\"</Table> \");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("out.append(\"</");
    String _name_4 = this.container.getName();
    _builder.append(_name_4, "\t");
    _builder.append(">\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return out;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence fromXML() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = this.container.getName();
    _builder.append(_name, "");
    _builder.append("::fromXML(string xmlDoc)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Parser xml(xmlDoc);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!xml.isStr(\"<");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\")) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s = xml.getElement(\"<Entity\",\"/>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("e.setFromXML(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (e.getEntityTypeName() != \"");
    String _name_2 = this.container.getName();
    _builder.append(_name_2, "\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setEntity(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElementContent(\"<TimeOfCreation>\",\"</TimeOfCreation>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayTime t(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//setTimeOfCreation(t);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("timeOfCreation = t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Do we have an element startTimeDurationInXML");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElement(\"<startTimeDurationInXML\",\"/>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() != 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayTimeInterval::readStartTimeDurationInXML(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayTimeInterval::readStartTimeDurationInXML(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Do we have an element startTimeDurationInBin");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElement(\"<startTimeDurationInBin\",\"/>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() != 0) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayTimeInterval::readStartTimeDurationInBin(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayTimeInterval::readStartTimeDurationInBin(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Get each table in the dataset.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("s = xml.getElementContent(\"<Table>\",\"</Table>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (s.length() != 0) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Parser tab(s);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = tab.getElementContent(\"<Name>\",\"</Name>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string tableName = s;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = tab.getElementContent(\"<NumberRows>\",\"</NumberRows>\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int numberRows = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("numberRows = Integer::parseInt(s);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getTable(tableName).declaredSize = numberRows;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("if (numberRows > 0 ) {");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("s = tab.getElementContent(\"<Entity\",\"/>\");");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("if (s.length() == 0) ");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("Entity tabE;");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("tabE.setFromXML(s);");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("if (tabE.getEntityTypeName() != (tableName + \"Table\"))");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("error();");
    _builder.newLine();
    _builder.append("\t\t\t   ");
    _builder.append("tableEntity[tableName] = tabE;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (NumberFormatException err) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("error(); // Expected to happen while parsing the number of rows.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (InvalidArgumentException err) {");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("; // This happens when the name of a table which is not recognized by this");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("// version of the software. Then we simply ignore it !");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("s = xml.getElementContent(\"<Table>\",\"</Table>\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!xml.isStr(\"</");
    String _name_3 = this.container.getName();
    _builder.append(_name_3, "\t");
    _builder.append(">\")) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("error();\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toFile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = this.container.getName();
    _builder.append(_name, "");
    _builder.append("::toFile(string directory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (!directoryExists(directory.c_str()) &&");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("!createPath(directory.c_str())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not create directory \" , directory);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Firstly send the container to its file.\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (fileAsBin) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// write the bin serialized");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string fileName = directory + \"/");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "\t\t\t");
    _builder.append(".bin\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("ofstream tableout(fileName.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + fileName, \"");
    String _name_2 = this.container.getName();
    _builder.append(_name_2, "\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("tableout << toMIME() << endl;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tableout.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + fileName, \"");
    String _name_3 = this.container.getName();
    _builder.append(_name_3, "\t\t\t\t");
    _builder.append("\");\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// write the XML");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string fileName = directory + \"/");
    String _name_4 = this.container.getName();
    _builder.append(_name_4, "\t\t\t");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("ofstream tableout(fileName.c_str(),ios::out|ios::trunc);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + fileName , \"");
    String _name_5 = this.container.getName();
    _builder.append(_name_5, "\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("tableout << toXML() << endl;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tableout.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (tableout.rdstate() == ostream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + fileName, \"");
    String _name_6 = this.container.getName();
    _builder.append(_name_6, "\t\t\t\t");
    _builder.append("\");\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Then send each of its table to its own file.");
    _builder.newLine();
    {
      List<AlmaTable> _tables = this.container.getTables();
      for(final AlmaTable table : _tables) {
        _builder.append("\t\t");
        _builder.append("if (get");
        String _name_7 = table.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("().size() > 0) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("get");
        String _name_8 = table.getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append("().toFile(directory);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence setFromFile() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void ");
    String _name = this.container.getName();
    _builder.append(_name, "");
    _builder.append("::setFromFile(string directory, bool loadTablesOnDemand) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this->setFromFile(directory, ASDMParseOptions().loadTablesOnDemand(loadTablesOnDemand));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ");
    String _name_1 = this.container.getName();
    _builder.append(_name_1, "");
    _builder.append("::setFromFile(string directory, const ASDMParseOptions& parse) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this->loadTablesOnDemand_ = parse.loadTablesOnDemand_;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this->checkRowUniqueness_ = parse.checkRowUniqueness_;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this->directory_          = directory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string fileName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (fileAsBin) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fileName = directory + \"/");
    String _name_2 = this.container.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append(".bin\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("// Determine the file size.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ifstream::pos_type size;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ifstream theFile(fileName.c_str(), ios::in|ios::binary|ios::ate);");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("if (theFile.is_open()) { ");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("size = theFile.tellg(); ");
    _builder.newLine();
    _builder.append("  \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not open file \" + fileName, \"");
    String _name_3 = this.container.getName();
    _builder.append(_name_3, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Re position to the beginning.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("theFile.seekg(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Read in a stringstream.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("stringstream ss;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ss << theFile.rdbuf();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (theFile.rdstate() == istream::failbit || theFile.rdstate() == istream::badbit) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Error reading file \" + fileName,\"");
    String _name_4 = this.container.getName();
    _builder.append(_name_4, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// And close");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("theFile.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (theFile.rdstate() == istream::failbit)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Could not close file \" + fileName,\"");
    String _name_5 = this.container.getName();
    _builder.append(_name_5, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setFromMIME(ss.str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fileName = directory + \"/");
    String _name_6 = this.container.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".xml\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("string version ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ASDMUtils::Origin origin;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try { ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("version = parse.detectVersion_ ? ASDMUtils::version(directory_) : parse.version_;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("origin = parse.detectOrigin_ ? ASDMUtils::origin(ASDMUtils::telescopeNames(directory_)) : parse.origin_;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (ASDMUtilsException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException (\"Caught an exception whose message is \'\" + e.getMessage() + \"\'.\", \"");
    String _name_7 = this.container.getName();
    _builder.append(_name_7, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if ((version == \"UNKNOWN\") && (origin == ASDMUtils::UNKNOWN))");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("throw ConversionException(\"I cannot read this dataset with version=\'UNKNOWN\' and origin=\'UNKNOWN\'\", \"");
    String _name_8 = this.container.getName();
    _builder.append(_name_8, "    \t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("string xsltPath;");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("bool proceed = (origin == ASDMUtils::EVLA)  ");
    _builder.newLine();
    _builder.append("    \t\t\t    ");
    _builder.append("|| (version.compare(\"3\") && ( origin == ASDMUtils::ALMA)); // If it\'s an ALMA then we must check its version.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("string xmlDoc;");
    _builder.newLine();
    _builder.append(" \t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("if (proceed) {");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("if (origin == ASDMUtils::EVLA)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("xsltPath = ASDMUtils::pathToV2V3EVLAxslTransform();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("xsltPath = ASDMUtils::pathToV2V3ALMAxslTransform();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (xsltPath.size() == 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throw ConversionException(\"An XSL transformation must be done on this \'\" + ((origin==ASDMUtils::EVLA) ? string(\"EVLA\") : string(\"ALMA\")) + \"\' dataset, but its file , \'\" + ASDMUtils::nameOfV2V3xslTransform(origin) + \"\' cannot be found.\", \"");
    String _name_9 = this.container.getName();
    _builder.append(_name_9, "\t\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("xslTransformer.setTransformation(xsltPath);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//cout << \"An XSL transformation will be done on this dataset using \'\" << xsltPath << \"\'.\" << endl;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//cout << \"No transformation will be applied on this dataset.\" << endl;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("xmlDoc = getXSLTransformer()(fileName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (XSLTransformerException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Caugth an exception whose message is \'\" + e.getMessage() + \"\'.\", \"");
    String _name_10 = this.container.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fromXML(xmlDoc);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!loadTablesOnDemand_) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Now read and parse all files for the tables whose number of rows appear as");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// non null in the container just built.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Entity entity;");
    _builder.newLine();
    {
      List<AlmaTable> _tables = this.container.getTables();
      for(final AlmaTable table : _tables) {
        _builder.append("\t\t");
        _builder.append("entity = tableEntity[\"");
        String _name_11 = table.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("\"];");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("if (entity.getEntityId().getId().length()  != 0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("get");
        String _name_12 = table.getName();
        _builder.append(_name_12, "\t\t\t");
        _builder.append("().setFromFile(directory_);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}else{");
    _builder.newLine();
    {
      List<AlmaTable> _tables_1 = this.container.getTables();
      for(final AlmaTable table_1 : _tables_1) {
        _builder.append("\t\t");
        _builder.append("get");
        String _name_13 = table_1.getName();
        _builder.append(_name_13, "\t\t");
        _builder.append("().presentInMemory = tableEntity[\"");
        String _name_14 = table_1.getName();
        _builder.append(_name_14, "\t\t");
        _builder.append("\"].getEntityId().getId().length() == 0;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("origin = FILE;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("bool ");
    String _name_15 = this.container.getName();
    _builder.append(_name_15, "");
    _builder.append("::checkRowUniqueness() const { return checkRowUniqueness_; }");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
