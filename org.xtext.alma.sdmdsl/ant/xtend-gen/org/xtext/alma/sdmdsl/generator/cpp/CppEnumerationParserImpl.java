package org.xtext.alma.sdmdsl.generator.cpp;

import alma.hla.datamodel.meta.enumeration.EnumerationContainer;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.alma.enumeration.enumeration.EnumType;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;

@SuppressWarnings("all")
public class CppEnumerationParserImpl {
  private EnumerationContainer enumerationContainer = EnumerationContainer.getInstance();
  
  public void doGenerate(final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    SDMFileSystemAccess sdmFsa = ((SDMFileSystemAccess) fsa);
    sdmFsa.setFile("src/EnumerationParser.cpp");
    CharSequence _generateEnumerationParserImpl = this.generateEnumerationParserImpl();
    sdmFsa.generateFile(_generateEnumerationParserImpl);
  }
  
  public CharSequence generateEnumerationParserImpl() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ALMA - Atacama Large Millimeter Array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) European Southern Observatory, 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) Associated Universities Inc., 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by ESO (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by AUI (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is free software; you can redistribute it and/or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* modify it under the terms of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License as published by the Free software Foundation; either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* version 2.1 of the License, or (at your option) any later version.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* but WITHOUT ANY WARRANTY, without even the implied warranty of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Lesser General Public License for more details.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You should have received a copy of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License along with this library; if not, write to the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Foundation, Inc., 59 Temple Place, Suite 330, Boston,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MA 02111-1307  USA");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* /////////////////////////////////////////////////////////////////");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // WARNING!  DO NOT MODIFY THIS FILE!                          //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* //  ---------------------------------------------------------  //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // | This is generated code!  Do not modify this file.       | //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // | Any changes will be lost when the file is re-generated. | //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* //  ---------------------------------------------------------  //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* /////////////////////////////////////////////////////////////////");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* File EnumerationParser.cpp");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("#include \"EnumerationParser.h\"");
    _builder.newLine();
    _builder.append("#include <sstream>");
    _builder.newLine();
    _builder.append("#include <stdlib.h> // for atoi()");
    _builder.newLine();
    _builder.append("#include <errno.h>  // to detect exception raised by atoi.");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("using namespace asdm;");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("namespace asdm {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string EnumerationParser::getField(const string &xml, const string &field) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string::size_type b = xml.find(\"<\" + field + \">\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (b == string::npos)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b += field.length() + 2;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string::size_type e = xml.find(\"</\" + field + \">\",b);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (e == string::npos)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string s = substring(xml,b,e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return trim(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string EnumerationParser::substring(const string &s, int a, int b) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return s.substr(a,(b - a));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string EnumerationParser::trim(const string &s) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string::size_type i = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (s.at(i) == \' \' && i < s.length())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("++i;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (i == s.length())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string::size_type j = s.length() - 1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (s.at(j) == \' \' && j > i)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("--j;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return substring(s,i,j + 1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      List<EnumType> _enumerations = this.enumerationContainer.getEnumerations();
      for(final EnumType enumType : _enumerations) {
        _builder.append("\t");
        CharSequence _dotCpp = this.dotCpp(enumType);
        _builder.append(_dotCpp, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("} // namespace asdm.");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence dotCpp(final EnumType enumType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("string EnumerationParser::toXML(const string& elementName, ");
    String _name = enumType.getName();
    _builder.append(_name, "");
    _builder.append("Mod::");
    String _name_1 = enumType.getName();
    _builder.append(_name_1, "");
    _builder.append(" e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return \"<\"+elementName+\">\"+C");
    String _name_2 = enumType.getName();
    _builder.append(_name_2, "\t");
    _builder.append("::name(e)+\"</\"+elementName+\">\";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("string EnumerationParser::toXML(const string& elementName, const vector<");
    String _name_3 = enumType.getName();
    _builder.append(_name_3, "");
    _builder.append("Mod::");
    String _name_4 = enumType.getName();
    _builder.append(_name_4, "");
    _builder.append(">& v_e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ostringstream oss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<\" << elementName << \">\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" 1\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" << v_e.size();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < v_e.size(); i++) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("oss << \" \" << C");
    String _name_5 = enumType.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append("::name(v_e.at(i));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss << \"</\" << elementName << \">\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return oss.str();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("string EnumerationParser::toXML(const string& elementName, const vector<vector<");
    String _name_6 = enumType.getName();
    _builder.append(_name_6, "");
    _builder.append("Mod::");
    String _name_7 = enumType.getName();
    _builder.append(_name_7, "");
    _builder.append("> >& vv_e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ostringstream oss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<\" << elementName << \">\"  ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" 2\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" <<vv_e.size()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" <<vv_e.at(0).size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < vv_e.size(); i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (unsigned int j = 0; j < vv_e.at(i).size(); j++) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("oss << \" \" << C");
    String _name_8 = enumType.getName();
    _builder.append(_name_8, "\t\t\t");
    _builder.append("::name(vv_e.at(i).at(j));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss << \"</\" << elementName << \">\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return oss.str();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("string EnumerationParser::toXML(const string& elementName, const vector<vector<vector<");
    String _name_9 = enumType.getName();
    _builder.append(_name_9, "");
    _builder.append("Mod::");
    String _name_10 = enumType.getName();
    _builder.append(_name_10, "");
    _builder.append("> > >& vvv_e) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("ostringstream oss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("oss << \"<\" << elementName << \">\"  ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" 3\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" <<vvv_e.size()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" <<vvv_e.at(0).size()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<< \" \" <<vvv_e.at(0).at(0).size();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (unsigned int i = 0; i < vvv_e.size(); i++)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (unsigned int j = 0; j < vvv_e.at(i).size(); j++)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (unsigned int k = 0; k < vvv_e.at(i).at(j).size(); k++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("oss << \" \" << C");
    String _name_11 = enumType.getName();
    _builder.append(_name_11, "\t\t\t\t");
    _builder.append("::name(vvv_e.at(i).at(j).at(k));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("oss << \"</\" << elementName << \">\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return oss.str();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _name_12 = enumType.getName();
    _builder.append(_name_12, "");
    _builder.append("Mod::");
    String _name_13 = enumType.getName();
    _builder.append(_name_13, "");
    _builder.append(" EnumerationParser::get");
    String _name_14 = enumType.getName();
    _builder.append(_name_14, "");
    _builder.append("(const string &name, const string &tableName, const string &xmlDoc) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("string s = getField(xmlDoc,name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (s.length() == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Error: Missing field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax\",tableName);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_15 = enumType.getName();
    _builder.append(_name_15, "\t");
    _builder.append(" result;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("result = C");
    String _name_16 = enumType.getName();
    _builder.append(_name_16, "\t\t");
    _builder.append("::new");
    String _name_17 = enumType.getName();
    _builder.append(_name_17, "\t\t");
    _builder.append("(s);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Error: could not convert \'\"+s+\"\' into a ");
    String _name_18 = enumType.getName();
    _builder.append(_name_18, "\t\t\t");
    _builder.append(".\", tableName);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("vector<");
    String _name_19 = enumType.getName();
    _builder.append(_name_19, "");
    _builder.append("Mod::");
    String _name_20 = enumType.getName();
    _builder.append(_name_20, "");
    _builder.append("> EnumerationParser::get");
    String _name_21 = enumType.getName();
    _builder.append(_name_21, "");
    _builder.append("1D(const string &name, const string &tableName, const string &xmlDoc) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vector<");
    String _name_22 = enumType.getName();
    _builder.append(_name_22, "\t");
    _builder.append("Mod::");
    String _name_23 = enumType.getName();
    _builder.append(_name_23, "\t");
    _builder.append(">\tresult;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s = getField(xmlDoc,name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (s.length() == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Error: Missing field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax\",tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("istringstream iss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("iss.str(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vector<string> tokens;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Tokenize.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string buf;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (iss >> buf) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tokens.push_back(buf);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The length must be 2 at the minimum (there may be an empty array)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() < 2) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: missing values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The number of dimension should be 1.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.at(0) != \"1\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong dimensionality in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Then parse the size of the unique dimension");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size1 = atoi(tokens.at(1).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size1 < 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the unique dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() != (unsigned int) (size1 + 2))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: incorrect number of values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int k = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0 ; i < (unsigned int) size1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("result.push_back(C");
    String _name_24 = enumType.getName();
    _builder.append(_name_24, "\t\t\t ");
    _builder.append("::new");
    String _name_25 = enumType.getName();
    _builder.append(_name_25, "\t\t\t ");
    _builder.append("(tokens.at(k).c_str()));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t ");
    _builder.append("k++;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ConversionException(\"Error: in \'\" + s + \"\' could not convert \'\"+tokens.at(k)+\"\' into a ");
    String _name_26 = enumType.getName();
    _builder.append(_name_26, "\t\t\t");
    _builder.append(".\", tableName);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("vector<vector<");
    String _name_27 = enumType.getName();
    _builder.append(_name_27, "");
    _builder.append("Mod::");
    String _name_28 = enumType.getName();
    _builder.append(_name_28, "");
    _builder.append("> > EnumerationParser::get");
    String _name_29 = enumType.getName();
    _builder.append(_name_29, "");
    _builder.append("2D(const string &name, const string &tableName, const string &xmlDoc) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vector<vector<");
    String _name_30 = enumType.getName();
    _builder.append(_name_30, "\t");
    _builder.append("Mod::");
    String _name_31 = enumType.getName();
    _builder.append(_name_31, "\t");
    _builder.append("> >\tresult;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s = getField(xmlDoc,name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: Missing field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax\",tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("istringstream iss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("iss.str(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vector<string> tokens;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Tokenize.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string buf;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (iss >> buf) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tokens.push_back(buf);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The length must be 3 at the minimum (there may be an empty array)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() < 3) ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: missing values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\" + s +\"\')\",tableName);\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The number of dimension should be 2.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.at(0) != \"2\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong dimensionality in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Then parse the size of the two dimensions");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size1 = atoi(tokens.at(1).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size1 <= 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the first dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName); ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size2 = atoi(tokens.at(2).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size2 < 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the second dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() != (unsigned int) (size1*size2 + 3))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: incorrect number of values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int k = 3;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vector<");
    String _name_32 = enumType.getName();
    _builder.append(_name_32, "\t\t");
    _builder.append("Mod::");
    String _name_33 = enumType.getName();
    _builder.append(_name_33, "\t\t");
    _builder.append("> v_aux;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < (unsigned int) size1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("v_aux.clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (unsigned int j = 0; j < (unsigned int) size2; j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("v_aux.push_back(C");
    String _name_34 = enumType.getName();
    _builder.append(_name_34, "\t\t\t\t");
    _builder.append("::new");
    String _name_35 = enumType.getName();
    _builder.append(_name_35, "\t\t\t\t");
    _builder.append("(tokens.at(k).c_str()));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("k++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result.push_back(v_aux);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: in \'\" + s + \"\' could not convert \'\"+tokens.at(k)+\"\' into a ");
    String _name_36 = enumType.getName();
    _builder.append(_name_36, "\t\t");
    _builder.append(".\", tableName);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return result;\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("vector<vector<vector<");
    String _name_37 = enumType.getName();
    _builder.append(_name_37, "");
    _builder.append("Mod::");
    String _name_38 = enumType.getName();
    _builder.append(_name_38, "");
    _builder.append("> > > EnumerationParser::get");
    String _name_39 = enumType.getName();
    _builder.append(_name_39, "");
    _builder.append("3D(const string &name, const string &tableName, const string &xmlDoc) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vector<vector<vector<");
    String _name_40 = enumType.getName();
    _builder.append(_name_40, "\t");
    _builder.append("Mod::");
    String _name_41 = enumType.getName();
    _builder.append(_name_41, "\t");
    _builder.append("> >\t>result;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string s = getField(xmlDoc,name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (s.length() == 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: Missing field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax\",tableName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("istringstream iss;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("iss.str(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vector<string> tokens;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Tokenize.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string buf;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (iss >> buf) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tokens.push_back(buf);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The length must be 4 at the minimum (there may be an empty array)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() < 4)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: missing values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\" + s +\"\')\",tableName);\t ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The number of dimension should be 3.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.at(0) != \"3\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong dimensionality in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Then parse the size of the three dimensions");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size1 = atoi(tokens.at(1).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size1 <= 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the first dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName); ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size2 = atoi(tokens.at(2).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size2 <= 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the first dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName); ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("errno = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size3 = atoi(tokens.at(3).c_str());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (errno != 0) throw ConversionException(\"Error: Field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("name + \"\\\": Invalid XML syntax (\'\" + s +\"\')\", tableName);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (size3 < 0)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: wrong size for the second dimension \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (tokens.size() != (unsigned int) (size1*size2*size3 + 4))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error: incorrect number of values in field \\\"\" + ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("name + \"\\\" or invalid syntax(\'\" + s +\"\')\",tableName);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int k = 4;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vector<");
    String _name_42 = enumType.getName();
    _builder.append(_name_42, "\t\t");
    _builder.append("Mod::");
    String _name_43 = enumType.getName();
    _builder.append(_name_43, "\t\t");
    _builder.append("> v_aux;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("vector<vector<");
    String _name_44 = enumType.getName();
    _builder.append(_name_44, "\t\t");
    _builder.append("Mod::");
    String _name_45 = enumType.getName();
    _builder.append(_name_45, "\t\t");
    _builder.append("> > vv_aux;\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (unsigned int i = 0; i < (unsigned int) size1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("vv_aux.clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (unsigned int j = 0; j < (unsigned int) size2; j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("v_aux.clear();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (unsigned int l = 0; l < (unsigned int) size3; l++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("v_aux.push_back(C");
    String _name_46 = enumType.getName();
    _builder.append(_name_46, "\t\t\t\t\t");
    _builder.append("::new");
    String _name_47 = enumType.getName();
    _builder.append(_name_47, "\t\t\t\t\t");
    _builder.append("(tokens.at(k).c_str()));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("k++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vv_aux.push_back(v_aux);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result.push_back(vv_aux);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("catch (...) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw ConversionException(\"Error:in \'\" + s + \"\' could not convert \'\"+tokens.at(k)+\"\' into a ");
    String _name_48 = enumType.getName();
    _builder.append(_name_48, "\t\t");
    _builder.append(".\", tableName);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return result;\t");
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
}
