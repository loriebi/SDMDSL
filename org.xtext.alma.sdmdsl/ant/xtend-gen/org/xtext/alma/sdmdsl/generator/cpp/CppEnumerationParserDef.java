package org.xtext.alma.sdmdsl.generator.cpp;

import alma.hla.datamodel.meta.enumeration.EnumerationContainer;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.alma.enumeration.enumeration.EnumType;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;

@SuppressWarnings("all")
public class CppEnumerationParserDef {
  private EnumerationContainer enumerationContainer = EnumerationContainer.getInstance();
  
  public void doGenerate(final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    SDMFileSystemAccess sdmFsa = ((SDMFileSystemAccess) fsa);
    sdmFsa.setFile("include/EnumerationParser.h");
    CharSequence _generateEnumerationParserDef = this.generateEnumerationParserDef();
    sdmFsa.generateFile(_generateEnumerationParserDef);
  }
  
  public CharSequence generateEnumerationParserDef() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ALMA - Atacama Large Millimeter Array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) European Southern Observatory, 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) Associated Universities Inc., 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by ESO (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by AUI (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is free software; you can redistribute it and/or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* modify it under the terms of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License as published by the Free software Foundation; either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* version 2.1 of the License, or (at your option) any later version.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* but WITHOUT ANY WARRANTY, without even the implied warranty of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Lesser General Public License for more details.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You should have received a copy of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License along with this library; if not, write to the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Foundation, Inc., 59 Temple Place, Suite 330, Boston,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MA 02111-1307  USA");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* /////////////////////////////////////////////////////////////////");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // WARNING!  DO NOT MODIFY THIS FILE!                          //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* //  ---------------------------------------------------------  //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // | This is generated code!  Do not modify this file.       | //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* // | Any changes will be lost when the file is re-generated. | //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* //  ---------------------------------------------------------  //");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* /////////////////////////////////////////////////////////////////");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* File CEnumerationParser.h");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("#include <string>");
    _builder.newLine();
    _builder.append("#include <ConversionException.h>");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.newLine();
    {
      List<EnumType> _enumerations = this.enumerationContainer.getEnumerations();
      boolean _hasElements = false;
      for(final EnumType enumType : _enumerations) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "");
        }
        _builder.append("#include \"C");
        String _name = enumType.getName();
        _builder.append(_name, "");
        _builder.append(".h\"");
        _builder.newLineIfNotEmpty();
        _builder.append("using namespace ");
        String _name_1 = enumType.getName();
        _builder.append(_name_1, "");
        _builder.append("Mod;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("namespace asdm {");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("class EnumerationParser {");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("static string getField(const string &xml, const string &field);");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("static string substring(const string &s, int a, int b);");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("static string trim(const string &s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public:");
    _builder.newLine();
    {
      List<EnumType> _enumerations_1 = this.enumerationContainer.getEnumerations();
      for(final EnumType enumType_1 : _enumerations_1) {
        _builder.append("\t\t");
        CharSequence _dotH = this.dotH(enumType_1);
        _builder.append(_dotH, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("} // namespace asdm.");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence dotH(final EnumType enumType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a string which represents a XML element ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* with name \'elementName\' and a content equal to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the string associated to \'e\'");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param elementName a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param e  ");
    String _name = enumType.getName();
    _builder.append(_name, " ");
    _builder.append("Mod::");
    String _name_1 = enumType.getName();
    _builder.append(_name_1, " ");
    _builder.append(" value.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static string toXML(const string& elementName, ");
    String _name_2 = enumType.getName();
    _builder.append(_name_2, "");
    _builder.append("Mod::");
    String _name_3 = enumType.getName();
    _builder.append(_name_3, "");
    _builder.append(" e);");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a string which represents a XML element ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* with name \'elementName\' and of content equal to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the number of elements of \'v_e\' followed by sequence of strings associated to each element of \'v_e\'");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param elementName a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param v_e  a const reference to a vector<");
    String _name_4 = enumType.getName();
    _builder.append(_name_4, " ");
    _builder.append("Mod::");
    String _name_5 = enumType.getName();
    _builder.append(_name_5, " ");
    _builder.append(">.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static string toXML(const string& elementName, const vector<");
    String _name_6 = enumType.getName();
    _builder.append(_name_6, "");
    _builder.append("Mod::");
    String _name_7 = enumType.getName();
    _builder.append(_name_7, "");
    _builder.append(">& v_e);");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a string which represents a XML element ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* with name \'elementName\' and of content equal to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the number of elements of \'vv_e\' followed by sequence of strings associated to each element of \'vv_e\'.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param elementName a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param vv_e  a const reference to a vector<vector<");
    String _name_8 = enumType.getName();
    _builder.append(_name_8, " ");
    _builder.append("Mod::");
    String _name_9 = enumType.getName();
    _builder.append(_name_9, " ");
    _builder.append("> >.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("static string toXML(const string& elementName, const vector<vector<");
    String _name_10 = enumType.getName();
    _builder.append(_name_10, "");
    _builder.append("Mod::");
    String _name_11 = enumType.getName();
    _builder.append(_name_11, "");
    _builder.append("> >& vv_e); ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a string which represents a XML element ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* with name \'elementName\' and of content equal to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* the number of elements of \'vvv_e\' followed by sequence of strings associated to each element of \'vvv_e\'.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param elementName a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param vvv_e  a const reference to a vector<vector<vector<");
    String _name_12 = enumType.getName();
    _builder.append(_name_12, " ");
    _builder.append("Mod::");
    String _name_13 = enumType.getName();
    _builder.append(_name_13, " ");
    _builder.append("> > >.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a string.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("static string toXML(const string& elementName, const vector<vector<vector<");
    String _name_14 = enumType.getName();
    _builder.append(_name_14, "");
    _builder.append("Mod::");
    String _name_15 = enumType.getName();
    _builder.append(_name_15, "");
    _builder.append("> > >& vvv_e);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a ");
    String _name_16 = enumType.getName();
    _builder.append(_name_16, " ");
    _builder.append("Mod::");
    String _name_17 = enumType.getName();
    _builder.append(_name_17, " ");
    _builder.append(" from a string.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param xml the string to be converted into a ");
    String _name_18 = enumType.getName();
    _builder.append(_name_18, " ");
    _builder.append("Mod::");
    String _name_19 = enumType.getName();
    _builder.append(_name_19, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a ");
    String _name_20 = enumType.getName();
    _builder.append(_name_20, " ");
    _builder.append("Mod::");
    String _name_21 = enumType.getName();
    _builder.append(_name_21, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static ");
    String _name_22 = enumType.getName();
    _builder.append(_name_22, "");
    _builder.append("Mod::");
    String _name_23 = enumType.getName();
    _builder.append(_name_23, "");
    _builder.append(" get");
    String _name_24 = enumType.getName();
    _builder.append(_name_24, "");
    _builder.append("(const string &name, const string &tableName, const string &xmlDoc);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a vector<");
    String _name_25 = enumType.getName();
    _builder.append(_name_25, " ");
    _builder.append("Mod::");
    String _name_26 = enumType.getName();
    _builder.append(_name_26, " ");
    _builder.append("> from a string.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param xml the string to be converted into a vector<");
    String _name_27 = enumType.getName();
    _builder.append(_name_27, " ");
    _builder.append("Mod::");
    String _name_28 = enumType.getName();
    _builder.append(_name_28, " ");
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a vector<");
    String _name_29 = enumType.getName();
    _builder.append(_name_29, " ");
    _builder.append("Mod::");
    String _name_30 = enumType.getName();
    _builder.append(_name_30, " ");
    _builder.append(">.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static vector<");
    String _name_31 = enumType.getName();
    _builder.append(_name_31, "");
    _builder.append("Mod::");
    String _name_32 = enumType.getName();
    _builder.append(_name_32, "");
    _builder.append("> get");
    String _name_33 = enumType.getName();
    _builder.append(_name_33, "");
    _builder.append("1D(const string &name, const string &tableName, const string &xmlDoc);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a vector<vector<");
    String _name_34 = enumType.getName();
    _builder.append(_name_34, " ");
    _builder.append("Mod::");
    String _name_35 = enumType.getName();
    _builder.append(_name_35, " ");
    _builder.append("> > from a string.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param xml the string to be converted into a vector<vector<");
    String _name_36 = enumType.getName();
    _builder.append(_name_36, " ");
    _builder.append("Mod::");
    String _name_37 = enumType.getName();
    _builder.append(_name_37, " ");
    _builder.append("> >");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a vector<vector<");
    String _name_38 = enumType.getName();
    _builder.append(_name_38, " ");
    _builder.append("Mod::");
    String _name_39 = enumType.getName();
    _builder.append(_name_39, " ");
    _builder.append("> >.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static vector<vector<");
    String _name_40 = enumType.getName();
    _builder.append(_name_40, "");
    _builder.append("Mod::");
    String _name_41 = enumType.getName();
    _builder.append(_name_41, "");
    _builder.append("> > get");
    String _name_42 = enumType.getName();
    _builder.append(_name_42, "");
    _builder.append("2D(const string &name, const string &tableName, const string &xmlDoc);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Returns a vector<vector<vector<");
    String _name_43 = enumType.getName();
    _builder.append(_name_43, " ");
    _builder.append("Mod::");
    String _name_44 = enumType.getName();
    _builder.append(_name_44, " ");
    _builder.append("> > > from a string.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param xml the string to be converted into a vector<vector<vector<");
    String _name_45 = enumType.getName();
    _builder.append(_name_45, " ");
    _builder.append("Mod::");
    String _name_46 = enumType.getName();
    _builder.append(_name_46, " ");
    _builder.append("> > >");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return a vector<vector<vector<");
    String _name_47 = enumType.getName();
    _builder.append(_name_47, " ");
    _builder.append("Mod::");
    String _name_48 = enumType.getName();
    _builder.append(_name_48, " ");
    _builder.append("> > >.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static vector<vector<vector<");
    String _name_49 = enumType.getName();
    _builder.append(_name_49, "");
    _builder.append("Mod::");
    String _name_50 = enumType.getName();
    _builder.append(_name_50, "");
    _builder.append("> > > get");
    String _name_51 = enumType.getName();
    _builder.append(_name_51, "");
    _builder.append("3D(const string &name, const string &tableName, const string &xmlDoc);");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
