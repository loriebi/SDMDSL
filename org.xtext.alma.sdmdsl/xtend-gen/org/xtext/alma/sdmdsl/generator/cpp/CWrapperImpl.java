package org.xtext.alma.sdmdsl.generator.cpp;

import alma.hla.datamodel.meta.asdm.AlmaTable;
import alma.hla.datamodel.meta.asdm.AlmaTableContainer;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.alma.sdmdsl.generator.cpp.CTableWrapperImpl;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;

@SuppressWarnings("all")
public class CWrapperImpl {
  private AlmaTableContainer container = AlmaTableContainer.getInstance();
  
  public void doGenerate(final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    SDMFileSystemAccess sdmFsa = ((SDMFileSystemAccess) fsa);
    sdmFsa.setFile("src/sdmWrapper.cpp");
    CharSequence _generateCWrapperImpl = this.generateCWrapperImpl();
    sdmFsa.generateFile(_generateCWrapperImpl);
  }
  
  public CharSequence generateCWrapperImpl() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ALMA - Atacama Large Millimeter Array");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) European Southern Observatory, 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (c) Associated Universities Inc., 2002");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by ESO (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright by AUI (in the framework of the ALMA collaboration),");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* All rights reserved.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is free software; you can redistribute it and/or");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* modify it under the terms of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License as published by the Free software Foundation; either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* version 2.1 of the License, or (at your option) any later version.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This library is distributed in the hope that it will be useful,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* but WITHOUT ANY WARRANTY, without even the implied warranty of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Lesser General Public License for more details.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* You should have received a copy of the GNU Lesser General Public");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* License along with this library; if not, write to the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Foundation, Inc., 59 Temple Place, Suite 330, Boston,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* MA 02111-1307  USA");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* File sdmWrapper.cpp");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.append("#include <string.h>");
    _builder.newLine();
    _builder.append("#include <dirent.h>");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("using namespace std;");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("#include <ASDMAll.h>");
    _builder.newLine();
    _builder.append("// *** binaries not included at this time... ***");
    _builder.newLine();
    _builder.append("//#include \"SDMBinaryBlock.h\"");
    _builder.newLine();
    _builder.append("//#include \"SDMBinaryExceptions.h\"");
    _builder.newLine();
    _builder.append("//#include \"TPBinaryBlock.h\"");
    _builder.newLine();
    _builder.append("//using namespace asdmBinary;");
    _builder.newLine();
    _builder.append("// *** binaries not included at this time... ***");
    _builder.newLine();
    _builder.append("using namespace asdm;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#undef max");
    _builder.newLine();
    _builder.append("#define max(a,b) ((a) > (b) ? (a) : (b))");
    _builder.newLine();
    _builder.append("#undef min");
    _builder.newLine();
    _builder.append("#define min(a,b) ((a) < (b) ? (a) : (b))");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("#define sdm_init  sdm_init_");
    _builder.newLine();
    _builder.append("#define sdm_write sdm_write_");
    _builder.newLine();
    _builder.append("#define sdm_close sdm_close_");
    _builder.newLine();
    _builder.append("#define sdm_getbinary sdm_getbinary_");
    _builder.newLine();
    _builder.append("#define sdm_writebinary sdm_writebinary_");
    _builder.newLine();
    _builder.append("#define sdm_getTPbinary sdm_gettpbinary_");
    _builder.newLine();
    _builder.append("#define sdm_writeTPbinary sdm_writetpbinary_");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    {
      List<AlmaTable> _sortedAlmaTable = this.container.sortedAlmaTable();
      for(final AlmaTable table : _sortedAlmaTable) {
        _builder.append("#define sdm_add");
        String _name = table.getName();
        _builder.append(_name, "");
        _builder.append("Row sdm_add");
        String _ToLowerCase = table.ToLowerCase();
        _builder.append(_ToLowerCase, "");
        _builder.append("row_");
        _builder.newLineIfNotEmpty();
        _builder.append("#define sdm_get");
        String _name_1 = table.getName();
        _builder.append(_name_1, "");
        _builder.append("Row sdm_get");
        String _ToLowerCase_1 = table.ToLowerCase();
        _builder.append(_ToLowerCase_1, "");
        _builder.append("row_");
        _builder.newLineIfNotEmpty();
        _builder.append("#define sdm_get");
        String _name_2 = table.getName();
        _builder.append(_name_2, "");
        _builder.append("TableSize sdm_get");
        String _ToLowerCase_2 = table.ToLowerCase();
        _builder.append(_ToLowerCase_2, "");
        _builder.append("tablesize_");
        _builder.newLineIfNotEmpty();
        _builder.append("#define sdm_get");
        String _name_3 = table.getName();
        _builder.append(_name_3, "");
        _builder.append("Keys sdm_get");
        String _ToLowerCase_3 = table.ToLowerCase();
        _builder.append(_ToLowerCase_3, "");
        _builder.append("keys_");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("extern \"C\" void sdm_init(char *, bool *);");
    _builder.newLine();
    _builder.append("extern \"C\" void sdm_write();");
    _builder.newLine();
    _builder.append("extern \"C\" void sdm_close();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace asdm {    ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* This class is derived from the pure virtual class BinaryAttributeReaderFunctor.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* It implements the behaviour of the reading machinery when a simple boolean");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* value has to be read . ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* In our case , the behaviour is reduced to one simple thing : just");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* read one boolean value out of  the EndianIStream.");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("class BinaryBooleanAttributeReader : public BinaryAttributeReaderFunctor { ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("bool value;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("virtual void operator() (EndianIStream& eis);   ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("virtual ~BinaryBooleanAttributeReader();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("void BinaryBooleanAttributeReader::operator()(EndianIStream& eis) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("value = eis.readBoolean();                                          ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("BinaryBooleanAttributeReader::~BinaryBooleanAttributeReader() {;}                          ");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("ASDM * dataset;");
    _builder.newLine();
    _builder.append("string datasetDirectory;  ");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void sdm_init(char * directoryName, bool * error) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("*error = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Read from directory");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// cout<<\"directoryName=\"<<directoryName<<endl;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("datasetDirectory=string(directoryName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dataset=0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Check if directory exists and then, if ASDM.xml exists");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (opendir(directoryName)!=NULL) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("string asdmFile= datasetDirectory+\"/ASDM.xml\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (fopen(asdmFile.c_str(),\"r\")!=NULL) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// dataset = ASDM::getFromXML(datasetDirectory);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dataset = new ASDM();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// We want to define what has to be done when the TotalPower is read as a binary document and  an attribute \"flagRow\" is met ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// that we want to just to skip.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BinaryBooleanAttributeReader bbar;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Attach the behaviour defined in bbar to the attribute \"flagRow\" in the totalpower table.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("TotalPowerTable& tpT = dataset->getTotalPower();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("const string unknownAttributeName(\"flagRow\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Call bbar functor each time the attribute flagRow is met . ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tpT.setUnknownAttributeBinaryReader(unknownAttributeName, &bbar);  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("dataset->setFromFile(datasetDirectory);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// cout<<\"Dataset initialized from \"<<datasetDirectory<<endl;");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("cout<<\"Directory \"<<datasetDirectory<<\" does not exist\"<<endl;");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("catch (ConversionException e) {");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("cout << e.getMessage() << endl;");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (dataset==0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cout<<\"Create new dataset in \"<<datasetDirectory<<endl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dataset = new ASDM();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void sdm_write() {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("cout<<\"sdm_write()\"<<endl;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if (dataset==0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cout<<\"No dataset initialized\"<<endl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("dataset->toFile(datasetDirectory);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cout << \"The dataset has been saved in the directory \" << datasetDirectory << endl;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("catch (ConversionException e) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("cout << e.getMessage() << endl;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void sdm_close() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// cout<<\"sdm_close()\"<<endl;");
    _builder.newLine();
    _builder.append("//   dataset->toXML(datasetDirectory);");
    _builder.newLine();
    _builder.append("//   cout << \"The dataset has been saved in the directory \" << datasetDirectory << endl;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("delete dataset;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("dataset = 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    CTableWrapperImpl _cTableWrapperImpl = new CTableWrapperImpl();
    CharSequence _doGenerate = _cTableWrapperImpl.doGenerate();
    _builder.append(_doGenerate, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
