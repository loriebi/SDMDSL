
/*
 ALMA - Atacama Large Millimeter Array
 (c) European Southern Observatory, 2002
 (c) Associated Universities Inc., 2002
 Copyright by ESO (in the framework of the ALMA collaboration),
 Copyright by AUI (in the framework of the ALMA collaboration),
 All rights reserved.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY, without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 MA 02111-1307  USA

 Warning!
  -------------------------------------------------------------------- 
 | This is generated code!  Do not modify this file.                  |
 | If you do, all changes will be lost when the file is re-generated. |
  --------------------------------------------------------------------

 File CalAppPhaseTable.table
*/

 package alma.asdm.tables
 

 /*
 The CalAppPhase table is relevant to the ALMA observatory when the antennas are being phased to form a coherent sum during the observation. For each scan, the table provides information about which antennas are included in the sum, their relative phase adjustments, the efficiency of the sum (relative to best performance) and the quality of each antenna participating in the system. This data is used in real-time to provide the phased sum signal, and after the observation to analyze the result.
 */
 table CalAppPhase {
 	Key:
 	
 		BasebandName basebandName  			
		

	
 /* identifies the baseband.|identifies the baseband. */
 	
 		Integer scanNumber  			
		

	
 /* The number of the scan processed by TELCAL. Along with an ExecBlock Id (which should be ExecBlock\\_0 most of the time), the value of scanNumber can be used as the key to retrieve informations related to the scan (e.g. its start time). |The number of the scan processed by TELCAL. Along with an ExecBlock Id (which should be
ExecBlock\\_0 most of thetime), thevalue of scanNumber can be used as the key to retrieve informations related to the scan (e.g. its start time). */
 	
 		Tag calDataId  						refersToOne CalData 
			
		
	
 /* identifies a unique row in the CalData table.|identifies a unique row in the CalData table. */
 	
 		Tag calReductionId  						refersToOne CalReduction 
			
		
	
 /* identifies a unique row in the CalReduction table.|identifies a unique row in the CalReduction table. */
 	
 	Required Data:
 	
 		ArrayTime startValidTime  			
		

	
  /* start of phasing solution validity.|The start of the interval in which the phase solution was calculated. Normally the first few seconds of each scan include data before the previous slow phasing solution can be applied, so the valid interval corresponds to the last phasing correction. */
 	
 		ArrayTime endValidTime  			
		

	
  /* end of phasing solution validity.|The end of the interval in which the phase solution was calculated. Note that \\f[ startTime < startValidTime < endValidTime \\le endTime \\f]. */
 	
 		ArrayTime adjustTime  			
		

	
  /* The time of the last adjustment to the phasing analysis via the \\c ParameterTuning  interface.| Usually, this is the timestamp of the commanding of the last slow phasing correction. However, other adjustments might also have been made (e.g. \\c phasedArray membership changed in the correlator hardware).| The time of the last adjustment to the phasing analysis via the \\c ParameterTuning interface. Usually, this is the timestamp of the commanding of the last slow phasing correction. However, other adjustments might also have been made (e.g. \\c phasedArray membership changed in the correlator hardware). */
 	
 		String adjustToken  			
		

	
  /* A parameter supplied via the \\c ParameterTuning interface to indicate the form of adjustment(s) made at adjustTime. Note that TELCAL merely passes this datum and adjustTime through to this table.| A parameter supplied via the \\c ParameterTuning interface to indicate the form of adjustment(s) made at \\c adjustTime . Note that TELCAL merely passes this datum and adjustTime through to this table. */
 	
 		String phasingMode  			
		

	
  /* The mode in which the phasing system is being operated.|The mode in which the phasing system is being operated. */
 	
 		Integer numPhasedAntennas  			
		

	
  /* the number of antennas in phased sum, \\f\\$N_p\\f\\$.|The number of antennas included in the phased sum. */
 	
 		String phasedAntennas  [numPhasedAntennas]  									
		
	
		

	
  /* the names of the phased antennas.|The names of the \\f\\$ N_p \\f\\$ antennas contributing to the phased sum. */
 	
 		Integer refAntennaIndex  			
		

	
  /* the index of the reference antenna in the array \\c phasedAntennas . It must be an integer value in the interval \\f\\$ [0, N_p-1]\\f\\$.|the index of the reference antenna in the array \\c phasedAntennas. It must be an integer value in the array \\c phasedAntennas. */
 	
 		Integer candRefAntennaIndex  			
		

	
  /* tne index of a candidate (new) reference antenna in the array phasedAntennas; it must be a integer in the interval \\f\\$[0, N_p-1]\\f\\$.|TELCAL may recommend the adoption of a candidate (new) \\c refAntenna  with this entry (index in \\c phasedAntennas ). This recommendation is always available (in case the current reference antenna becomes unsuitable for some reason), but the VOM is not obliged to adopt the recommendation. It must be an integer in the interval \\f\\$[0, Np-1]\\f\\$. */
 	
 		String phasePacking  			
		

	
  /* how to unpack \\c phaseValues.| Indicates one of several possibilities for converting the phase data into TFB commands. */
 	
 		Integer numReceptors  			
		

	
  /* the number of receptors per antenna, \\f\\$N_r\\f\\$.The number (\\f\\$N_r \\le 2 \\f\\$) of receptors per antenna, usually two (polarizations), but it might be one in special cases.|the number of receptors per antenna, \\f\\$N_r\\f\\$.The number (\\f\\$N_r \\le 2 \\f\\$) of receptors per antenna usually two (polarizations), but it might be one in special cases. */
 	
 		Integer numChannels  			
		

	
  /* the number of data channels, \\f\\$N_d\\f\\$. |The number of data channels for which efficiency data is presented, \\f\\$N_d\\f\\$. */
 	
 		Integer numPhaseValues  			
		

	
  /* The number  of phase data values present in the table, \\f\\$N_v\\f\\$.|The number of phase data values present in the table, \\f\\$N_v\\f\\$. */
 	
 		Float phaseValues  [numPhaseValues]  									
		
	
		

	
  /* the array of phase data values.|An array containing the \\f\\$N_v\\f\\$ phase data values. */
 	
 		Integer numCompare  			
		

	
  /* the number of comparison antennas, \\f\\$N_c\\f\\$.| The number  of antennas not included in the phased sum, \\f\\$N_c\\f\\$. */
 	
 		Integer numEfficiencies  			
		

	
  /* the number of efficiencies, \\f\\$N_e\\f\\$.| The number \\f\\$N_e\\f\\$ of antennas in the array \\c compareArray  used to calculate efficiencies. */
 	
 		String compareArray  [numCompare]  									
		
	
		

	
  /* the names of the comparison antennas.|The names of the antennas not in the phased sum, which could be used as comparison antenna. The array of available antennas (to the observation) has \\f\\$(N_p + 1 + N_c)\\f\\$ members; \\f\\$N_p\\f\\$ are in the phase-sum, one is the phased-sum, and \\f\\$N_c\\f\\$ are not. */
 	
 		Integer efficiencyIndices  [numEfficiencies]  									
		
	
		

	
  /* indices of the antenna(s) in \\c compareArray used to calculate \\c efficiencies; they must be distinct integers in the interval \\f\\$[0, N_c]\\f\\$.|A list of \\f\\$N_e\\f\\$  indices in \\c compareArray  for which efficiencies are calculated. The first index in the list refers to the nominal comparison antenna, the second index refers to a candidate replacement (should the first become unusable), and others may be listed. */
 	
 		Float efficiencies  [numEfficiencies][numChannels]  									
		
	
		

	
  /* an array of efficiencies of phased sum.|An array of normalized efficiencies for the phased sum for each data channel. Those for the \\c compAntenna are to be used for decisions; the other values are advisory. The efficiencies are provided per channel for each antenna of \\c compareArray  mentioned in the list \\c efficiencyIndices . */
 	
 		Float quality  [numPhasedAntennas+numCompare]  									
		
	
		

	
  /* quality of phased antennas.|A normalized figure of merit (\\f\\$ 0.0 \\le q \\le 1.0\\f\\$) expressing the quality of the solution for every antenna. */
 	
 		String phasedSumAntenna  			
		

	
  /* the name of the phased sum antenna.| The name of the antenna whose data is discarded in favor of the phased sum. The antenna is also known as \\c cai63Antenna . The efficiency is calculated through the correlation of this antenna with antennas referenced by \\c efficiencyIndices. */
 	 	
 	
 	Optional Data:
 	
 		String typeSupports   			
		

	
 /* encoding of supporting data values.|An indicator of which supporting data is being provided. */
 	
 		Integer numSupports   			
		

	
 /* the number of supporting data values, \\f\\$N_s\\f\\$.| The number of supporting data values present, \\f\\$N_s\\f\\$. */
 	
 		Float phaseSupports   [numSupports]  									
		
	
		

	
 /* an array of supporting data values.|An array of \\f\\$N_\\f\\$s supporting data values. The presence and use of this array is unspecified; but might include channel average frequencies or supplementary quality data as an assist in the implementation. (Indeed, there is a long list of such items that TelCal could compute.) */
 	 	
 
 }
