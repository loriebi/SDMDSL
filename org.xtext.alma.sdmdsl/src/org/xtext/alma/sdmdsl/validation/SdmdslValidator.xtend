/*
 * generated by Xtext
 */
package org.xtext.alma.sdmdsl.validation;

import java.io.File
import java.nio.file.Paths
import java.util.HashMap
import org.eclipse.xtext.validation.Check
import org.xtext.alma.sdmdsl.sdmdsl.Dimensions
import org.xtext.alma.sdmdsl.sdmdsl.Field
import org.xtext.alma.sdmdsl.sdmdsl.SdmdslPackage
import org.xtext.alma.sdmdsl.sdmdsl.Table

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */

class SdmdslValidator extends AbstractSdmdslValidator {
	
	/** error list */
	public static val DUPLICATE_FIELD_NAME = 'duplicateFieldNameInTable'
	public static val DUPLICATE_TABLE_NAME = 'duplicateTableName'
	public static val DIMENSION_INTEGER_TYPE_ERR = 'nonIntegerTypeDimension'
	public static val DIMENSION_INTEGER_FIELD_ERR = 'nonIntegerFieldDimension'
	public static val DIMENSION_INTEGER_TYPE_FIELD_ERR = 'nonIntegerTypeFieldDimension'
	public static val DIMENSION_FIELD_DIMENSION_ERR = 'nonScalarDimension'
	public static val FIELD_REFERENCE_TYPE_ERR = 'notProperReferenceType'
	public static val FIELD_REFERENCE_DIMENSION_ERR = 'notProperReferenceDimension'
	public static val FIELD_REFERENCE_TABLE_ERR = 'cantFindReferedTable'
	
	
	
	/**  Validation of unique fields inside the table */
	@Check
	def checkFieldNameIsUniqueInsideTable(Table table) {
		
		var map = new HashMap<String,Field>;
		
		for(Field f : table.keyData){
			if(map.containsKey(f.name)){
				error('Field names must be unique',
						f,
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
				error('Field names must be unique',
						map.get(f.name),
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
			}else{
				map.put(f.name,f);
			}
		}
		
		for(Field f : table.reqData){
			if(map.containsKey(f.name)){
				error('Field names must be unique',
						f,
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
				error('Field names must be unique',
						map.get(f.name),
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
			}else{
				map.put(f.name,f);
			}
		}
		
		for(Field f : table.optData){
			if(map.containsKey(f.name)){
				error('Field names must be unique',
						f,
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
				error('Field names must be unique',
						map.get(f.name),
						SdmdslPackage.Literals.FIELD__NAME,
						DUPLICATE_FIELD_NAME)
			}else{
				map.put(f.name,f);
			}
		}
	}
	
	
	/** Validation or refersToASlice, refersToOne, refersToMany */
	@Check
	def referenceValidation(Field field){
		
		
		if(field.refersTo != null){ 
		
			/* 
			if(!checkIfTableExists(field.refersTo + "Table")){
				error(field.refersTo + "table doesn't exist",
							field,
							SdmdslPackage.Literals.FIELD__REFERS_TO,
							FIELD_REFERENCE_TABLE_ERR)
			}
			*/
			
			//checking refersToOne 
			if(field.isRefsToOne){
				
				if(field.primitiveType == null){
					error('Field type must be Tag, because of refersToOne property',
							field,
							SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
							FIELD_REFERENCE_TYPE_ERR)
				}else {
					
					if(field.primitiveType != 'Tag'){
						error('Field type must be Tag, because of refersToOne property',
								field,
								SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
								FIELD_REFERENCE_TYPE_ERR)
					}
				
					if(field.dataDim.size != 0){
						error('Field must be scalar, because of refersToOne property',
								field,
								SdmdslPackage.Literals.FIELD__DATA_DIM,
								FIELD_REFERENCE_DIMENSION_ERR)
					}
				}
			
			}
			
			
			
			//checking refersToMany 
			if(field.isRefsToMany){
				
				if(field.primitiveType == null){
					error('Field type must be Tag, because of refersToMany property',
							field,
							SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
							FIELD_REFERENCE_TYPE_ERR)
				}else {
					
					if(field.primitiveType != 'Tag'){
						error('Field type must be Tag, because of refersToMany property',
								field,
								SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
								FIELD_REFERENCE_TYPE_ERR)
					}
				
					if(field.dataDim.size == 0){
						error('Field must be non scalar, because of refersToMany property',
								field,
								SdmdslPackage.Literals.FIELD__DATA_DIM,
								FIELD_REFERENCE_DIMENSION_ERR)
					}
				}
			
			}
			
			/* 
			//checking refersToASlice 
			if(field.isRefsToAslice){
				
				if(field.primitiveType == null){
					error('Field type must be Tag, because of refersToASlice property',
							field,
							SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
							FIELD_REFERENCE_TYPE_ERR)
				}else {
					
					if(field.primitiveType != 'Tag'){
						error('Field type must be Tag, because of refersToASlice property',
								field,
								SdmdslPackage.Literals.FIELD__PRIMITIVE_TYPE,
								FIELD_REFERENCE_TYPE_ERR)
					}
				
					if(field.dataDim.size == 0){
						error('Field must not be scalar, because of refersToASlice property',
								field,
								SdmdslPackage.Literals.FIELD__DATA_DIM,
								FIELD_REFERENCE_DIMENSION_ERR)
					}
				}
			
			}*/
		
		}
		
	}
	
	
	
	/** Validation of field dimensions  */
	@Check
	def fieldDimensionValidation(Field field){
		
		//System.out.println(field.dataDim.size())
		
		//checking of first dimension 
		for(obj : field.dataDim.filter(Dimensions)){
			
			
			
			/* 
			if(obj.dimValue instanceof FieldDimensions){
				
				if(((obj.dimValue as FieldDimensions).dimValue.primitiveType) != null){
					
					if(!(((obj.dimValue as FieldDimensions).dimValue.primitiveType).equals("Integer"))){
							
							//System.out.println(((obj.dimValue as FieldDimensions).dimValue.type.name.toString))
							error('Dimension must be an integer field',
								obj,
								SdmdslPackage.Literals.DIMENSIONS__DIM_VALUE,
								DIMENSION_INTEGER_FIELD_ERR)
								
					}
					
				}else{
					error('Dimension must be an integer field',
								obj,
								SdmdslPackage.Literals.DIMENSIONS__DIM_VALUE,
								DIMENSION_INTEGER_FIELD_ERR)
				}
				
				if((obj.dimValue as FieldDimensions).dimValue.dataDim.size != 0){
					
					
					//System.out.println((obj.dimValue as FieldDimensions).dimValue.dataDim)
					error("Dimension value must be scalar",
						obj,
						SdmdslPackage.Literals.DIMENSIONS__DIM_VALUE,
						DIMENSION_FIELD_DIMENSION_ERR)
					
				}
				
				
			}*/
				
		}
		
		
		/*  old version -- with two dimension parts
		//checking of other dimensions
		for(obj : field.dataDim.filter(DimensionsOther)){
			
		
			
			if(obj.dimValue instanceof FieldDimensions){
				
				if(((obj.dimValue as FieldDimensions).dimValue.primitiveType) != null){
					
					if(!(((obj.dimValue as FieldDimensions).dimValue.primitiveType).equals("Integer"))){
							
							//System.out.println(((obj.dimValue as FieldDimensions).dimValue.type.name.toString))
							error('Dimension must be an integer field',
								obj,
								SdmdslPackage.Literals.DIMENSIONS_OTHER__DIM_VALUE,
								DIMENSION_INTEGER_FIELD_ERR)
								
					}
					
				}else {
					
					error('Dimension must be an integer field',
								obj,
								SdmdslPackage.Literals.DIMENSIONS_OTHER__DIM_VALUE,
								DIMENSION_INTEGER_FIELD_ERR)
								
				}
				
				
				if((obj.dimValue as FieldDimensions).dimValue.dataDim.size != 0){
					
					error("Dimension value must be scalar",
						obj,
						SdmdslPackage.Literals.DIMENSIONS_OTHER__DIM_VALUE,
						DIMENSION_FIELD_DIMENSION_ERR)
					
				}
				
			}
				
		}
		*/
		
		
	}
	
	
	
	/*  
	 * checks if table exists in the same directory...
	 * if table is not in the same directory validation will failed
	 * searching tableName.sdm file...
	 * */
	 /* 
	def boolean checkIfTableExists(String tableName){
		
		
		// System.out.println(tableName)
		// getting absolute path
		var currentRelativePath = Paths.get("") 
		var absPath = currentRelativePath.toAbsolutePath().toString() 
		absPath += "/tables"
		
		// searching tableName.sdm file
		var folder = new File(absPath) 
		var listOfFiles = folder.listFiles() 
		
		for(file : listOfFiles){
			if(file.isFile){
				if(file.name.equals(tableName + ".sdm"))
					return true
			}
		}
			
		return false
	}
	*/
}