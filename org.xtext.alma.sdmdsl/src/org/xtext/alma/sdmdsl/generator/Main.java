/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.sdmdsl.generator;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.alma.container.ContainerStandaloneSetupGenerated;
import org.xtext.alma.container.container.Container;
import org.xtext.alma.enumeration.EnumerationStandaloneSetupGenerated;
import org.xtext.alma.enumeration.enumeration.EnumType;
import org.xtext.alma.sdmdsl.SdmdslStandaloneSetupGenerated;
import org.xtext.alma.sdmdsl.generator.sdmfilesystem.SDMFileSystemAccess;
import org.xtext.alma.sdmdsl.sdmdsl.Model;
import org.xtext.alma.sdmdsl.sdmdsl.Table;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import alma.hla.datamodel.meta.asdm.AlmaTable;
import alma.hla.datamodel.meta.asdm.AlmaTableContainer;
import alma.hla.datamodel.meta.enumeration.EnumerationContainer;

public class Main {
	
	AlmaTableContainer tableContainer = AlmaTableContainer.getInstance();
	EnumerationContainer enumContainer = EnumerationContainer.getInstance();
	
	private static boolean validationStatus = false;

	
	private static String enum_dir = null;
	private static String table_dir = null;
	
	public static Logger logger = Logger.getLogger(Main.class);
	
	
	// inner class, generic extension filter
	public class GenericExtFilter implements FilenameFilter {

		private String ext;

		public GenericExtFilter(String ext) {
			this.ext = ext;
		}

		public boolean accept(File dir, String name) {
			return (name.endsWith(ext));
		}
	}
	
	private void discoverResources(ResourceSet set, String directory, String extension) throws Exception {
		logger.info("About to discover resources in files with extension '"+extension+"', located in directory '"+directory+"'.");
		File dir = new File(directory);
		
		if (!dir.exists()) {
			throw new Exception("'"+dir+"' does not exist.");
		}
		
		if ((!dir.isDirectory())) {
			throw new Exception("'"+dir+"' is not a directory.");
		}
		
		GenericExtFilter filter = new GenericExtFilter(extension);
		
		String[] fileNames = dir.list(filter);
		if (fileNames.length == 0) {
			throw new Exception("No file found with extension '"+extension+"'.");
		}

		for (String fileName : fileNames) {
			logger.info("Discovered resource '"+fileName+"'.");
			set.getResource(URI.createURI(directory+File.separator+fileName), true);
		}
		logger.info("Discovered " + fileNames.length + " resources.");
	}
	
	
	
	
	
	@SuppressWarnings("static-access")
	public static void main(String[] args) {
		
		if (args.length == 0) {
			logger.error("Aborting: no path to EMF resource provided!");
			return;
		}
		
		
		Options options = new Options();
		options.addOption(OptionBuilder.withLongOpt("enum-dir")
				.withDescription("Directory of 'enumeration' source files")
				.hasArg().withArgName("enum-dir-name")
				.create());
		options.addOption(OptionBuilder.withLongOpt("table-dir")
				.withDescription("Directory of 'table' source files")
				.hasArg().withArgName("table-dir-name")
				.create());
		
		
		CommandLineParser parser = new GnuParser();
		
		
		try {
			CommandLine line = parser.parse(options, args);
			
			
			/* enum-dir option */
			if (line.hasOption("enum-dir")) {
				Main.enum_dir=line.getOptionValue("enum-dir");
			}else{
				throw new Exception("The directory of `enum` files was not specified");
			}
			
			
			/* table-dir option */
			if (line.hasOption("table-dir")) {
				Main.table_dir=line.getOptionValue("table-dir");
			}else{
				throw new Exception("The directory of `table` files was not specified");
			}
			
			
		}
		catch (Exception e) {
			logger.error(e.getMessage());
			return;
		}
		
		
		
		// Let's inject enumeration and container languages
		Injector enumInjector = new EnumerationStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
		Injector containerInjector = new ContainerStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
		
		// Let's give a knowledge of enumeration and container to sdmdsl.
		SdmdslStandaloneSetupGenerated sdmdslssupg = new SdmdslStandaloneSetupGenerated();
		sdmdslssupg.register(enumInjector); 
		sdmdslssupg.register(containerInjector);

		Injector sdmInjector = sdmdslssupg.createInjectorAndDoEMFRegistration();
		
		Main main = sdmInjector.getInstance(Main.class);
		
		// runs generator
		try {
			main.runGenerator();
		} catch (Exception e) {
			logger.error(e.getMessage());
			e.printStackTrace();
			return;
		}
				
	}

	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	@Inject 
	private SDMFileSystemAccess sdmFileAccess;
	
	@Inject
	private SdmdslGenerator generator;
	
	
	
	
	protected void runGenerator() throws Exception {
		
		logger.info("Entering code generator");
		
		ResourceSet set = resourceSetProvider.get();
		List<Resource> enumList = new ArrayList<Resource>();
		List<Resource> tableList = new ArrayList<Resource>();
		List<Resource> containerList = new ArrayList<Resource>();
			
		/* Loading enumeration resources */		
		File enum_directory = new File(enum_dir);
		
		if (!enum_directory.exists()) {
			throw new Exception("'"+ enum_directory +"' no such directory.");
		}
		if (!enum_directory.isDirectory()) {
			throw new Exception("'"+ enum_directory +"' not a directory.");
		}
		
		logger.info("'.enum' resources will be looked for in '"+ enum_directory.toPath().toAbsolutePath().toString() +"'.");
		
		// Discover the enumeration resources in the directory provided on the command line.
		discoverResources(set,enum_directory.toPath().toString(), ".enum");
		
		
		logger.info("---------------------------------------------------------------------------");		
		
		
		/* Loading table container */
		File table_directory = new File(table_dir);
		if (!table_directory.exists()) {
			throw new Exception("'"+ table_directory +"' no such directory.");
		}
		if (!table_directory.isDirectory()) {
			throw new Exception("'"+ table_directory +"' not a directory.");
		}
		// Discover a container resource in the directory provided on the command line.
		discoverResources(set,table_directory.toPath().toString(), ".cont");
		
		logger.info("---------------------------------------------------------------------------");
		
		
		/* Loading table resources */		
		logger.info("'.table' resources will be looked for in '"+ table_directory.toPath().toAbsolutePath().toString() +"'.");
		
		// Discover the table resources in the directory provided on the command line.
		discoverResources(set,table_directory.toPath().toString(), ".table");
		
		
		/* filling enumList and tableList */
		for(Resource resource : set.getResources()){
			if(resource.getURI().toString().endsWith(".enum")){
				enumList.add(resource);

			}else if(resource.getURI().toString().endsWith(".table")){ 
				tableList.add(resource);		
			}else { // ends with .cont
				containerList.add(resource);
			}
		}
		
		
		/* validation of enum and smd resources */
		/*also construction of enumeration/almatable containers */
		logger.info("Starting validation!!!");
		logger.info("---------------------------------------------------------------------------");
		
		/* Container validation */
		if(containerList.size() == 0){
			logger.error("Container was not found!!!");
			logger.info("Aborting code generation!!!");
			logger.info("---------------------------------------------------------------------------");
			
			return;
		}
		if(containerList.size() > 1){
			logger.error("More than one container has been found!!!");
			logger.info("Aborting code generation!!!");
			logger.info("---------------------------------------------------------------------------");
			
			return;
		}else {
			List<Issue> list = 	validator.validate(containerList.get(0), CheckMode.ALL, CancelIndicator.NullImpl);
			if(!list.isEmpty()){
				for(Issue issue : list){
					logger.error(issue);
				}
				logger.error("Validation failed for " + containerList.get(0).getURI());
				logger.info("Aborting code generation!!!");
				logger.info("---------------------------------------------------------------------------");
				return;
			}
			
			logger.info("Validation succeeded for " + containerList.get(0).getURI());
			// initialization of container
			Container container = (Container) containerList.get(0).getContents().get(0);
			tableContainer.init(container);
			
		}
		
		
		
		
		
		/* Enumeration validation */
		for(int i=0;i<enumList.size();i++){
			List<Issue> list = 	validator.validate(enumList.get(i), CheckMode.ALL, CancelIndicator.NullImpl);
			if(!list.isEmpty()){
				for(Issue issue : list){
					logger.error(issue);
				}
				logger.error("Validation failed for " + enumList.get(i).getURI());
				logger.info("Aborting code generation!!!");
				logger.info("---------------------------------------------------------------------------");
				return;
			}
									
			logger.info("Validation succeeded for " + enumList.get(i).getURI());
			// adding enumeration to EnumerationContainer
			EnumType enumType = (EnumType) enumList.get(i).getContents().get(0);
			enumContainer.addTable(enumType);
		}
		
		
		/* Sdmdsl validation */
		for(int i=0;i<tableList.size();i++){
			List<Issue> list = 	validator.validate(tableList.get(i), CheckMode.ALL, CancelIndicator.NullImpl);
			if(!list.isEmpty()){
				for(Issue issue : list){
					logger.error(issue);
				}
				logger.error("Validation failed for " + tableList.get(i).getURI());
				logger.info("Aborting code generation!!!");
				logger.info("---------------------------------------------------------------------------");
				return;
			}
			
			logger.info("Validation succeeded for " + tableList.get(i).getURI());
			// adding Table to AlmaTableContainer
			Model model = (Model) tableList.get(i).getContents().get(0);
			Table table = (Table) model.getElement();
			AlmaTable almaTable = new AlmaTable(table);
			almaTable.init();
			tableContainer.addTable(almaTable);
		}

		logger.info("End of Validation!!!");
		logger.info("---------------------------------------------------------------------------");
		

		/* configure and start the generator */
		GeneratorContext gc = new GeneratorContext();
		gc.setCancelIndicator(CancelIndicator.NullImpl);
		sdmFileAccess.setOutputPath("generated");
		
		
		Main.logger.info("Starting generation!!!");
		Main.logger.info("---------------------------------------------------------------------------");
		
		// generator 
		generator.doGenerate(sdmFileAccess, gc);
		
		
		Main.logger.info("End of code generation!!!");
		Main.logger.info("---------------------------------------------------------------------------");
		
		
	}
}
