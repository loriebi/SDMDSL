/*
 * generated by Xtext 2.10.0
 */
grammar InternalContainer;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.alma.container.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.alma.container.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.alma.container.services.ContainerGrammarAccess;

}

@parser::members {

 	private ContainerGrammarAccess grammarAccess;

    public InternalContainerParser(TokenStream input, ContainerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Container";
   	}

   	@Override
   	protected ContainerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_doc_0_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_0_0, grammarAccess.getContainerAccess().getDocML_COMMENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_0_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
		otherlv_1='container'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainerAccess().getContainerKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getContainerAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getDataContainerFieldParserRuleCall_4_0());
				}
				lv_data_4_0=ruleContainerField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					add(
						$current,
						"data",
						lv_data_4_0,
						"org.xtext.alma.container.Container.ContainerField");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleContainerField
entryRuleContainerField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerFieldRule()); }
	iv_ruleContainerField=ruleContainerField
	{ $current=$iv_ruleContainerField.current; }
	EOF;

// Rule ContainerField
ruleContainerField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerFieldAccess().getPrimitiveTypePrimitiveTypesParserRuleCall_0_0());
				}
				lv_primitiveType_0_0=rulePrimitiveTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerFieldRule());
					}
					set(
						$current,
						"primitiveType",
						lv_primitiveType_0_0,
						"org.xtext.alma.container.Container.PrimitiveTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContainerFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_readOnly_2_0='readOnly'
				{
					newLeafNode(lv_readOnly_2_0, grammarAccess.getContainerFieldAccess().getReadOnlyReadOnlyKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerFieldRule());
					}
					setWithLastConsumed($current, "readOnly", true, "readOnly");
				}
			)
		)?
		(
			(
				lv_initValue_3_0=RULE_STRING
				{
					newLeafNode(lv_initValue_3_0, grammarAccess.getContainerFieldAccess().getInitValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerFieldRule());
					}
					setWithLastConsumed(
						$current,
						"initValue",
						lv_initValue_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				lv_doc_4_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_4_0, grammarAccess.getContainerFieldAccess().getDocML_COMMENTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerFieldRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_4_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
	)
;

// Entry rule entryRulePrimitiveTypes
entryRulePrimitiveTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypesRule()); }
	iv_rulePrimitiveTypes=rulePrimitiveTypes
	{ $current=$iv_rulePrimitiveTypes.current.getText(); }
	EOF;

// Rule PrimitiveTypes
rulePrimitiveTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getBasicTypeParserRuleCall_0());
		}
		this_BasicType_0=ruleBasicType
		{
			$current.merge(this_BasicType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getPhysicalTypeParserRuleCall_1());
		}
		this_PhysicalType_1=rulePhysicalType
		{
			$current.merge(this_PhysicalType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getTechnicalTypeParserRuleCall_2());
		}
		this_TechnicalType_2=ruleTechnicalType
		{
			$current.merge(this_TechnicalType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveTypesAccess().getTimeTypeParserRuleCall_3());
		}
		this_TimeType_3=ruleTimeType
		{
			$current.merge(this_TimeType_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current.getText(); }
	EOF;

// Rule BasicType
ruleBasicType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Char'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getCharKeyword_0());
		}
		    |
		kw='Short'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getShortKeyword_1());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getIntegerKeyword_2());
		}
		    |
		kw='Long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getLongKeyword_3());
		}
		    |
		kw='Float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getFloatKeyword_4());
		}
		    |
		kw='Double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getDoubleKeyword_5());
		}
		    |
		kw='Complex'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getComplexKeyword_6());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getStringKeyword_7());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getBooleanKeyword_8());
		}
	)
;

// Entry rule entryRulePhysicalType
entryRulePhysicalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPhysicalTypeRule()); }
	iv_rulePhysicalType=rulePhysicalType
	{ $current=$iv_rulePhysicalType.current.getText(); }
	EOF;

// Rule PhysicalType
rulePhysicalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Angle'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getAngleKeyword_0());
		}
		    |
		kw='AngularRate'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getAngularRateKeyword_1());
		}
		    |
		kw='Flux'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getFluxKeyword_2());
		}
		    |
		kw='Frequency'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getFrequencyKeyword_3());
		}
		    |
		kw='Humidity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getHumidityKeyword_4());
		}
		    |
		kw='Length'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getLengthKeyword_5());
		}
		    |
		kw='Pressure'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getPressureKeyword_6());
		}
		    |
		kw='Speed'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getSpeedKeyword_7());
		}
		    |
		kw='Temperature'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPhysicalTypeAccess().getTemperatureKeyword_8());
		}
	)
;

// Entry rule entryRuleTechnicalType
entryRuleTechnicalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTechnicalTypeRule()); }
	iv_ruleTechnicalType=ruleTechnicalType
	{ $current=$iv_ruleTechnicalType.current.getText(); }
	EOF;

// Rule TechnicalType
ruleTechnicalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Tag'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getTagKeyword_0());
		}
		    |
		kw='Entity'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityKeyword_1());
		}
		    |
		kw='EntityId'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityIdKeyword_2());
		}
		    |
		kw='EntityRef'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTechnicalTypeAccess().getEntityRefKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeType
entryRuleTimeType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeTypeRule()); }
	iv_ruleTimeType=ruleTimeType
	{ $current=$iv_ruleTimeType.current.getText(); }
	EOF;

// Rule TimeType
ruleTimeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Interval'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getIntervalKeyword_0());
		}
		    |
		kw='ArrayTime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getArrayTimeKeyword_1());
		}
		    |
		kw='ArrayTimeInterval'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeTypeAccess().getArrayTimeIntervalKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
