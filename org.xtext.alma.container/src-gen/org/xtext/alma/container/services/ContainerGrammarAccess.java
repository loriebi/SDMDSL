/*
 * generated by Xtext 2.10.0
 */
package org.xtext.alma.container.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ContainerGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataContainerFieldParserRuleCall_4_0 = (RuleCall)cDataAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Container:
		//	doc=ML_COMMENT?
		//	'container' name=ID '{'
		//	data+=ContainerField*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//doc=ML_COMMENT? 'container' name=ID '{' data+=ContainerField* '}'
		public Group getGroup() { return cGroup; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_0_0() { return cDocML_COMMENTTerminalRuleCall_0_0; }
		
		//'container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//data+=ContainerField*
		public Assignment getDataAssignment_4() { return cDataAssignment_4; }
		
		//ContainerField
		public RuleCall getDataContainerFieldParserRuleCall_4_0() { return cDataContainerFieldParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContainerFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.ContainerField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypesParserRuleCall_0_0 = (RuleCall)cPrimitiveTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cReadOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyReadOnlyKeyword_2_0 = (Keyword)cReadOnlyAssignment_2.eContents().get(0);
		private final Assignment cInitValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cInitValueAssignment_3.eContents().get(0);
		private final Assignment cDocAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocML_COMMENTTerminalRuleCall_4_0 = (RuleCall)cDocAssignment_4.eContents().get(0);
		
		//ContainerField:
		//	primitiveType=PrimitiveTypes name=ID readOnly?='readOnly'? initValue=STRING? doc=ML_COMMENT?;
		@Override public ParserRule getRule() { return rule; }
		
		//primitiveType=PrimitiveTypes name=ID readOnly?='readOnly'? initValue=STRING? doc=ML_COMMENT?
		public Group getGroup() { return cGroup; }
		
		//primitiveType=PrimitiveTypes
		public Assignment getPrimitiveTypeAssignment_0() { return cPrimitiveTypeAssignment_0; }
		
		//PrimitiveTypes
		public RuleCall getPrimitiveTypePrimitiveTypesParserRuleCall_0_0() { return cPrimitiveTypePrimitiveTypesParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//readOnly?='readOnly'?
		public Assignment getReadOnlyAssignment_2() { return cReadOnlyAssignment_2; }
		
		//'readOnly'
		public Keyword getReadOnlyReadOnlyKeyword_2_0() { return cReadOnlyReadOnlyKeyword_2_0; }
		
		//initValue=STRING?
		public Assignment getInitValueAssignment_3() { return cInitValueAssignment_3; }
		
		//STRING
		public RuleCall getInitValueSTRINGTerminalRuleCall_3_0() { return cInitValueSTRINGTerminalRuleCall_3_0; }
		
		//doc=ML_COMMENT?
		public Assignment getDocAssignment_4() { return cDocAssignment_4; }
		
		//ML_COMMENT
		public RuleCall getDocML_COMMENTTerminalRuleCall_4_0() { return cDocML_COMMENTTerminalRuleCall_4_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PrimitiveTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.PrimitiveTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPhysicalTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTechnicalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveTypes:
		//	BasicType | PhysicalType | TechnicalType | TimeType;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicType | PhysicalType | TechnicalType | TimeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }
		
		//PhysicalType
		public RuleCall getPhysicalTypeParserRuleCall_1() { return cPhysicalTypeParserRuleCall_1; }
		
		//TechnicalType
		public RuleCall getTechnicalTypeParserRuleCall_2() { return cTechnicalTypeParserRuleCall_2; }
		
		//TimeType
		public RuleCall getTimeTypeParserRuleCall_3() { return cTimeTypeParserRuleCall_3; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCharKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntegerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cComplexKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cStringKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//BasicType:
		//	'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Char'
		public Keyword getCharKeyword_0() { return cCharKeyword_0; }
		
		//'Short'
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
		
		//'Integer'
		public Keyword getIntegerKeyword_2() { return cIntegerKeyword_2; }
		
		//'Long'
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }
		
		//'Float'
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }
		
		//'Double'
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }
		
		//'Complex'
		public Keyword getComplexKeyword_6() { return cComplexKeyword_6; }
		
		//'String'
		public Keyword getStringKeyword_7() { return cStringKeyword_7; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }
	}
	public class PhysicalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.PhysicalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAngleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAngularRateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFluxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHumidityKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLengthKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPressureKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSpeedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cTemperatureKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//PhysicalType:
		//	'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature';
		@Override public ParserRule getRule() { return rule; }
		
		//'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Angle'
		public Keyword getAngleKeyword_0() { return cAngleKeyword_0; }
		
		//'AngularRate'
		public Keyword getAngularRateKeyword_1() { return cAngularRateKeyword_1; }
		
		//'Flux'
		public Keyword getFluxKeyword_2() { return cFluxKeyword_2; }
		
		//'Frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//'Humidity'
		public Keyword getHumidityKeyword_4() { return cHumidityKeyword_4; }
		
		//'Length'
		public Keyword getLengthKeyword_5() { return cLengthKeyword_5; }
		
		//'Pressure'
		public Keyword getPressureKeyword_6() { return cPressureKeyword_6; }
		
		//'Speed'
		public Keyword getSpeedKeyword_7() { return cSpeedKeyword_7; }
		
		//'Temperature'
		public Keyword getTemperatureKeyword_8() { return cTemperatureKeyword_8; }
	}
	public class TechnicalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.TechnicalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEntityIdKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEntityRefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TechnicalType:
		//	'Tag' | 'Entity' | 'EntityId' | 'EntityRef';
		@Override public ParserRule getRule() { return rule; }
		
		//'Tag' | 'Entity' | 'EntityId' | 'EntityRef'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Tag'
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//'EntityId'
		public Keyword getEntityIdKeyword_2() { return cEntityIdKeyword_2; }
		
		//'EntityRef'
		public Keyword getEntityRefKeyword_3() { return cEntityRefKeyword_3; }
	}
	public class TimeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.alma.container.Container.TimeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntervalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArrayTimeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cArrayTimeIntervalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TimeType:
		//	'Interval' | 'ArrayTime' | 'ArrayTimeInterval';
		@Override public ParserRule getRule() { return rule; }
		
		//'Interval' | 'ArrayTime' | 'ArrayTimeInterval'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Interval'
		public Keyword getIntervalKeyword_0() { return cIntervalKeyword_0; }
		
		//'ArrayTime'
		public Keyword getArrayTimeKeyword_1() { return cArrayTimeKeyword_1; }
		
		//'ArrayTimeInterval'
		public Keyword getArrayTimeIntervalKeyword_2() { return cArrayTimeIntervalKeyword_2; }
	}
	
	
	private final ContainerElements pContainer;
	private final ContainerFieldElements pContainerField;
	private final QualifiedNameElements pQualifiedName;
	private final PrimitiveTypesElements pPrimitiveTypes;
	private final BasicTypeElements pBasicType;
	private final PhysicalTypeElements pPhysicalType;
	private final TechnicalTypeElements pTechnicalType;
	private final TimeTypeElements pTimeType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ContainerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContainer = new ContainerElements();
		this.pContainerField = new ContainerFieldElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPrimitiveTypes = new PrimitiveTypesElements();
		this.pBasicType = new BasicTypeElements();
		this.pPhysicalType = new PhysicalTypeElements();
		this.pTechnicalType = new TechnicalTypeElements();
		this.pTimeType = new TimeTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.alma.container.Container".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Container:
	//	doc=ML_COMMENT?
	//	'container' name=ID '{'
	//	data+=ContainerField*
	//	'}';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//ContainerField:
	//	primitiveType=PrimitiveTypes name=ID readOnly?='readOnly'? initValue=STRING? doc=ML_COMMENT?;
	public ContainerFieldElements getContainerFieldAccess() {
		return pContainerField;
	}
	
	public ParserRule getContainerFieldRule() {
		return getContainerFieldAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PrimitiveTypes:
	//	BasicType | PhysicalType | TechnicalType | TimeType;
	public PrimitiveTypesElements getPrimitiveTypesAccess() {
		return pPrimitiveTypes;
	}
	
	public ParserRule getPrimitiveTypesRule() {
		return getPrimitiveTypesAccess().getRule();
	}
	
	//BasicType:
	//	'Char' | 'Short' | 'Integer' | 'Long' | 'Float' | 'Double' | 'Complex' | 'String' | 'Boolean';
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//PhysicalType:
	//	'Angle' | 'AngularRate' | 'Flux' | 'Frequency' | 'Humidity' | 'Length' | 'Pressure' | 'Speed' | 'Temperature';
	public PhysicalTypeElements getPhysicalTypeAccess() {
		return pPhysicalType;
	}
	
	public ParserRule getPhysicalTypeRule() {
		return getPhysicalTypeAccess().getRule();
	}
	
	//TechnicalType:
	//	'Tag' | 'Entity' | 'EntityId' | 'EntityRef';
	public TechnicalTypeElements getTechnicalTypeAccess() {
		return pTechnicalType;
	}
	
	public ParserRule getTechnicalTypeRule() {
		return getTechnicalTypeAccess().getRule();
	}
	
	//TimeType:
	//	'Interval' | 'ArrayTime' | 'ArrayTimeInterval';
	public TimeTypeElements getTimeTypeAccess() {
		return pTimeType;
	}
	
	public ParserRule getTimeTypeRule() {
		return getTimeTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
