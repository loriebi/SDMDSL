/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.sdmdsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.alma.sdmdsl.ide.contentassist.antlr.internal.InternalSdmdslParser;
import org.xtext.alma.sdmdsl.services.SdmdslGrammarAccess;

public class SdmdslParser extends AbstractContentAssistParser {

	@Inject
	private SdmdslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSdmdslParser createParser() {
		InternalSdmdslParser result = new InternalSdmdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimitiveTypesAccess().getAlternatives(), "rule__PrimitiveTypes__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getPhysicalTypeAccess().getAlternatives(), "rule__PhysicalType__Alternatives");
					put(grammarAccess.getTechnicalTypeAccess().getAlternatives(), "rule__TechnicalType__Alternatives");
					put(grammarAccess.getTimeTypeAccess().getAlternatives(), "rule__TimeType__Alternatives");
					put(grammarAccess.getFieldAccess().getAlternatives_0(), "rule__Field__Alternatives_0");
					put(grammarAccess.getFieldAccess().getAlternatives_2(), "rule__Field__Alternatives_2");
					put(grammarAccess.getFieldAccess().getAlternatives_4_0(), "rule__Field__Alternatives_4_0");
					put(grammarAccess.getGlobalFieldAccess().getAlternatives_0(), "rule__GlobalField__Alternatives_0");
					put(grammarAccess.getDimensionsAccess().getAlternatives(), "rule__Dimensions__Alternatives");
					put(grammarAccess.getAdditionAccess().getOpAlternatives_1_0_0(), "rule__Addition__OpAlternatives_1_0_0");
					put(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_0(), "rule__Multiplication__OpAlternatives_1_0_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getPrimaryAccess().getPrimValueAlternatives_0_0(), "rule__Primary__PrimValueAlternatives_0_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getTableAccess().getGroup_4(), "rule__Table__Group_4__0");
					put(grammarAccess.getTableAccess().getGroup_5(), "rule__Table__Group_5__0");
					put(grammarAccess.getTableAccess().getGroup_6(), "rule__Table__Group_6__0");
					put(grammarAccess.getTableAccess().getGroup_7(), "rule__Table__Group_7__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldAccess().getGroup_4(), "rule__Field__Group_4__0");
					put(grammarAccess.getFieldAccess().getGroup_4_2(), "rule__Field__Group_4_2__0");
					put(grammarAccess.getGlobalFieldAccess().getGroup(), "rule__GlobalField__Group__0");
					put(grammarAccess.getNotDefinedAccess().getGroup(), "rule__NotDefined__Group__0");
					put(grammarAccess.getDefinedAccess().getGroup(), "rule__Defined__Group__0");
					put(grammarAccess.getOtherTableFieldAccess().getGroup(), "rule__OtherTableField__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getModelAccess().getDocAssignment_0(), "rule__Model__DocAssignment_0");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getElementAssignment_3(), "rule__Model__ElementAssignment_3");
					put(grammarAccess.getTableAccess().getDocAssignment_0(), "rule__Table__DocAssignment_0");
					put(grammarAccess.getTableAccess().getNameAssignment_2(), "rule__Table__NameAssignment_2");
					put(grammarAccess.getTableAccess().getKeyLevelAssignment_4_0(), "rule__Table__KeyLevelAssignment_4_0");
					put(grammarAccess.getTableAccess().getKeyDataAssignment_4_2(), "rule__Table__KeyDataAssignment_4_2");
					put(grammarAccess.getTableAccess().getReqLevelAssignment_5_0(), "rule__Table__ReqLevelAssignment_5_0");
					put(grammarAccess.getTableAccess().getReqDataAssignment_5_2(), "rule__Table__ReqDataAssignment_5_2");
					put(grammarAccess.getTableAccess().getOptLevelAssignment_6_0(), "rule__Table__OptLevelAssignment_6_0");
					put(grammarAccess.getTableAccess().getOptDataAssignment_6_2(), "rule__Table__OptDataAssignment_6_2");
					put(grammarAccess.getTableAccess().getGlobalLevelAssignment_7_0(), "rule__Table__GlobalLevelAssignment_7_0");
					put(grammarAccess.getTableAccess().getGlobalDataAssignment_7_2(), "rule__Table__GlobalDataAssignment_7_2");
					put(grammarAccess.getFieldAccess().getPrimitiveTypeAssignment_0_0(), "rule__Field__PrimitiveTypeAssignment_0_0");
					put(grammarAccess.getFieldAccess().getEnumerationAssignment_0_1(), "rule__Field__EnumerationAssignment_0_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getScalarAssignment_2_0(), "rule__Field__ScalarAssignment_2_0");
					put(grammarAccess.getFieldAccess().getDataDimAssignment_2_1(), "rule__Field__DataDimAssignment_2_1");
					put(grammarAccess.getFieldAccess().getAutoIncrementableAssignment_3(), "rule__Field__AutoIncrementableAssignment_3");
					put(grammarAccess.getFieldAccess().getRefsToAsliceAssignment_4_0_0(), "rule__Field__RefsToAsliceAssignment_4_0_0");
					put(grammarAccess.getFieldAccess().getRefsToOneAssignment_4_0_1(), "rule__Field__RefsToOneAssignment_4_0_1");
					put(grammarAccess.getFieldAccess().getRefsToManyAssignment_4_0_2(), "rule__Field__RefsToManyAssignment_4_0_2");
					put(grammarAccess.getFieldAccess().getRefsToManySlicesAssignment_4_0_3(), "rule__Field__RefsToManySlicesAssignment_4_0_3");
					put(grammarAccess.getFieldAccess().getRefersToAssignment_4_1(), "rule__Field__RefersToAssignment_4_1");
					put(grammarAccess.getFieldAccess().getRefersTo2Assignment_4_2_1(), "rule__Field__RefersTo2Assignment_4_2_1");
					put(grammarAccess.getFieldAccess().getDocAssignment_5(), "rule__Field__DocAssignment_5");
					put(grammarAccess.getGlobalFieldAccess().getPrimitiveTypeAssignment_0_0(), "rule__GlobalField__PrimitiveTypeAssignment_0_0");
					put(grammarAccess.getGlobalFieldAccess().getEnumerationAssignment_0_1(), "rule__GlobalField__EnumerationAssignment_0_1");
					put(grammarAccess.getGlobalFieldAccess().getNameAssignment_1(), "rule__GlobalField__NameAssignment_1");
					put(grammarAccess.getGlobalFieldAccess().getReadOnlyAssignment_2(), "rule__GlobalField__ReadOnlyAssignment_2");
					put(grammarAccess.getGlobalFieldAccess().getInitValueAssignment_3(), "rule__GlobalField__InitValueAssignment_3");
					put(grammarAccess.getGlobalFieldAccess().getDocAssignment_4(), "rule__GlobalField__DocAssignment_4");
					put(grammarAccess.getNotDefinedAccess().getObjAssignment_0(), "rule__NotDefined__ObjAssignment_0");
					put(grammarAccess.getDefinedAccess().getDataDimValueAssignment_1(), "rule__Defined__DataDimValueAssignment_1");
					put(grammarAccess.getFieldDimensionsAccess().getDimValueAssignment(), "rule__FieldDimensions__DimValueAssignment");
					put(grammarAccess.getOtherTableFieldAccess().getNameAssignment_0(), "rule__OtherTableField__NameAssignment_0");
					put(grammarAccess.getOtherTableFieldAccess().getFieldNameAssignment_2(), "rule__OtherTableField__FieldNameAssignment_2");
					put(grammarAccess.getIntDimensionsAccess().getDimValueAssignment(), "rule__IntDimensions__DimValueAssignment");
					put(grammarAccess.getAdditionAccess().getAddValueAssignment_0(), "rule__Addition__AddValueAssignment_0");
					put(grammarAccess.getAdditionAccess().getOpAssignment_1_0(), "rule__Addition__OpAssignment_1_0");
					put(grammarAccess.getAdditionAccess().getAddValueAssignment_1_1(), "rule__Addition__AddValueAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getMultValueAssignment_0(), "rule__Multiplication__MultValueAssignment_0");
					put(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0(), "rule__Multiplication__OpAssignment_1_0");
					put(grammarAccess.getMultiplicationAccess().getMultValueAssignment_1_1(), "rule__Multiplication__MultValueAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getPrimValueAssignment_0(), "rule__Primary__PrimValueAssignment_0");
					put(grammarAccess.getPrimaryAccess().getPrimAddValueAssignment_1_1(), "rule__Primary__PrimAddValueAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSdmdslParser typedParser = (InternalSdmdslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public SdmdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SdmdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
