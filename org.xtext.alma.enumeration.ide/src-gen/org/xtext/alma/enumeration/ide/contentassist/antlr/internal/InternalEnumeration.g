/*
 * generated by Xtext 2.9.1
 */
grammar InternalEnumeration;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.alma.enumeration.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.alma.enumeration.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.alma.enumeration.services.EnumerationGrammarAccess;

}
@parser::members {
	private EnumerationGrammarAccess grammarAccess;

	public void setGrammarAccess(EnumerationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEnumType
entryRuleEnumType
:
{ before(grammarAccess.getEnumTypeRule()); }
	 ruleEnumType
{ after(grammarAccess.getEnumTypeRule()); } 
	 EOF 
;

// Rule EnumType
ruleEnumType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumTypeAccess().getGroup()); }
		(rule__EnumType__Group__0)
		{ after(grammarAccess.getEnumTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumValueWithoutComma
entryRuleEnumValueWithoutComma
:
{ before(grammarAccess.getEnumValueWithoutCommaRule()); }
	 ruleEnumValueWithoutComma
{ after(grammarAccess.getEnumValueWithoutCommaRule()); } 
	 EOF 
;

// Rule EnumValueWithoutComma
ruleEnumValueWithoutComma 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumValueWithoutCommaAccess().getGroup()); }
		(rule__EnumValueWithoutComma__Group__0)
		{ after(grammarAccess.getEnumValueWithoutCommaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumValue
entryRuleEnumValue
:
{ before(grammarAccess.getEnumValueRule()); }
	 ruleEnumValue
{ after(grammarAccess.getEnumValueRule()); } 
	 EOF 
;

// Rule EnumValue
ruleEnumValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumValueAccess().getGroup()); }
		(rule__EnumValue__Group__0)
		{ after(grammarAccess.getEnumValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__0__Impl
	rule__EnumType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getDocGlobalAssignment_0()); }
	(rule__EnumType__DocGlobalAssignment_0)?
	{ after(grammarAccess.getEnumTypeAccess().getDocGlobalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__1__Impl
	rule__EnumType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getVersionKeyword_1()); }
	'version'
	{ after(grammarAccess.getEnumTypeAccess().getVersionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__2__Impl
	rule__EnumType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getVersionAssignment_2()); }
	(rule__EnumType__VersionAssignment_2)
	{ after(grammarAccess.getEnumTypeAccess().getVersionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__3__Impl
	rule__EnumType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getRevisionKeyword_3()); }
	'revision'
	{ after(grammarAccess.getEnumTypeAccess().getRevisionKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__4__Impl
	rule__EnumType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getRevisionAssignment_4()); }
	(rule__EnumType__RevisionAssignment_4)
	{ after(grammarAccess.getEnumTypeAccess().getRevisionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__5__Impl
	rule__EnumType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getXmlnsKeyword_5()); }
	'xmlns'
	{ after(grammarAccess.getEnumTypeAccess().getXmlnsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__6__Impl
	rule__EnumType__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getXmlnsAssignment_6()); }
	(rule__EnumType__XmlnsAssignment_6)
	{ after(grammarAccess.getEnumTypeAccess().getXmlnsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__7__Impl
	rule__EnumType__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getDocEnumAssignment_7()); }
	(rule__EnumType__DocEnumAssignment_7)?
	{ after(grammarAccess.getEnumTypeAccess().getDocEnumAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__8__Impl
	rule__EnumType__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getEnumKeyword_8()); }
	'enum'
	{ after(grammarAccess.getEnumTypeAccess().getEnumKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__9__Impl
	rule__EnumType__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getNameAssignment_9()); }
	(rule__EnumType__NameAssignment_9)
	{ after(grammarAccess.getEnumTypeAccess().getNameAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__10__Impl
	rule__EnumType__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_10()); }
	'{'
	{ after(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__11__Impl
	rule__EnumType__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getValuesAssignment_11()); }
	(rule__EnumType__ValuesAssignment_11)
	{ after(grammarAccess.getEnumTypeAccess().getValuesAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__12__Impl
	rule__EnumType__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getValuesAssignment_12()); }
	(rule__EnumType__ValuesAssignment_12)*
	{ after(grammarAccess.getEnumTypeAccess().getValuesAssignment_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumType__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_13()); }
	'}'
	{ after(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumValueWithoutComma__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumValueWithoutComma__Group__0__Impl
	rule__EnumValueWithoutComma__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValueWithoutComma__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumValueWithoutCommaAccess().getNameAssignment_0()); }
	(rule__EnumValueWithoutComma__NameAssignment_0)
	{ after(grammarAccess.getEnumValueWithoutCommaAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValueWithoutComma__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumValueWithoutComma__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValueWithoutComma__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumValueWithoutCommaAccess().getDocAssignment_1()); }
	(rule__EnumValueWithoutComma__DocAssignment_1)?
	{ after(grammarAccess.getEnumValueWithoutCommaAccess().getDocAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumValue__Group__0__Impl
	rule__EnumValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumValueAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getEnumValueAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumValue__Group__1__Impl
	rule__EnumValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumValueAccess().getNameAssignment_1()); }
	(rule__EnumValue__NameAssignment_1)
	{ after(grammarAccess.getEnumValueAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumValueAccess().getDocAssignment_2()); }
	(rule__EnumValue__DocAssignment_2)?
	{ after(grammarAccess.getEnumValueAccess().getDocAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__DocGlobalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getDocGlobalML_COMMENTTerminalRuleCall_0_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getEnumTypeAccess().getDocGlobalML_COMMENTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__VersionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getVersionINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getEnumTypeAccess().getVersionINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__RevisionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getRevisionSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumTypeAccess().getRevisionSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__XmlnsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getXmlnsSTRINGTerminalRuleCall_6_0()); }
		RULE_STRING
		{ after(grammarAccess.getEnumTypeAccess().getXmlnsSTRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__DocEnumAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getDocEnumML_COMMENTTerminalRuleCall_7_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getEnumTypeAccess().getDocEnumML_COMMENTTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__NameAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getNameIDTerminalRuleCall_9_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumTypeAccess().getNameIDTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__ValuesAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getValuesEnumValueWithoutCommaParserRuleCall_11_0()); }
		ruleEnumValueWithoutComma
		{ after(grammarAccess.getEnumTypeAccess().getValuesEnumValueWithoutCommaParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__ValuesAssignment_12
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumTypeAccess().getValuesEnumValueParserRuleCall_12_0()); }
		ruleEnumValue
		{ after(grammarAccess.getEnumTypeAccess().getValuesEnumValueParserRuleCall_12_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValueWithoutComma__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumValueWithoutCommaAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumValueWithoutCommaAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValueWithoutComma__DocAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumValueWithoutCommaAccess().getDocML_COMMENTTerminalRuleCall_1_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getEnumValueWithoutCommaAccess().getDocML_COMMENTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__DocAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumValueAccess().getDocML_COMMENTTerminalRuleCall_2_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getEnumValueAccess().getDocML_COMMENTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
