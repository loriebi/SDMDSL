/**
 * generated by Xtext
 */
package org.xtext.alma.enumeration.validation;

import com.google.common.collect.Iterables;
import java.util.HashMap;
import java.util.HashSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.validation.Check;
import org.xtext.alma.enumeration.enumeration.EnumType;
import org.xtext.alma.enumeration.enumeration.EnumValue;
import org.xtext.alma.enumeration.enumeration.EnumValueWithoutComma;
import org.xtext.alma.enumeration.enumeration.EnumerationPackage;
import org.xtext.alma.enumeration.validation.AbstractEnumerationValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class EnumerationValidator extends AbstractEnumerationValidator {
  /**
   * enumeration's possible error list
   */
  public final static String DUPLICATE_ENUM_NAME = "duplicateEnumName";
  
  public final static String DUPLICATE_ENUM_VALUE_NAME = "duplicateEnumValueName";
  
  public final static String ENUM_NAME_DIFF_FROM_FILE_NAME = "enumNameIsDiffFromFileName";
  
  /**
   * Validation of enumeration name. Enumeration must have the same name as its file name
   */
  @Check
  public void enumNameDiffFromFile(final EnumType enumType) {
    EObject _eContainer = enumType.eContainer();
    Resource _eResource = _eContainer.eResource();
    URI _uRI = _eResource.getURI();
    String _path = _uRI.path();
    String path = ((String) _path);
    int _lastIndexOf = path.lastIndexOf("/");
    int _plus = (_lastIndexOf + 1);
    String _substring = path.substring(_plus);
    path = _substring;
    String _name = enumType.getName();
    String _plus_1 = (_name + ".enum");
    boolean _equals = path.equals(_plus_1);
    boolean _not = (!_equals);
    if (_not) {
      this.error("Enumeration name is different from file name", enumType, 
        EnumerationPackage.Literals.ENUM_TYPE__NAME, 
        EnumerationValidator.ENUM_NAME_DIFF_FROM_FILE_NAME);
    }
  }
  
  /**
   * Validation of unique field names inside enumeration
   */
  @Check
  public void enumUniqueFieldValidation(final EnumType enumType) {
    HashMap<String, EnumValue> map = new HashMap<String, EnumValue>();
    HashSet<String> set = new HashSet<String>();
    EList<EObject> _values = enumType.getValues();
    EObject _get = _values.get(0);
    EnumValueWithoutComma firstValue = ((EnumValueWithoutComma) _get);
    String _name = firstValue.getName();
    set.add(_name);
    EList<EObject> _values_1 = enumType.getValues();
    Iterable<EnumValue> _filter = Iterables.<EnumValue>filter(_values_1, EnumValue.class);
    for (final EnumValue eValue : _filter) {
      String _name_1 = eValue.getName();
      boolean _contains = set.contains(_name_1);
      if (_contains) {
        this.error("Enum values must be unique", eValue, 
          EnumerationPackage.Literals.ENUM_VALUE__NAME, 
          EnumerationValidator.DUPLICATE_ENUM_VALUE_NAME);
        String _name_2 = firstValue.getName();
        String _name_3 = eValue.getName();
        boolean _equals = _name_2.equals(_name_3);
        if (_equals) {
          this.error("Enum values must be unique", firstValue, 
            EnumerationPackage.Literals.ENUM_VALUE_WITHOUT_COMMA__NAME, 
            EnumerationValidator.DUPLICATE_ENUM_VALUE_NAME);
        } else {
          String _name_4 = eValue.getName();
          String _string = _name_4.toString();
          EnumValue _get_1 = map.get(_string);
          this.error("Enum values must be unique", _get_1, 
            EnumerationPackage.Literals.ENUM_VALUE__NAME, 
            EnumerationValidator.DUPLICATE_ENUM_VALUE_NAME);
        }
      } else {
        String _name_5 = eValue.getName();
        String _string_1 = _name_5.toString();
        map.put(_string_1, eValue);
        String _name_6 = eValue.getName();
        set.add(_name_6);
      }
    }
  }
}
