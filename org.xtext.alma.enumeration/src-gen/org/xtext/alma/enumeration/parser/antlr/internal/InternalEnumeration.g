/*
 * generated by Xtext 2.9.1
 */
grammar InternalEnumeration;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.alma.enumeration.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.alma.enumeration.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.alma.enumeration.services.EnumerationGrammarAccess;

}

@parser::members {

 	private EnumerationGrammarAccess grammarAccess;

    public InternalEnumerationParser(TokenStream input, EnumerationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "EnumType";
   	}

   	@Override
   	protected EnumerationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEnumType
entryRuleEnumType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeRule()); }
	iv_ruleEnumType=ruleEnumType
	{ $current=$iv_ruleEnumType.current; }
	EOF;

// Rule EnumType
ruleEnumType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_docGlobal_0_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_docGlobal_0_0, grammarAccess.getEnumTypeAccess().getDocGlobalML_COMMENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"docGlobal",
						lv_docGlobal_0_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
		otherlv_1='version'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumTypeAccess().getVersionKeyword_1());
		}
		(
			(
				lv_version_2_0=RULE_INT
				{
					newLeafNode(lv_version_2_0, grammarAccess.getEnumTypeAccess().getVersionINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"version",
						lv_version_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='revision'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumTypeAccess().getRevisionKeyword_3());
		}
		(
			(
				lv_revision_4_0=RULE_STRING
				{
					newLeafNode(lv_revision_4_0, grammarAccess.getEnumTypeAccess().getRevisionSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"revision",
						lv_revision_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5='xmlns'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnumTypeAccess().getXmlnsKeyword_5());
		}
		(
			(
				lv_xmlns_6_0=RULE_STRING
				{
					newLeafNode(lv_xmlns_6_0, grammarAccess.getEnumTypeAccess().getXmlnsSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"xmlns",
						lv_xmlns_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_docEnum_7_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_docEnum_7_0, grammarAccess.getEnumTypeAccess().getDocEnumML_COMMENTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"docEnum",
						lv_docEnum_7_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
		otherlv_8='enum'
		{
			newLeafNode(otherlv_8, grammarAccess.getEnumTypeAccess().getEnumKeyword_8());
		}
		(
			(
				lv_name_9_0=RULE_ID
				{
					newLeafNode(lv_name_9_0, grammarAccess.getEnumTypeAccess().getNameIDTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_9_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_10='{'
		{
			newLeafNode(otherlv_10, grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumTypeAccess().getValuesEnumValueWithoutCommaParserRuleCall_11_0());
				}
				lv_values_11_0=ruleEnumValueWithoutComma
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumTypeRule());
					}
					add(
						$current,
						"values",
						lv_values_11_0,
						"org.xtext.alma.enumeration.Enumeration.EnumValueWithoutComma");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumTypeAccess().getValuesEnumValueParserRuleCall_12_0());
				}
				lv_values_12_0=ruleEnumValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumTypeRule());
					}
					add(
						$current,
						"values",
						lv_values_12_0,
						"org.xtext.alma.enumeration.Enumeration.EnumValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleEnumValueWithoutComma
entryRuleEnumValueWithoutComma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueWithoutCommaRule()); }
	iv_ruleEnumValueWithoutComma=ruleEnumValueWithoutComma
	{ $current=$iv_ruleEnumValueWithoutComma.current; }
	EOF;

// Rule EnumValueWithoutComma
ruleEnumValueWithoutComma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEnumValueWithoutCommaAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueWithoutCommaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_doc_1_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_1_0, grammarAccess.getEnumValueWithoutCommaAccess().getDocML_COMMENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueWithoutCommaRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_1_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
	)
;

// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	iv_ruleEnumValue=ruleEnumValue
	{ $current=$iv_ruleEnumValue.current; }
	EOF;

// Rule EnumValue
ruleEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumValueAccess().getCommaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_doc_2_0=RULE_ML_COMMENT
				{
					newLeafNode(lv_doc_2_0, grammarAccess.getEnumValueAccess().getDocML_COMMENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_2_0,
						"org.eclipse.xtext.common.Terminals.ML_COMMENT");
				}
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
