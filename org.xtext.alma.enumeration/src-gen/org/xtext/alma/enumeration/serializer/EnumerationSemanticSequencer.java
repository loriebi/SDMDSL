/*
 * generated by Xtext 2.9.1
 */
package org.xtext.alma.enumeration.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.alma.enumeration.enumeration.EnumType;
import org.xtext.alma.enumeration.enumeration.EnumValue;
import org.xtext.alma.enumeration.enumeration.EnumValueWithoutComma;
import org.xtext.alma.enumeration.enumeration.EnumerationPackage;
import org.xtext.alma.enumeration.services.EnumerationGrammarAccess;

@SuppressWarnings("all")
public class EnumerationSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EnumerationGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EnumerationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EnumerationPackage.ENUM_TYPE:
				sequence_EnumType(context, (EnumType) semanticObject); 
				return; 
			case EnumerationPackage.ENUM_VALUE:
				sequence_EnumValue(context, (EnumValue) semanticObject); 
				return; 
			case EnumerationPackage.ENUM_VALUE_WITHOUT_COMMA:
				sequence_EnumValueWithoutComma(context, (EnumValueWithoutComma) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EnumType returns EnumType
	 *
	 * Constraint:
	 *     (
	 *         docGlobal=ML_COMMENT? 
	 *         version=INT 
	 *         revision=STRING 
	 *         xmlns=STRING 
	 *         docEnum=ML_COMMENT? 
	 *         name=ID 
	 *         values+=EnumValueWithoutComma 
	 *         values+=EnumValue*
	 *     )
	 */
	protected void sequence_EnumType(ISerializationContext context, EnumType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumValueWithoutComma returns EnumValueWithoutComma
	 *
	 * Constraint:
	 *     (name=ID doc=ML_COMMENT?)
	 */
	protected void sequence_EnumValueWithoutComma(ISerializationContext context, EnumValueWithoutComma semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumValue returns EnumValue
	 *
	 * Constraint:
	 *     (name=ID doc=ML_COMMENT?)
	 */
	protected void sequence_EnumValue(ISerializationContext context, EnumValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
