/*
 * generated by Xtext
 */
package org.xtext.alma.enumeration.validation

import java.util.HashMap
import java.util.HashSet
import org.eclipse.xtext.validation.Check
import org.xtext.alma.enumeration.enumeration.EnumType
import org.xtext.alma.enumeration.enumeration.EnumValue
import org.xtext.alma.enumeration.enumeration.EnumValueWithoutComma
import org.xtext.alma.enumeration.enumeration.EnumerationPackage

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EnumerationValidator extends AbstractEnumerationValidator {
	
	/** enumeration's possible error list */
	public static val DUPLICATE_ENUM_NAME = 'duplicateEnumName'
	public static val DUPLICATE_ENUM_VALUE_NAME = 'duplicateEnumValueName'
	public static val ENUM_NAME_DIFF_FROM_FILE_NAME = 'enumNameIsDiffFromFileName'
	
	
	/** Validation of enumeration name. Enumeration must have the same name as its file name */
	@Check 
	def enumNameDiffFromFile(EnumType enumType){

		/* 
		System.out.println(enumType.eContainer.eResource.URI.path + " <--- URI")
		System.out.println(enumType.fullyQualifiedName + " <-- fullyQualifiedName")
		System.out.println(enumType.name + " <-- name")
		* 
		*/

		
		var path = enumType.eContainer.eResource.URI.path as String
		path = path.substring(path.lastIndexOf("/")+1)
		//System.out.println(path)
		
		if(!path.equals(enumType.name + ".enum")){
			error('Enumeration name is different from file name',
					enumType,
					EnumerationPackage.Literals.ENUM_TYPE__NAME,
					ENUM_NAME_DIFF_FROM_FILE_NAME
				)
		}
	}
	
	
	
	/**  Validation of unique field names inside enumeration */ 
	@Check
	def enumUniqueFieldValidation(EnumType enumType){
		
		// map --- value name and EnumValue type 
		var map = new HashMap<String,EnumValue>
		// set contains value names of enumeration
		var set = new HashSet<String>
		
		// adding first value to set
		var firstValue = enumType.values.get(0) as EnumValueWithoutComma
		set.add(firstValue.name)
		
		
		// looking for same values inside enumeration
		for(EnumValue eValue : enumType.values.filter(EnumValue)){
			
			// if true --> found two same values inside enumeration
			if(set.contains(eValue.name)){ 
				
				// error marker on eValue name
				error('Enum values must be unique',
					eValue,
					EnumerationPackage.Literals.ENUM_VALUE__NAME,
					DUPLICATE_ENUM_VALUE_NAME
				)
				if(firstValue.name.equals(eValue.name)){
						// error marker on second DUPLICATE value name
						error('Enum values must be unique',
							firstValue,
							EnumerationPackage.Literals.ENUM_VALUE_WITHOUT_COMMA__NAME,						
							DUPLICATE_ENUM_VALUE_NAME)
				}else{
					// error marker on second DUPLICATE value name, that not equal to firstValue
					error('Enum values must be unique',
					map.get(eValue.name.toString),
					EnumerationPackage.Literals.ENUM_VALUE__NAME,
					DUPLICATE_ENUM_VALUE_NAME)
				}
			}else{
				
				// no duplicate value in the set
				// adding eValue to the set and map
				map.put(eValue.name.toString,eValue)
				set.add(eValue.name)
				
			}
			
			
			
		}
		
	}
	
}
