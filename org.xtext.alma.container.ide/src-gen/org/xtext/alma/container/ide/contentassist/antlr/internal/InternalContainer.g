/*
 * generated by Xtext 2.10.0
 */
grammar InternalContainer;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.alma.container.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.alma.container.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.alma.container.services.ContainerGrammarAccess;

}
@parser::members {
	private ContainerGrammarAccess grammarAccess;

	public void setGrammarAccess(ContainerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleContainer
entryRuleContainer
:
{ before(grammarAccess.getContainerRule()); }
	 ruleContainer
{ after(grammarAccess.getContainerRule()); } 
	 EOF 
;

// Rule Container
ruleContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerAccess().getGroup()); }
		(rule__Container__Group__0)
		{ after(grammarAccess.getContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainerField
entryRuleContainerField
:
{ before(grammarAccess.getContainerFieldRule()); }
	 ruleContainerField
{ after(grammarAccess.getContainerFieldRule()); } 
	 EOF 
;

// Rule ContainerField
ruleContainerField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerFieldAccess().getGroup()); }
		(rule__ContainerField__Group__0)
		{ after(grammarAccess.getContainerFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveTypes
entryRulePrimitiveTypes
:
{ before(grammarAccess.getPrimitiveTypesRule()); }
	 rulePrimitiveTypes
{ after(grammarAccess.getPrimitiveTypesRule()); } 
	 EOF 
;

// Rule PrimitiveTypes
rulePrimitiveTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveTypesAccess().getAlternatives()); }
		(rule__PrimitiveTypes__Alternatives)
		{ after(grammarAccess.getPrimitiveTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicType
entryRuleBasicType
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicTypeAccess().getAlternatives()); }
		(rule__BasicType__Alternatives)
		{ after(grammarAccess.getBasicTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhysicalType
entryRulePhysicalType
:
{ before(grammarAccess.getPhysicalTypeRule()); }
	 rulePhysicalType
{ after(grammarAccess.getPhysicalTypeRule()); } 
	 EOF 
;

// Rule PhysicalType
rulePhysicalType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getAlternatives()); }
		(rule__PhysicalType__Alternatives)
		{ after(grammarAccess.getPhysicalTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTechnicalType
entryRuleTechnicalType
:
{ before(grammarAccess.getTechnicalTypeRule()); }
	 ruleTechnicalType
{ after(grammarAccess.getTechnicalTypeRule()); } 
	 EOF 
;

// Rule TechnicalType
ruleTechnicalType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTechnicalTypeAccess().getAlternatives()); }
		(rule__TechnicalType__Alternatives)
		{ after(grammarAccess.getTechnicalTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeType
entryRuleTimeType
:
{ before(grammarAccess.getTimeTypeRule()); }
	 ruleTimeType
{ after(grammarAccess.getTimeTypeRule()); } 
	 EOF 
;

// Rule TimeType
ruleTimeType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeTypeAccess().getAlternatives()); }
		(rule__TimeType__Alternatives)
		{ after(grammarAccess.getTimeTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypesAccess().getBasicTypeParserRuleCall_0()); }
		ruleBasicType
		{ after(grammarAccess.getPrimitiveTypesAccess().getBasicTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypesAccess().getPhysicalTypeParserRuleCall_1()); }
		rulePhysicalType
		{ after(grammarAccess.getPrimitiveTypesAccess().getPhysicalTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypesAccess().getTechnicalTypeParserRuleCall_2()); }
		ruleTechnicalType
		{ after(grammarAccess.getPrimitiveTypesAccess().getTechnicalTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypesAccess().getTimeTypeParserRuleCall_3()); }
		ruleTimeType
		{ after(grammarAccess.getPrimitiveTypesAccess().getTimeTypeParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getCharKeyword_0()); }
		'Char'
		{ after(grammarAccess.getBasicTypeAccess().getCharKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getShortKeyword_1()); }
		'Short'
		{ after(grammarAccess.getBasicTypeAccess().getShortKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getIntegerKeyword_2()); }
		'Integer'
		{ after(grammarAccess.getBasicTypeAccess().getIntegerKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getLongKeyword_3()); }
		'Long'
		{ after(grammarAccess.getBasicTypeAccess().getLongKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getFloatKeyword_4()); }
		'Float'
		{ after(grammarAccess.getBasicTypeAccess().getFloatKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getDoubleKeyword_5()); }
		'Double'
		{ after(grammarAccess.getBasicTypeAccess().getDoubleKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getComplexKeyword_6()); }
		'Complex'
		{ after(grammarAccess.getBasicTypeAccess().getComplexKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getStringKeyword_7()); }
		'String'
		{ after(grammarAccess.getBasicTypeAccess().getStringKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getBooleanKeyword_8()); }
		'Boolean'
		{ after(grammarAccess.getBasicTypeAccess().getBooleanKeyword_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getAngleKeyword_0()); }
		'Angle'
		{ after(grammarAccess.getPhysicalTypeAccess().getAngleKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getAngularRateKeyword_1()); }
		'AngularRate'
		{ after(grammarAccess.getPhysicalTypeAccess().getAngularRateKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getFluxKeyword_2()); }
		'Flux'
		{ after(grammarAccess.getPhysicalTypeAccess().getFluxKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getFrequencyKeyword_3()); }
		'Frequency'
		{ after(grammarAccess.getPhysicalTypeAccess().getFrequencyKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getHumidityKeyword_4()); }
		'Humidity'
		{ after(grammarAccess.getPhysicalTypeAccess().getHumidityKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getLengthKeyword_5()); }
		'Length'
		{ after(grammarAccess.getPhysicalTypeAccess().getLengthKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getPressureKeyword_6()); }
		'Pressure'
		{ after(grammarAccess.getPhysicalTypeAccess().getPressureKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getSpeedKeyword_7()); }
		'Speed'
		{ after(grammarAccess.getPhysicalTypeAccess().getSpeedKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getPhysicalTypeAccess().getTemperatureKeyword_8()); }
		'Temperature'
		{ after(grammarAccess.getPhysicalTypeAccess().getTemperatureKeyword_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TechnicalType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTechnicalTypeAccess().getTagKeyword_0()); }
		'Tag'
		{ after(grammarAccess.getTechnicalTypeAccess().getTagKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTechnicalTypeAccess().getEntityKeyword_1()); }
		'Entity'
		{ after(grammarAccess.getTechnicalTypeAccess().getEntityKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTechnicalTypeAccess().getEntityIdKeyword_2()); }
		'EntityId'
		{ after(grammarAccess.getTechnicalTypeAccess().getEntityIdKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getTechnicalTypeAccess().getEntityRefKeyword_3()); }
		'EntityRef'
		{ after(grammarAccess.getTechnicalTypeAccess().getEntityRefKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeTypeAccess().getIntervalKeyword_0()); }
		'Interval'
		{ after(grammarAccess.getTimeTypeAccess().getIntervalKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeTypeAccess().getArrayTimeKeyword_1()); }
		'ArrayTime'
		{ after(grammarAccess.getTimeTypeAccess().getArrayTimeKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeTypeAccess().getArrayTimeIntervalKeyword_2()); }
		'ArrayTimeInterval'
		{ after(grammarAccess.getTimeTypeAccess().getArrayTimeIntervalKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__0__Impl
	rule__Container__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getDocAssignment_0()); }
	(rule__Container__DocAssignment_0)?
	{ after(grammarAccess.getContainerAccess().getDocAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__1__Impl
	rule__Container__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getContainerKeyword_1()); }
	'container'
	{ after(grammarAccess.getContainerAccess().getContainerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__2__Impl
	rule__Container__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getNameAssignment_2()); }
	(rule__Container__NameAssignment_2)
	{ after(grammarAccess.getContainerAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__3__Impl
	rule__Container__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__4__Impl
	rule__Container__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getDataAssignment_4()); }
	(rule__Container__DataAssignment_4)*
	{ after(grammarAccess.getContainerAccess().getDataAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerField__Group__0__Impl
	rule__ContainerField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerFieldAccess().getPrimitiveTypeAssignment_0()); }
	(rule__ContainerField__PrimitiveTypeAssignment_0)
	{ after(grammarAccess.getContainerFieldAccess().getPrimitiveTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerField__Group__1__Impl
	rule__ContainerField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerFieldAccess().getNameAssignment_1()); }
	(rule__ContainerField__NameAssignment_1)
	{ after(grammarAccess.getContainerFieldAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerField__Group__2__Impl
	rule__ContainerField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerFieldAccess().getReadOnlyAssignment_2()); }
	(rule__ContainerField__ReadOnlyAssignment_2)?
	{ after(grammarAccess.getContainerFieldAccess().getReadOnlyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerField__Group__3__Impl
	rule__ContainerField__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerFieldAccess().getInitValueAssignment_3()); }
	(rule__ContainerField__InitValueAssignment_3)?
	{ after(grammarAccess.getContainerFieldAccess().getInitValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerField__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerFieldAccess().getDocAssignment_4()); }
	(rule__ContainerField__DocAssignment_4)?
	{ after(grammarAccess.getContainerFieldAccess().getDocAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__DocAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getDocML_COMMENTTerminalRuleCall_0_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getContainerAccess().getDocML_COMMENTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getContainerAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__DataAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getDataContainerFieldParserRuleCall_4_0()); }
		ruleContainerField
		{ after(grammarAccess.getContainerAccess().getDataContainerFieldParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__PrimitiveTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerFieldAccess().getPrimitiveTypePrimitiveTypesParserRuleCall_0_0()); }
		rulePrimitiveTypes
		{ after(grammarAccess.getContainerFieldAccess().getPrimitiveTypePrimitiveTypesParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerFieldAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getContainerFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__ReadOnlyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerFieldAccess().getReadOnlyReadOnlyKeyword_2_0()); }
		(
			{ before(grammarAccess.getContainerFieldAccess().getReadOnlyReadOnlyKeyword_2_0()); }
			'readOnly'
			{ after(grammarAccess.getContainerFieldAccess().getReadOnlyReadOnlyKeyword_2_0()); }
		)
		{ after(grammarAccess.getContainerFieldAccess().getReadOnlyReadOnlyKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__InitValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerFieldAccess().getInitValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getContainerFieldAccess().getInitValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerField__DocAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerFieldAccess().getDocML_COMMENTTerminalRuleCall_4_0()); }
		RULE_ML_COMMENT
		{ after(grammarAccess.getContainerFieldAccess().getDocML_COMMENTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
